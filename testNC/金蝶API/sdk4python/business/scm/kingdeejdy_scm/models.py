# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel
from typing import Any, List


class ApiResponse(TeaModel):
    def __init__(
        self,
        error_code: str = None,
        message: str = None,
        success: bool = None,
        data: Any = None,
    ):
        self.error_code = error_code
        self.message = message
        self.success = success
        self.data = data

    def validate(self):
        self.validate_required(self.error_code, 'error_code')
        self.validate_required(self.message, 'message')
        self.validate_required(self.success, 'success')
        self.validate_required(self.data, 'data')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        if self.message is not None:
            result['message'] = self.message
        if self.success is not None:
            result['success'] = self.success
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self

class ErrorInfo(TeaModel):
    def __init__(
        self,
        id: str = None,
        msg: str = None,
    ):
        self.id = id
        self.msg = msg

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.msg is not None:
            result['msg'] = self.msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('msg') is not None:
            self.msg = m.get('msg')
        return self

class ReceiveInfo(TeaModel):
    def __init__(
        self,
        settle_account: str = None,
        pany_type: str = None,
        amount: str = None,
    ):
        # 付款账户id
        self.settle_account = settle_account
        # 付款方式id
        self.pany_type = pany_type
        # 付款金额
        self.amount = amount

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.settle_account is not None:
            result['settleaccountid_id'] = self.settle_account
        if self.pany_type is not None:
            result['paytypeid_id'] = self.pany_type
        if self.amount is not None:
            result['receive_amount'] = self.amount
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('settleaccountid_id') is not None:
            self.settle_account = m.get('settleaccountid_id')
        if m.get('paytypeid_id') is not None:
            self.pany_type = m.get('paytypeid_id')
        if m.get('receive_amount') is not None:
            self.amount = m.get('receive_amount')
        return self

class CustomFeeEntity(TeaModel):
    def __init__(
        self,
        id: str = None,
        name: str = None,
        amount: str = None,
        comment: str = None,
    ):
        self.id = id
        # 收入名称id
        self.name = name
        # 收入金额
        self.amount = amount
        # 客户承担费用备注
        self.comment = comment

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['income_name_id'] = self.name
        if self.amount is not None:
            result['income_amount'] = self.amount
        if self.comment is not None:
            result['income_comment'] = self.comment
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('income_name_id') is not None:
            self.name = m.get('income_name_id')
        if m.get('income_amount') is not None:
            self.amount = m.get('income_amount')
        if m.get('income_comment') is not None:
            self.comment = m.get('income_comment')
        return self


class PaymentEntry(TeaModel):
    def __init__(
        self,
        id: str = None,
        account: str = None,
        type_id: str = None,
        payed_amount: str = None,
        amount_for: str = None,
        comment: str = None,
        seq: str = None,
        transnumber: str = None,
    ):
        self.id = id
        # 收款账户
        self.account = account
        # 收款方式
        self.type_id = type_id
        # 收款金额
        self.payed_amount = payed_amount
        # 收款金额
        self.amount_for = amount_for
        # 备注
        self.comment = comment
        self.seq = seq
        self.transnumber = transnumber

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.account is not None:
            result['settleaccountid_id'] = self.account
        if self.type_id is not None:
            result['paytypeid_id'] = self.type_id
        if self.payed_amount is not None:
            result['paid_amount'] = self.payed_amount
        if self.amount_for is not None:
            result['amountor'] = self.amount_for
        if self.comment is not None:
            result['pay_comment'] = self.comment
        if self.seq is not None:
            result['seq'] = self.seq
        if self.transnumber is not None:
            result['transnumber'] = self.transnumber
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('settleaccountid_id') is not None:
            self.account = m.get('settleaccountid_id')
        if m.get('paytypeid_id') is not None:
            self.type_id = m.get('paytypeid_id')
        if m.get('paid_amount') is not None:
            self.payed_amount = m.get('paid_amount')
        if m.get('amountor') is not None:
            self.amount_for = m.get('amountor')
        if m.get('pay_comment') is not None:
            self.comment = m.get('pay_comment')
        if m.get('seq') is not None:
            self.seq = m.get('seq')
        if m.get('transnumber') is not None:
            self.transnumber = m.get('transnumber')
        return self


class AttachmentEntry(TeaModel):
    def __init__(
        self,
        id: str = None,
        panel: str = None,
        url: str = None,
    ):
        self.id = id
        self.panel = panel
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.panel is not None:
            result['panel'] = self.panel
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('panel') is not None:
            self.panel = m.get('panel')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self

class FeeRecords(TeaModel):
    def __init__(
        self,
        id: str = None,
        supplier: str = None,
        pay_type: str = None,
        amount: str = None,
        amountfor: str = None,
        cess: str = None,
        tax_amount: str = None,
        all_amount: str = None,
        all_amount_for: str = None,
        currency: str = None,
        exchange_rate: str = None,
        linked_bill_no: str = None,
        comment: str = None,
        receive_entry: List[ReceiveInfo] = None,
    ):
        self.id = id
        # 供应商，当付款金额合计等于费用时为非必填项
        self.supplier = supplier
        # 支出类型
        self.pay_type = pay_type
        # 费用
        self.amount = amount
        # 费用本位币
        self.amountfor = amountfor
        # 税率
        self.cess = cess
        # 税额
        self.tax_amount = tax_amount
        # 价税合计
        self.all_amount = all_amount
        # 价税合计本位币
        self.all_amount_for = all_amount_for
        # 币别id
        self.currency = currency
        # 汇率
        self.exchange_rate = exchange_rate
        # 生成的其他应付单号
        self.linked_bill_no = linked_bill_no
        # 备注
        self.comment = comment
        # 付款信息单据体
        self.receive_entry = receive_entry

    def validate(self):
        self.validate_required(self.all_amount_for, 'all_amount_for')
        if self.receive_entry:
            for k in self.receive_entry:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.supplier is not None:
            result['supplierid_id'] = self.supplier
        if self.pay_type is not None:
            result['paccttypeid_id'] = self.pay_type
        if self.amount is not None:
            result['amount'] = self.amount
        if self.amountfor is not None:
            result['amountfor'] = self.amountfor
        if self.cess is not None:
            result['cess'] = self.cess
        if self.tax_amount is not None:
            result['taxamount'] = self.tax_amount
        if self.all_amount is not None:
            result['allamount'] = self.all_amount
        if self.all_amount_for is not None:
            result['allamountfor'] = self.all_amount_for
        if self.currency is not None:
            result['currencyid_id'] = self.currency
        if self.exchange_rate is not None:
            result['exchangerate'] = self.exchange_rate
        if self.linked_bill_no is not None:
            result['linkedbillno'] = self.linked_bill_no
        if self.comment is not None:
            result['comment'] = self.comment
        result['receive_info_entity'] = []
        if self.receive_entry is not None:
            for k in self.receive_entry:
                result['receive_info_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('supplierid_id') is not None:
            self.supplier = m.get('supplierid_id')
        if m.get('paccttypeid_id') is not None:
            self.pay_type = m.get('paccttypeid_id')
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('amountfor') is not None:
            self.amountfor = m.get('amountfor')
        if m.get('cess') is not None:
            self.cess = m.get('cess')
        if m.get('taxamount') is not None:
            self.tax_amount = m.get('taxamount')
        if m.get('allamount') is not None:
            self.all_amount = m.get('allamount')
        if m.get('allamountfor') is not None:
            self.all_amount_for = m.get('allamountfor')
        if m.get('currencyid_id') is not None:
            self.currency = m.get('currencyid_id')
        if m.get('exchangerate') is not None:
            self.exchange_rate = m.get('exchangerate')
        if m.get('linkedbillno') is not None:
            self.linked_bill_no = m.get('linkedbillno')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        self.receive_entry = []
        if m.get('receive_info_entity') is not None:
            for k in m.get('receive_info_entity'):
                temp_model = ReceiveInfo()
                self.receive_entry.append(temp_model.from_map(k))
        return self
class ReceiptEntry(TeaModel):
    def __init__(
        self,
        id: str = None,
        settle_account: str = None,
        pay_type: str = None,
        amount: str = None,
        comment: str = None,
        transnumber: str = None,
    ):
        # 分录id(新增时不传)
        self.id = id
        # 付款账户
        self.settle_account = settle_account
        # 付款方式
        self.pay_type = pay_type
        # 付款金额（应大于0）
        self.amount = amount
        # 付款备注
        self.comment = comment
        # 交易号/票据号
        self.transnumber = transnumber

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.settle_account is not None:
            result['settleaccount_id'] = self.settle_account
        if self.pay_type is not None:
            result['paytype_id'] = self.pay_type
        if self.amount is not None:
            result['amount'] = self.amount
        if self.comment is not None:
            result['comment'] = self.comment
        if self.transnumber is not None:
            result['transnumber'] = self.transnumber
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('settleaccount_id') is not None:
            self.settle_account = m.get('settleaccount_id')
        if m.get('paytype_id') is not None:
            self.pay_type = m.get('paytype_id')
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('transnumber') is not None:
            self.transnumber = m.get('transnumber')
        return self

class PaymentEntry(TeaModel):
    def __init__(
        self,
        id: str = None,
        account: str = None,
        type_id: str = None,
        payed_amount: str = None,
        amount_for: str = None,
        comment: str = None,
        seq: str = None,
        transnumber: str = None,
    ):
        self.id = id
        # 收款账户
        self.account = account
        # 收款方式
        self.type_id = type_id
        # 收款金额
        self.payed_amount = payed_amount
        # 收款金额
        self.amount_for = amount_for
        # 备注
        self.comment = comment
        self.seq = seq
        self.transnumber = transnumber

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.account is not None:
            result['settleaccountid_id'] = self.account
        if self.type_id is not None:
            result['paytypeid_id'] = self.type_id
        if self.payed_amount is not None:
            result['paid_amount'] = self.payed_amount
        if self.amount_for is not None:
            result['amountor'] = self.amount_for
        if self.comment is not None:
            result['pay_comment'] = self.comment
        if self.seq is not None:
            result['seq'] = self.seq
        if self.transnumber is not None:
            result['transnumber'] = self.transnumber
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('settleaccountid_id') is not None:
            self.account = m.get('settleaccountid_id')
        if m.get('paytypeid_id') is not None:
            self.type_id = m.get('paytypeid_id')
        if m.get('paid_amount') is not None:
            self.payed_amount = m.get('paid_amount')
        if m.get('amountor') is not None:
            self.amount_for = m.get('amountor')
        if m.get('pay_comment') is not None:
            self.comment = m.get('pay_comment')
        if m.get('seq') is not None:
            self.seq = m.get('seq')
        if m.get('transnumber') is not None:
            self.transnumber = m.get('transnumber')
        return self


class AttachmentEntry(TeaModel):
    def __init__(
        self,
        id: str = None,
        panel: str = None,
        url: str = None,
    ):
        self.id = id
        self.panel = panel
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.panel is not None:
            result['panel'] = self.panel
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('panel') is not None:
            self.panel = m.get('panel')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self
class PayFromEntry(TeaModel):
    def __init__(
        self,
        id: str = None,
        settleaccount_id: str = None,
        settleaccount_name: str = None,
        settleaccount_number: str = None,
        paytype_id: str = None,
        paytype_name: str = None,
        paytype_number: str = None,
        amount: str = None,
        amountfor: str = None,
        transnumber: str = None,
        comment: str = None,
    ):
        # 分录id(新增时不传)
        self.id = id
        # 账户
        self.settleaccount_id = settleaccount_id
        # 账户名称
        self.settleaccount_name = settleaccount_name
        # 账户编码
        self.settleaccount_number = settleaccount_number
        # 支付id
        self.paytype_id = paytype_id
        # 支付名称
        self.paytype_name = paytype_name
        # 支付编码
        self.paytype_number = paytype_number
        # 金额
        self.amount = amount
        # 金额(本位币)
        self.amountfor = amountfor
        # 交易号/票据号
        self.transnumber = transnumber
        # 付款备注
        self.comment = comment

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.settleaccount_id is not None:
            result['settleaccount_id'] = self.settleaccount_id
        if self.settleaccount_name is not None:
            result['settleaccount_name'] = self.settleaccount_name
        if self.settleaccount_number is not None:
            result['settleaccount_number'] = self.settleaccount_number
        if self.paytype_id is not None:
            result['paytype_id'] = self.paytype_id
        if self.paytype_name is not None:
            result['paytype_name'] = self.paytype_name
        if self.paytype_number is not None:
            result['paytype_number'] = self.paytype_number
        if self.amount is not None:
            result['amount'] = self.amount
        if self.amountfor is not None:
            result['amountfor'] = self.amountfor
        if self.transnumber is not None:
            result['transnumber'] = self.transnumber
        if self.comment is not None:
            result['comment'] = self.comment
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('settleaccount_id') is not None:
            self.settleaccount_id = m.get('settleaccount_id')
        if m.get('settleaccount_name') is not None:
            self.settleaccount_name = m.get('settleaccount_name')
        if m.get('settleaccount_number') is not None:
            self.settleaccount_number = m.get('settleaccount_number')
        if m.get('paytype_id') is not None:
            self.paytype_id = m.get('paytype_id')
        if m.get('paytype_name') is not None:
            self.paytype_name = m.get('paytype_name')
        if m.get('paytype_number') is not None:
            self.paytype_number = m.get('paytype_number')
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('amountfor') is not None:
            self.amountfor = m.get('amountfor')
        if m.get('transnumber') is not None:
            self.transnumber = m.get('transnumber')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        return self


class SelBillEntry(TeaModel):
    def __init__(
        self,
        id: str = None,
        srcinterid: str = None,
        srcbilltypeid_id: str = None,
        srcbilltypeid_name: str = None,
        srcbillno: str = None,
        srcbillamount: str = None,
        settleamount: str = None,
        unsettleamount: str = None,
        srcbillcomment: str = None,
        srccomment: str = None,
        cursettleamount: str = None,
        cursettleamountfor: str = None,
    ):
        # 分录id(新增时不传)
        self.id = id
        # 源单id
        self.srcinterid = srcinterid
        # 源单类型 id(参考接口描述)
        self.srcbilltypeid_id = srcbilltypeid_id
        # 源单类型 名称
        self.srcbilltypeid_name = srcbilltypeid_name
        # 源单编号
        self.srcbillno = srcbillno
        # 源单金额
        self.srcbillamount = srcbillamount
        # 源单已核销金额
        self.settleamount = settleamount
        # 源单未核销金额
        self.unsettleamount = unsettleamount
        # 源单备注
        self.srcbillcomment = srcbillcomment
        # 备注
        self.srccomment = srccomment
        # 本次核销金额
        self.cursettleamount = cursettleamount
        # 本次核销金额(本位币)
        self.cursettleamountfor = cursettleamountfor

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.srcinterid is not None:
            result['srcinterid'] = self.srcinterid
        if self.srcbilltypeid_id is not None:
            result['srcbilltypeid_id'] = self.srcbilltypeid_id
        if self.srcbilltypeid_name is not None:
            result['srcbilltypeid_name'] = self.srcbilltypeid_name
        if self.srcbillno is not None:
            result['srcbillno'] = self.srcbillno
        if self.srcbillamount is not None:
            result['srcbillamount'] = self.srcbillamount
        if self.settleamount is not None:
            result['settleamount'] = self.settleamount
        if self.unsettleamount is not None:
            result['unsettleamount'] = self.unsettleamount
        if self.srcbillcomment is not None:
            result['srcbillcomment'] = self.srcbillcomment
        if self.srccomment is not None:
            result['srccomment'] = self.srccomment
        if self.cursettleamount is not None:
            result['cursettleamount'] = self.cursettleamount
        if self.cursettleamountfor is not None:
            result['cursettleamountfor'] = self.cursettleamountfor
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('srcinterid') is not None:
            self.srcinterid = m.get('srcinterid')
        if m.get('srcbilltypeid_id') is not None:
            self.srcbilltypeid_id = m.get('srcbilltypeid_id')
        if m.get('srcbilltypeid_name') is not None:
            self.srcbilltypeid_name = m.get('srcbilltypeid_name')
        if m.get('srcbillno') is not None:
            self.srcbillno = m.get('srcbillno')
        if m.get('srcbillamount') is not None:
            self.srcbillamount = m.get('srcbillamount')
        if m.get('settleamount') is not None:
            self.settleamount = m.get('settleamount')
        if m.get('unsettleamount') is not None:
            self.unsettleamount = m.get('unsettleamount')
        if m.get('srcbillcomment') is not None:
            self.srcbillcomment = m.get('srcbillcomment')
        if m.get('srccomment') is not None:
            self.srccomment = m.get('srccomment')
        if m.get('cursettleamount') is not None:
            self.cursettleamount = m.get('cursettleamount')
        if m.get('cursettleamountfor') is not None:
            self.cursettleamountfor = m.get('cursettleamountfor')
        return self


class AttachmentsUrl(TeaModel):
    def __init__(
        self,
        panel: str = None,
        url: str = None,
    ):
        # 附件面板，暂时无用
        self.panel = panel
        # 附件地址
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.panel is not None:
            result['panel'] = self.panel
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('panel') is not None:
            self.panel = m.get('panel')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class PaymentListRequestBody(TeaModel):
    def __init__(
        self,
        search: str = None,
        start_date: str = None,
        end_date: str = None,
        begin_date: str = None,
        expire_date: str = None,
        start_time: int = None,
        end_time: int = None,
        begin_time: int = None,
        expire_time: int = None,
        start_bill_date: str = None,
        end_bill_date: str = None,
        bill_status: str = None,
        bill_source: str = None,
        item_group: str = None,
        item_class: str = None,
        emp: str = None,
        dept: str = None,
        src_bill_inter_id: str = None,
        page: int = None,
        page_size: int = None,
    ):
        self.search = search
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.start_date = start_date
        # 结束日期（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.end_date = end_date
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），修改日期
        self.begin_date = begin_date
        # 结束日期（格式：“yyyy-MM-dd”，为空表示不过滤），修改日期
        self.expire_date = expire_date
        # 开始时间（格式：“时间戳”，-1表示不过滤），创建时间
        self.start_time = start_time
        # 结束时间（格式：“时间戳”，-1表示不过滤），创建时间
        self.end_time = end_time
        # 开始时间（格式：“时间戳”，-1表示不过滤），修改时间
        self.begin_time = begin_time
        # 结束时间（格式：“时间戳”，-1表示不过滤），修改时间
        self.expire_time = expire_time
        # 单据日期-开始日期（“yyyy-MM-dd”）
        self.start_bill_date = start_bill_date
        # 单据日期-结束日期（“yyyy-MM-dd”）
        self.end_bill_date = end_bill_date
        # 单据状态（所有：“”，已审核：“C”，未审核：“A”）
        self.bill_status = bill_status
        # 单据来源 (手机："app", 电脑:“PC”, 所有:"")
        self.bill_source = bill_source
        # 供应商分类id， 单选
        self.item_group = item_group
        # 供应商id， 单选
        self.item_class = item_class
        # 业务员id, 单选
        self.emp = emp
        # 部门id， 单选
        self.dept = dept
        # 源单id
        self.src_bill_inter_id = src_bill_inter_id
        # 当前页（默认1）
        self.page = page
        # 每页显示条数，（默认10，最大值100）
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.search is not None:
            result['search'] = self.search
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.begin_date is not None:
            result['begindate'] = self.begin_date
        if self.expire_date is not None:
            result['expiredate'] = self.expire_date
        if self.start_time is not None:
            result['starttime'] = self.start_time
        if self.end_time is not None:
            result['endtime'] = self.end_time
        if self.begin_time is not None:
            result['begintime'] = self.begin_time
        if self.expire_time is not None:
            result['expiretime'] = self.expire_time
        if self.start_bill_date is not None:
            result['startbilldate'] = self.start_bill_date
        if self.end_bill_date is not None:
            result['endbilldate'] = self.end_bill_date
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.bill_source is not None:
            result['billsource'] = self.bill_source
        if self.item_group is not None:
            result['itemgroup_id'] = self.item_group
        if self.item_class is not None:
            result['itemclass_id'] = self.item_class
        if self.emp is not None:
            result['emp_id'] = self.emp
        if self.dept is not None:
            result['dept_id'] = self.dept
        if self.src_bill_inter_id is not None:
            result['selbillinfoentry_srcinterid'] = self.src_bill_inter_id
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('begindate') is not None:
            self.begin_date = m.get('begindate')
        if m.get('expiredate') is not None:
            self.expire_date = m.get('expiredate')
        if m.get('starttime') is not None:
            self.start_time = m.get('starttime')
        if m.get('endtime') is not None:
            self.end_time = m.get('endtime')
        if m.get('begintime') is not None:
            self.begin_time = m.get('begintime')
        if m.get('expiretime') is not None:
            self.expire_time = m.get('expiretime')
        if m.get('startbilldate') is not None:
            self.start_bill_date = m.get('startbilldate')
        if m.get('endbilldate') is not None:
            self.end_bill_date = m.get('endbilldate')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('billsource') is not None:
            self.bill_source = m.get('billsource')
        if m.get('itemgroup_id') is not None:
            self.item_group = m.get('itemgroup_id')
        if m.get('itemclass_id') is not None:
            self.item_class = m.get('itemclass_id')
        if m.get('emp_id') is not None:
            self.emp = m.get('emp_id')
        if m.get('dept_id') is not None:
            self.dept = m.get('dept_id')
        if m.get('selbillinfoentry_srcinterid') is not None:
            self.src_bill_inter_id = m.get('selbillinfoentry_srcinterid')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        return self


class PaymentListRequest(TeaModel):
    def __init__(
        self,
        body: PaymentListRequestBody = None,
    ):
        self.body = body
        # 付款单列表接口

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = PaymentListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PaymentDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        billno: str = None,
        billdate: str = None,
        billstatus: str = None,
        bill_source: str = None,
        itemclass_id: str = None,
        itemclass_name: str = None,
        itemclass_number: str = None,
        dept_id: str = None,
        dept_name: str = None,
        dept_number: str = None,
        emp_id: str = None,
        emp_name: str = None,
        emp_number: str = None,
        totalbalanceamountmemo: str = None,
        curtotalinstantamount: str = None,
        curtotalinstantamountfor: str = None,
        totaldiscountamount: str = None,
        totaldiscountamountfor: str = None,
        remark: str = None,
        payfromtoentry: List[PayFromEntry] = None,
        selbillinfoentry: List[SelBillEntry] = None,
        attachments_url: List[AttachmentsUrl] = None,
    ):
        # 单据ID
        self.id = id
        # 单据编号
        self.billno = billno
        # 单据日期
        self.billdate = billdate
        # 单据状态，A：未审核，C：已审核
        self.billstatus = billstatus
        # 单据来源 (手机："app", 电脑:“PC”, 所有:"")
        self.bill_source = bill_source
        # 供应商 id
        self.itemclass_id = itemclass_id
        # 供应商名称
        self.itemclass_name = itemclass_name
        # 供应商编码
        self.itemclass_number = itemclass_number
        # 部门 id
        self.dept_id = dept_id
        # 部门名称
        self.dept_name = dept_name
        # 部门编码
        self.dept_number = dept_number
        # 业务员id
        self.emp_id = emp_id
        # 业务员 名称
        self.emp_name = emp_name
        # 业务员编码
        self.emp_number = emp_number
        # 应付款余额
        self.totalbalanceamountmemo = totalbalanceamountmemo
        # 本次付款总金额
        self.curtotalinstantamount = curtotalinstantamount
        # 本次付款总金额(本位币)
        self.curtotalinstantamountfor = curtotalinstantamountfor
        # 优惠金额
        self.totaldiscountamount = totaldiscountamount
        # 优惠金额(本位币)
        self.totaldiscountamountfor = totaldiscountamountfor
        # 备注
        self.remark = remark
        # 付款信息分录
        self.payfromtoentry = payfromtoentry
        # 源单信息分录
        self.selbillinfoentry = selbillinfoentry
        # 附件地址
        self.attachments_url = attachments_url

    def validate(self):
        if self.payfromtoentry:
            for k in self.payfromtoentry:
                if k:
                    k.validate()
        if self.selbillinfoentry:
            for k in self.selbillinfoentry:
                if k:
                    k.validate()
        if self.attachments_url:
            for k in self.attachments_url:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.billno is not None:
            result['billno'] = self.billno
        if self.billdate is not None:
            result['billdate'] = self.billdate
        if self.billstatus is not None:
            result['billstatus'] = self.billstatus
        if self.bill_source is not None:
            result['billsource'] = self.bill_source
        if self.itemclass_id is not None:
            result['itemclass_id'] = self.itemclass_id
        if self.itemclass_name is not None:
            result['itemclass_name'] = self.itemclass_name
        if self.itemclass_number is not None:
            result['itemclass_number'] = self.itemclass_number
        if self.dept_id is not None:
            result['dept_id'] = self.dept_id
        if self.dept_name is not None:
            result['dept_name'] = self.dept_name
        if self.dept_number is not None:
            result['dept_number'] = self.dept_number
        if self.emp_id is not None:
            result['emp_id'] = self.emp_id
        if self.emp_name is not None:
            result['emp_name'] = self.emp_name
        if self.emp_number is not None:
            result['emp_number'] = self.emp_number
        if self.totalbalanceamountmemo is not None:
            result['totalbalanceamountmemo'] = self.totalbalanceamountmemo
        if self.curtotalinstantamount is not None:
            result['curtotalinstantamount'] = self.curtotalinstantamount
        if self.curtotalinstantamountfor is not None:
            result['curtotalinstantamountfor'] = self.curtotalinstantamountfor
        if self.totaldiscountamount is not None:
            result['totaldiscountamount'] = self.totaldiscountamount
        if self.totaldiscountamountfor is not None:
            result['totaldiscountamountfor'] = self.totaldiscountamountfor
        if self.remark is not None:
            result['remark'] = self.remark
        result['payfromtoentry'] = []
        if self.payfromtoentry is not None:
            for k in self.payfromtoentry:
                result['payfromtoentry'].append(k.to_map() if k else None)
        result['selbillinfoentry'] = []
        if self.selbillinfoentry is not None:
            for k in self.selbillinfoentry:
                result['selbillinfoentry'].append(k.to_map() if k else None)
        result['attachments_url'] = []
        if self.attachments_url is not None:
            for k in self.attachments_url:
                result['attachments_url'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billno') is not None:
            self.billno = m.get('billno')
        if m.get('billdate') is not None:
            self.billdate = m.get('billdate')
        if m.get('billstatus') is not None:
            self.billstatus = m.get('billstatus')
        if m.get('billsource') is not None:
            self.bill_source = m.get('billsource')
        if m.get('itemclass_id') is not None:
            self.itemclass_id = m.get('itemclass_id')
        if m.get('itemclass_name') is not None:
            self.itemclass_name = m.get('itemclass_name')
        if m.get('itemclass_number') is not None:
            self.itemclass_number = m.get('itemclass_number')
        if m.get('dept_id') is not None:
            self.dept_id = m.get('dept_id')
        if m.get('dept_name') is not None:
            self.dept_name = m.get('dept_name')
        if m.get('dept_number') is not None:
            self.dept_number = m.get('dept_number')
        if m.get('emp_id') is not None:
            self.emp_id = m.get('emp_id')
        if m.get('emp_name') is not None:
            self.emp_name = m.get('emp_name')
        if m.get('emp_number') is not None:
            self.emp_number = m.get('emp_number')
        if m.get('totalbalanceamountmemo') is not None:
            self.totalbalanceamountmemo = m.get('totalbalanceamountmemo')
        if m.get('curtotalinstantamount') is not None:
            self.curtotalinstantamount = m.get('curtotalinstantamount')
        if m.get('curtotalinstantamountfor') is not None:
            self.curtotalinstantamountfor = m.get('curtotalinstantamountfor')
        if m.get('totaldiscountamount') is not None:
            self.totaldiscountamount = m.get('totaldiscountamount')
        if m.get('totaldiscountamountfor') is not None:
            self.totaldiscountamountfor = m.get('totaldiscountamountfor')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        self.payfromtoentry = []
        if m.get('payfromtoentry') is not None:
            for k in m.get('payfromtoentry'):
                temp_model = PayFromEntry()
                self.payfromtoentry.append(temp_model.from_map(k))
        self.selbillinfoentry = []
        if m.get('selbillinfoentry') is not None:
            for k in m.get('selbillinfoentry'):
                temp_model = SelBillEntry()
                self.selbillinfoentry.append(temp_model.from_map(k))
        self.attachments_url = []
        if m.get('attachments_url') is not None:
            for k in m.get('attachments_url'):
                temp_model = AttachmentsUrl()
                self.attachments_url.append(temp_model.from_map(k))
        return self


class SavePaymentRequest(TeaModel):
    def __init__(
        self,
        body: PaymentDetail = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = PaymentDetail()
            self.body = temp_model.from_map(m['body'])
        return self


class CreditDetailRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        number: str = None,
    ):
        # 单据ID
        self.id = id
        # 编码（//id与number二选一）
        self.number = number

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.number is not None:
            result['number'] = self.number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('number') is not None:
            self.number = m.get('number')
        return self


class CreditDetailRequest(TeaModel):
    def __init__(
        self,
        body: CreditDetailRequestBody = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = CreditDetailRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PaymenyDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: PaymentDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code
        # 付款单详情

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = PaymentDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class AccountPayAbleInfo(TeaModel):
    def __init__(
        self,
        id: str = None,
        seq: str = None,
        paccttype_id: str = None,
        paccttype_name: str = None,
        paccttype_number: str = None,
        amount: str = None,
        amountfor: str = None,
        cur_settle_amount: str = None,
        cursettleamountfor: str = None,
        comment: str = None,
    ):
        # 分录id(新增时不传)
        self.id = id
        # 分录序号
        self.seq = seq
        # 支出类型 id
        self.paccttype_id = paccttype_id
        # 支出类型 名称
        self.paccttype_name = paccttype_name
        # 支出类型 编码
        self.paccttype_number = paccttype_number
        # 付款金额（应大于0）
        self.amount = amount
        # 应付金额(本位币)
        self.amountfor = amountfor
        # 本次核销金额 ( 当核销方式为“按分录核销”时必传 )
        self.cur_settle_amount = cur_settle_amount
        # 本次核销金额(本位币)
        self.cursettleamountfor = cursettleamountfor
        # 付款备注
        self.comment = comment

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.seq is not None:
            result['seq'] = self.seq
        if self.paccttype_id is not None:
            result['paccttype_id'] = self.paccttype_id
        if self.paccttype_name is not None:
            result['paccttype_name'] = self.paccttype_name
        if self.paccttype_number is not None:
            result['paccttype_number'] = self.paccttype_number
        if self.amount is not None:
            result['amount'] = self.amount
        if self.amountfor is not None:
            result['amountfor'] = self.amountfor
        if self.cur_settle_amount is not None:
            result['cursettleamount'] = self.cur_settle_amount
        if self.cursettleamountfor is not None:
            result['cursettleamountfor'] = self.cursettleamountfor
        if self.comment is not None:
            result['comment'] = self.comment
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('seq') is not None:
            self.seq = m.get('seq')
        if m.get('paccttype_id') is not None:
            self.paccttype_id = m.get('paccttype_id')
        if m.get('paccttype_name') is not None:
            self.paccttype_name = m.get('paccttype_name')
        if m.get('paccttype_number') is not None:
            self.paccttype_number = m.get('paccttype_number')
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('amountfor') is not None:
            self.amountfor = m.get('amountfor')
        if m.get('cursettleamount') is not None:
            self.cur_settle_amount = m.get('cursettleamount')
        if m.get('cursettleamountfor') is not None:
            self.cursettleamountfor = m.get('cursettleamountfor')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        return self


class InstantPayFromInfo(TeaModel):
    def __init__(
        self,
        id: str = None,
        seq: str = None,
        instantpaytypeid_id: str = None,
        instantpaytypeid_name: str = None,
        instantpaytypeid_number: str = None,
        instantsettleaccountid_id: str = None,
        instantsettleaccountid_name: str = None,
        instantsettleaccountid_number: str = None,
        instantamount: str = None,
        instanttransnumber: str = None,
        instantcomment: str = None,
    ):
        # 分录id(新增时不传)
        self.id = id
        # 分录序号
        self.seq = seq
        # 付款方式id
        self.instantpaytypeid_id = instantpaytypeid_id
        # 付款方式名称
        self.instantpaytypeid_name = instantpaytypeid_name
        # 付款方式编码
        self.instantpaytypeid_number = instantpaytypeid_number
        # 付款账户id
        self.instantsettleaccountid_id = instantsettleaccountid_id
        # 付款账户名称
        self.instantsettleaccountid_name = instantsettleaccountid_name
        # 付款账户编码
        self.instantsettleaccountid_number = instantsettleaccountid_number
        # 付款金额,需大于0
        self.instantamount = instantamount
        # 交易号/票据号
        self.instanttransnumber = instanttransnumber
        # 付款备注
        self.instantcomment = instantcomment

    def validate(self):
        self.validate_required(self.instantamount, 'instantamount')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.seq is not None:
            result['seq'] = self.seq
        if self.instantpaytypeid_id is not None:
            result['instantpaytypeid_id'] = self.instantpaytypeid_id
        if self.instantpaytypeid_name is not None:
            result['instantpaytypeid_name'] = self.instantpaytypeid_name
        if self.instantpaytypeid_number is not None:
            result['instantpaytypeid_number'] = self.instantpaytypeid_number
        if self.instantsettleaccountid_id is not None:
            result['instantsettleaccountid_id'] = self.instantsettleaccountid_id
        if self.instantsettleaccountid_name is not None:
            result['instantsettleaccountid_name'] = self.instantsettleaccountid_name
        if self.instantsettleaccountid_number is not None:
            result['instantsettleaccountid_number'] = self.instantsettleaccountid_number
        if self.instantamount is not None:
            result['instantamount'] = self.instantamount
        if self.instanttransnumber is not None:
            result['instanttransnumber'] = self.instanttransnumber
        if self.instantcomment is not None:
            result['instantcomment'] = self.instantcomment
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('seq') is not None:
            self.seq = m.get('seq')
        if m.get('instantpaytypeid_id') is not None:
            self.instantpaytypeid_id = m.get('instantpaytypeid_id')
        if m.get('instantpaytypeid_name') is not None:
            self.instantpaytypeid_name = m.get('instantpaytypeid_name')
        if m.get('instantpaytypeid_number') is not None:
            self.instantpaytypeid_number = m.get('instantpaytypeid_number')
        if m.get('instantsettleaccountid_id') is not None:
            self.instantsettleaccountid_id = m.get('instantsettleaccountid_id')
        if m.get('instantsettleaccountid_name') is not None:
            self.instantsettleaccountid_name = m.get('instantsettleaccountid_name')
        if m.get('instantsettleaccountid_number') is not None:
            self.instantsettleaccountid_number = m.get('instantsettleaccountid_number')
        if m.get('instantamount') is not None:
            self.instantamount = m.get('instantamount')
        if m.get('instanttransnumber') is not None:
            self.instanttransnumber = m.get('instanttransnumber')
        if m.get('instantcomment') is not None:
            self.instantcomment = m.get('instantcomment')
        return self


class CreditListRequestBody(TeaModel):
    def __init__(
        self,
        search: str = None,
        start_bill_date: str = None,
        end_bill_date: str = None,
        bill_status: str = None,
        bill_source: str = None,
        item_group: str = None,
        item_class: str = None,
        emp: str = None,
        dept: str = None,
        filter_zero: str = None,
        page: int = None,
        page_size: int = None,
    ):
        self.search = search
        # 单据日期-开始日期（“yyyy-MM-dd”）
        self.start_bill_date = start_bill_date
        # 单据日期-结束日期（“yyyy-MM-dd”）
        self.end_bill_date = end_bill_date
        # 单据状态（所有：“”，已审核：“C”，未审核：“A”）
        self.bill_status = bill_status
        # 单据来源 (手机："app", 电脑:“PC”, 所有:"")
        self.bill_source = bill_source
        # 供应商分类id， 单选
        self.item_group = item_group
        # 供应商id， 单选
        self.item_class = item_class
        # 业务员id, 单选
        self.emp = emp
        # 部门id， 单选
        self.dept = dept
        # 过滤字段值为0记录：目前仅支持totalunsettleamount
        self.filter_zero = filter_zero
        # 当前页（默认1）
        self.page = page
        # 每页显示条数，（默认10，最大值100）
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.search is not None:
            result['search'] = self.search
        if self.start_bill_date is not None:
            result['startbilldate'] = self.start_bill_date
        if self.end_bill_date is not None:
            result['endbilldate'] = self.end_bill_date
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.bill_source is not None:
            result['billsource'] = self.bill_source
        if self.item_group is not None:
            result['itemgroup_id'] = self.item_group
        if self.item_class is not None:
            result['itemclass_id'] = self.item_class
        if self.emp is not None:
            result['emp_id'] = self.emp
        if self.dept is not None:
            result['dept_id'] = self.dept
        if self.filter_zero is not None:
            result['filterzero'] = self.filter_zero
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('startbilldate') is not None:
            self.start_bill_date = m.get('startbilldate')
        if m.get('endbilldate') is not None:
            self.end_bill_date = m.get('endbilldate')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('billsource') is not None:
            self.bill_source = m.get('billsource')
        if m.get('itemgroup_id') is not None:
            self.item_group = m.get('itemgroup_id')
        if m.get('itemclass_id') is not None:
            self.item_class = m.get('itemclass_id')
        if m.get('emp_id') is not None:
            self.emp = m.get('emp_id')
        if m.get('dept_id') is not None:
            self.dept = m.get('dept_id')
        if m.get('filterzero') is not None:
            self.filter_zero = m.get('filterzero')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        return self


class CreditListRequest(TeaModel):
    def __init__(
        self,
        body: CreditListRequestBody = None,
    ):
        self.body = body
        # 其他应付单列表接口

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = CreditListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class APOtherCreditDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        billno: str = None,
        bill_source: str = None,
        bill_date: str = None,
        billstatus: str = None,
        biz_type: str = None,
        itemclass_id: str = None,
        itemclass_name: str = None,
        itemclass_number: str = None,
        dept_id: str = None,
        dept_name: str = None,
        dept_number: str = None,
        emp_id: str = None,
        emp_name: str = None,
        emp_number: str = None,
        totalbalanceamountmemo: str = None,
        totalamount: str = None,
        totalamountfor: str = None,
        totaldiscountamount: str = None,
        totaldiscountamountfor: str = None,
        remark: str = None,
        attachments: List[AttachmentsUrl] = None,
        payfromtoentry: List[AccountPayAbleInfo] = None,
        instant_payfroms: List[InstantPayFromInfo] = None,
    ):
        # 单据ID，新增时不传，修改时必传
        self.id = id
        # 单据编号
        self.billno = billno
        # 单据来源，新增时必须传值，移动端固定传入 "APP",其他来源可自定义,修改时可以不传
        self.bill_source = bill_source
        # 单据日期,格式：2019-01-01
        self.bill_date = bill_date
        # 单据状态，A：未审核，C：已审核
        self.billstatus = billstatus
        # 1：付款 2：退款
        self.biz_type = biz_type
        # 供应商 id
        self.itemclass_id = itemclass_id
        # 供应商名称
        self.itemclass_name = itemclass_name
        # 供应商编码
        self.itemclass_number = itemclass_number
        # 部门 id
        self.dept_id = dept_id
        # 部门名称
        self.dept_name = dept_name
        # 部门编码
        self.dept_number = dept_number
        # 业务员id
        self.emp_id = emp_id
        # 业务员 名称
        self.emp_name = emp_name
        # 业务员编码
        self.emp_number = emp_number
        # 应付款余额
        self.totalbalanceamountmemo = totalbalanceamountmemo
        # 本次应付总金额
        self.totalamount = totalamount
        # 本次应付总金额(本位币)
        self.totalamountfor = totalamountfor
        # 优惠金额
        self.totaldiscountamount = totaldiscountamount
        # 优惠金额(本位币)
        self.totaldiscountamountfor = totaldiscountamountfor
        # 单据备注
        self.remark = remark
        # 附件地址
        self.attachments = attachments
        # 应款信息分录
        self.payfromtoentry = payfromtoentry
        # 立即付款分录
        self.instant_payfroms = instant_payfroms
        # 其他应付单新增&修改

    def validate(self):
        if self.attachments:
            for k in self.attachments:
                if k:
                    k.validate()
        self.validate_required(self.payfromtoentry, 'payfromtoentry')
        if self.payfromtoentry:
            for k in self.payfromtoentry:
                if k:
                    k.validate()
        if self.instant_payfroms:
            for k in self.instant_payfroms:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.billno is not None:
            result['billno'] = self.billno
        if self.bill_source is not None:
            result['billsource'] = self.bill_source
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.billstatus is not None:
            result['billdate'] = self.billstatus
        if self.biz_type is not None:
            result['biztype'] = self.biz_type
        if self.itemclass_id is not None:
            result['itemclass_id'] = self.itemclass_id
        if self.itemclass_name is not None:
            result['itemclass_name'] = self.itemclass_name
        if self.itemclass_number is not None:
            result['itemclass_number'] = self.itemclass_number
        if self.dept_id is not None:
            result['dept_id'] = self.dept_id
        if self.dept_name is not None:
            result['dept_name'] = self.dept_name
        if self.dept_number is not None:
            result['dept_number'] = self.dept_number
        if self.emp_id is not None:
            result['emp_id'] = self.emp_id
        if self.emp_name is not None:
            result['emp_name'] = self.emp_name
        if self.emp_number is not None:
            result['emp_number'] = self.emp_number
        if self.totalbalanceamountmemo is not None:
            result['totalbalanceamountmemo'] = self.totalbalanceamountmemo
        if self.totalamount is not None:
            result['totalamount'] = self.totalamount
        if self.totalamountfor is not None:
            result['totalamountfor'] = self.totalamountfor
        if self.totaldiscountamount is not None:
            result['totaldiscountamount'] = self.totaldiscountamount
        if self.totaldiscountamountfor is not None:
            result['totaldiscountamountfor'] = self.totaldiscountamountfor
        if self.remark is not None:
            result['remark'] = self.remark
        result['attachments_url'] = []
        if self.attachments is not None:
            for k in self.attachments:
                result['attachments_url'].append(k.to_map() if k else None)
        result['payfromtoentry'] = []
        if self.payfromtoentry is not None:
            for k in self.payfromtoentry:
                result['payfromtoentry'].append(k.to_map() if k else None)
        result['instantpayfromtoentry'] = []
        if self.instant_payfroms is not None:
            for k in self.instant_payfroms:
                result['instantpayfromtoentry'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billno') is not None:
            self.billno = m.get('billno')
        if m.get('billsource') is not None:
            self.bill_source = m.get('billsource')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('billdate') is not None:
            self.billstatus = m.get('billdate')
        if m.get('biztype') is not None:
            self.biz_type = m.get('biztype')
        if m.get('itemclass_id') is not None:
            self.itemclass_id = m.get('itemclass_id')
        if m.get('itemclass_name') is not None:
            self.itemclass_name = m.get('itemclass_name')
        if m.get('itemclass_number') is not None:
            self.itemclass_number = m.get('itemclass_number')
        if m.get('dept_id') is not None:
            self.dept_id = m.get('dept_id')
        if m.get('dept_name') is not None:
            self.dept_name = m.get('dept_name')
        if m.get('dept_number') is not None:
            self.dept_number = m.get('dept_number')
        if m.get('emp_id') is not None:
            self.emp_id = m.get('emp_id')
        if m.get('emp_name') is not None:
            self.emp_name = m.get('emp_name')
        if m.get('emp_number') is not None:
            self.emp_number = m.get('emp_number')
        if m.get('totalbalanceamountmemo') is not None:
            self.totalbalanceamountmemo = m.get('totalbalanceamountmemo')
        if m.get('totalamount') is not None:
            self.totalamount = m.get('totalamount')
        if m.get('totalamountfor') is not None:
            self.totalamountfor = m.get('totalamountfor')
        if m.get('totaldiscountamount') is not None:
            self.totaldiscountamount = m.get('totaldiscountamount')
        if m.get('totaldiscountamountfor') is not None:
            self.totaldiscountamountfor = m.get('totaldiscountamountfor')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        self.attachments = []
        if m.get('attachments_url') is not None:
            for k in m.get('attachments_url'):
                temp_model = AttachmentsUrl()
                self.attachments.append(temp_model.from_map(k))
        self.payfromtoentry = []
        if m.get('payfromtoentry') is not None:
            for k in m.get('payfromtoentry'):
                temp_model = AccountPayAbleInfo()
                self.payfromtoentry.append(temp_model.from_map(k))
        self.instant_payfroms = []
        if m.get('instantpayfromtoentry') is not None:
            for k in m.get('instantpayfromtoentry'):
                temp_model = InstantPayFromInfo()
                self.instant_payfroms.append(temp_model.from_map(k))
        return self


class OtherCreditSaveRequest(TeaModel):
    def __init__(
        self,
        body: APOtherCreditDetail = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = APOtherCreditDetail()
            self.body = temp_model.from_map(m['body'])
        return self


class APOtherCreditDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: APOtherCreditDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code
        # 其他应付单详情

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = APOtherCreditDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class OtherCreditRetDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        billno: str = None,
        bill_source: str = None,
        bill_date: str = None,
        billstatus: str = None,
        biz_type: str = None,
        itemclass_id: str = None,
        itemclass_name: str = None,
        itemclass_number: str = None,
        dept_id: str = None,
        dept_name: str = None,
        dept_number: str = None,
        emp_id: str = None,
        emp_name: str = None,
        emp_number: str = None,
        totalbalanceamountmemo: str = None,
        totalamount: str = None,
        totalamountfor: str = None,
        totaldiscountamount: str = None,
        totaldiscountamountfor: str = None,
        remark: str = None,
        attachments_url: List[AttachmentsUrl] = None,
        payfromtoentry: List[AccountPayAbleInfo] = None,
        instantpayfromtoentry: List[InstantPayFromInfo] = None,
    ):
        # 单据ID，新增时不传，修改时必传
        self.id = id
        # 单据编号
        self.billno = billno
        # 单据来源，新增时必须传值，移动端固定传入 "APP",其他来源可自定义,修改时可以不传
        self.bill_source = bill_source
        # 单据日期,格式：2019-01-01
        self.bill_date = bill_date
        # 单据状态，A：未审核，C：已审核
        self.billstatus = billstatus
        # 1：付款 2：退款
        self.biz_type = biz_type
        # 供应商 id
        self.itemclass_id = itemclass_id
        # 供应商名称
        self.itemclass_name = itemclass_name
        # 供应商编码
        self.itemclass_number = itemclass_number
        # 部门 id
        self.dept_id = dept_id
        # 部门名称
        self.dept_name = dept_name
        # 部门编码
        self.dept_number = dept_number
        # 业务员id
        self.emp_id = emp_id
        # 业务员 名称
        self.emp_name = emp_name
        # 业务员编码
        self.emp_number = emp_number
        # 应付款余额
        self.totalbalanceamountmemo = totalbalanceamountmemo
        # 本次应付总金额
        self.totalamount = totalamount
        # 本次应付总金额(本位币)
        self.totalamountfor = totalamountfor
        # 优惠金额
        self.totaldiscountamount = totaldiscountamount
        # 优惠金额(本位币)
        self.totaldiscountamountfor = totaldiscountamountfor
        # 单据备注
        self.remark = remark
        # 附件地址
        self.attachments_url = attachments_url
        # 应款信息分录
        self.payfromtoentry = payfromtoentry
        # 立即付款分录
        self.instantpayfromtoentry = instantpayfromtoentry

    def validate(self):
        if self.attachments_url:
            for k in self.attachments_url:
                if k:
                    k.validate()
        if self.payfromtoentry:
            for k in self.payfromtoentry:
                if k:
                    k.validate()
        if self.instantpayfromtoentry:
            for k in self.instantpayfromtoentry:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.billno is not None:
            result['billno'] = self.billno
        if self.bill_source is not None:
            result['billsource'] = self.bill_source
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.billstatus is not None:
            result['billdate'] = self.billstatus
        if self.biz_type is not None:
            result['biztype'] = self.biz_type
        if self.itemclass_id is not None:
            result['itemclass_id'] = self.itemclass_id
        if self.itemclass_name is not None:
            result['itemclass_name'] = self.itemclass_name
        if self.itemclass_number is not None:
            result['itemclass_number'] = self.itemclass_number
        if self.dept_id is not None:
            result['dept_id'] = self.dept_id
        if self.dept_name is not None:
            result['dept_name'] = self.dept_name
        if self.dept_number is not None:
            result['dept_number'] = self.dept_number
        if self.emp_id is not None:
            result['emp_id'] = self.emp_id
        if self.emp_name is not None:
            result['emp_name'] = self.emp_name
        if self.emp_number is not None:
            result['emp_number'] = self.emp_number
        if self.totalbalanceamountmemo is not None:
            result['totalbalanceamountmemo'] = self.totalbalanceamountmemo
        if self.totalamount is not None:
            result['totalamount'] = self.totalamount
        if self.totalamountfor is not None:
            result['totalamountfor'] = self.totalamountfor
        if self.totaldiscountamount is not None:
            result['totaldiscountamount'] = self.totaldiscountamount
        if self.totaldiscountamountfor is not None:
            result['totaldiscountamountfor'] = self.totaldiscountamountfor
        if self.remark is not None:
            result['remark'] = self.remark
        result['attachments_url'] = []
        if self.attachments_url is not None:
            for k in self.attachments_url:
                result['attachments_url'].append(k.to_map() if k else None)
        result['payfromtoentry'] = []
        if self.payfromtoentry is not None:
            for k in self.payfromtoentry:
                result['payfromtoentry'].append(k.to_map() if k else None)
        result['instantpayfromtoentry'] = []
        if self.instantpayfromtoentry is not None:
            for k in self.instantpayfromtoentry:
                result['instantpayfromtoentry'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billno') is not None:
            self.billno = m.get('billno')
        if m.get('billsource') is not None:
            self.bill_source = m.get('billsource')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('billdate') is not None:
            self.billstatus = m.get('billdate')
        if m.get('biztype') is not None:
            self.biz_type = m.get('biztype')
        if m.get('itemclass_id') is not None:
            self.itemclass_id = m.get('itemclass_id')
        if m.get('itemclass_name') is not None:
            self.itemclass_name = m.get('itemclass_name')
        if m.get('itemclass_number') is not None:
            self.itemclass_number = m.get('itemclass_number')
        if m.get('dept_id') is not None:
            self.dept_id = m.get('dept_id')
        if m.get('dept_name') is not None:
            self.dept_name = m.get('dept_name')
        if m.get('dept_number') is not None:
            self.dept_number = m.get('dept_number')
        if m.get('emp_id') is not None:
            self.emp_id = m.get('emp_id')
        if m.get('emp_name') is not None:
            self.emp_name = m.get('emp_name')
        if m.get('emp_number') is not None:
            self.emp_number = m.get('emp_number')
        if m.get('totalbalanceamountmemo') is not None:
            self.totalbalanceamountmemo = m.get('totalbalanceamountmemo')
        if m.get('totalamount') is not None:
            self.totalamount = m.get('totalamount')
        if m.get('totalamountfor') is not None:
            self.totalamountfor = m.get('totalamountfor')
        if m.get('totaldiscountamount') is not None:
            self.totaldiscountamount = m.get('totaldiscountamount')
        if m.get('totaldiscountamountfor') is not None:
            self.totaldiscountamountfor = m.get('totaldiscountamountfor')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        self.attachments_url = []
        if m.get('attachments_url') is not None:
            for k in m.get('attachments_url'):
                temp_model = AttachmentsUrl()
                self.attachments_url.append(temp_model.from_map(k))
        self.payfromtoentry = []
        if m.get('payfromtoentry') is not None:
            for k in m.get('payfromtoentry'):
                temp_model = AccountPayAbleInfo()
                self.payfromtoentry.append(temp_model.from_map(k))
        self.instantpayfromtoentry = []
        if m.get('instantpayfromtoentry') is not None:
            for k in m.get('instantpayfromtoentry'):
                temp_model = InstantPayFromInfo()
                self.instantpayfromtoentry.append(temp_model.from_map(k))
        return self


class OtherCreditRetSaveRequest(TeaModel):
    def __init__(
        self,
        body: OtherCreditRetDetail = None,
    ):
        self.body = body
        # 其他支出退款单新增&修改

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = OtherCreditRetDetail()
            self.body = temp_model.from_map(m['body'])
        return self


class OtherCreditRetDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: OtherCreditRetDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = OtherCreditRetDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class InitbaseRequestBody(TeaModel):
    def __init__(
        self,
        bill_type: str = None,
        search: str = None,
        start_bill_date: str = None,
        end_bill_date: str = None,
        bill_status: str = None,
        allow_zero: bool = None,
        un_page: int = None,
        page: int = None,
        page_size: int = None,
        currency: str = None,
        orderby: str = None,
        select_fields: str = None,
        total_fields: str = None,
        amount_settle_status: str = None,
        oth_amount_settle_status: str = None,
        pre_amount_settle_status: str = None,
    ):
        # 单据类型, 详见单据类型表格
        self.bill_type = bill_type
        # 模糊搜索，支持客户或供应商名称
        self.search = search
        # 单据日期-开始日期（“yyyy-MM-dd”）
        self.start_bill_date = start_bill_date
        # 单据日期-结束日期（“yyyy-MM-dd”）
        self.end_bill_date = end_bill_date
        # 单据状态（所有：“”，已审核：“C”，未审核：“A”）
        self.bill_status = bill_status
        # 是否允许过滤未核销金额=0的记录（默认：false 不过滤，true，过滤）
        self.allow_zero = allow_zero
        # 是否分页（默认0 分页,为1时不分页）
        self.un_page = un_page
        # 当前页（默认1）
        self.page = page
        # 每页显示条数，（默认10，最大值100）
        self.page_size = page_size
        # 单据币别ID，不传则以本位币为准
        self.currency = currency
        # 排序 (默认：billno desc按单据编号降序)
        self.orderby = orderby
        # 指定查询字段 (默认：只提供基本字段返回，特殊字段需指定查询，详见selectfields支持的字段)
        self.select_fields = select_fields
        # 合计字段
        self.total_fields = total_fields
        # 应收/应付 核销状态：已核销：“C”，部分核销：“B”，未核销：“A”
        self.amount_settle_status = amount_settle_status
        # 其他应收/其他应付 核销状态：已核销：“C”，部分核销：“B”，未核销：“A”
        self.oth_amount_settle_status = oth_amount_settle_status
        # 预收/预付 核销状态：已核销：“C”，部分核销：“B”，未核销：“A”
        self.pre_amount_settle_status = pre_amount_settle_status

    def validate(self):
        self.validate_required(self.select_fields, 'select_fields')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_type is not None:
            result['billtype'] = self.bill_type
        if self.search is not None:
            result['search'] = self.search
        if self.start_bill_date is not None:
            result['startbilldate'] = self.start_bill_date
        if self.end_bill_date is not None:
            result['endbilldate'] = self.end_bill_date
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.allow_zero is not None:
            result['allowzero'] = self.allow_zero
        if self.un_page is not None:
            result['unpage'] = self.un_page
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        if self.currency is not None:
            result['currencyid'] = self.currency
        if self.orderby is not None:
            result['orderby'] = self.orderby
        if self.select_fields is not None:
            result['selectfields'] = self.select_fields
        if self.total_fields is not None:
            result['totalfields'] = self.total_fields
        if self.amount_settle_status is not None:
            result['amountsettlestatus'] = self.amount_settle_status
        if self.oth_amount_settle_status is not None:
            result['othamountsettlestatus'] = self.oth_amount_settle_status
        if self.pre_amount_settle_status is not None:
            result['preamountsettlestatus'] = self.pre_amount_settle_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('billtype') is not None:
            self.bill_type = m.get('billtype')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('startbilldate') is not None:
            self.start_bill_date = m.get('startbilldate')
        if m.get('endbilldate') is not None:
            self.end_bill_date = m.get('endbilldate')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('allowzero') is not None:
            self.allow_zero = m.get('allowzero')
        if m.get('unpage') is not None:
            self.un_page = m.get('unpage')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        if m.get('currencyid') is not None:
            self.currency = m.get('currencyid')
        if m.get('orderby') is not None:
            self.orderby = m.get('orderby')
        if m.get('selectfields') is not None:
            self.select_fields = m.get('selectfields')
        if m.get('totalfields') is not None:
            self.total_fields = m.get('totalfields')
        if m.get('amountsettlestatus') is not None:
            self.amount_settle_status = m.get('amountsettlestatus')
        if m.get('othamountsettlestatus') is not None:
            self.oth_amount_settle_status = m.get('othamountsettlestatus')
        if m.get('preamountsettlestatus') is not None:
            self.pre_amount_settle_status = m.get('preamountsettlestatus')
        return self


class InitbaseRequest(TeaModel):
    def __init__(
        self,
        body: InitbaseRequestBody = None,
    ):
        self.body = body
        # 初始数据列表接口

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InitbaseRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CustomerIdRequestBody(TeaModel):
    def __init__(
        self,
        customer: str = None,
    ):
        # 客户ID
        self.customer = customer

    def validate(self):
        self.validate_required(self.customer, 'customer')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customer is not None:
            result['customerId'] = self.customer
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('customerId') is not None:
            self.customer = m.get('customerId')
        return self


class CustomerIdRequest(TeaModel):
    def __init__(
        self,
        body: CustomerIdRequestBody = None,
    ):
        self.body = body
        # 客户信用额度查询

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = CustomerIdRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ArOrderStatementRptRequestBody(TeaModel):
    def __init__(
        self,
        start_date: str = None,
        end_date: str = None,
        customer: str = None,
        page: int = None,
        page_size: int = None,
    ):
        # 开始日期
        self.start_date = start_date
        # 结束日期
        self.end_date = end_date
        # 客户id
        self.customer = customer
        # 当前页
        self.page = page
        # 每页显示条数，大于0，不传该字段表示不分页
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.customer is not None:
            result['customerid'] = self.customer
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('customerid') is not None:
            self.customer = m.get('customerid')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        return self


class ArOrderStatementRptRequest(TeaModel):
    def __init__(
        self,
        body: ArOrderStatementRptRequestBody = None,
    ):
        self.body = body
        # 查询客户应收账款明细表（订货专用）

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ArOrderStatementRptRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ArapBalanceRequestBody(TeaModel):
    def __init__(
        self,
        period: str = None,
    ):
        # 查询年度期间
        self.period = period

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.period is not None:
            result['period'] = self.period
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('period') is not None:
            self.period = m.get('period')
        return self


class ArapBalanceRequest(TeaModel):
    def __init__(
        self,
        body: ArapBalanceRequestBody = None,
    ):
        self.body = body
        # 查询指定期间的应收/付余额

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ArapBalanceRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ArApSummaryReportRequestBody(TeaModel):
    def __init__(
        self,
        search: str = None,
        start_date: str = None,
        end_date: str = None,
        item_category: str = None,
        item_ids: List[str] = None,
        emp_ids: List[str] = None,
        dept_ids: List[str] = None,
        currency_ids: List[str] = None,
        item: str = None,
        emp: str = None,
        dept: str = None,
        group: str = None,
        include_uncheck: bool = None,
        notview_zero: bool = None,
        notviewno_happen: bool = None,
        include_oth: bool = None,
        api_orderby: str = None,
        is_foreigncur: bool = None,
        class_order: str = None,
        page: int = None,
        pre_amount: str = None,
        amount: str = None,
        scm_amount: str = None,
    ):
        # 模糊搜索，支持供应商名称，联系人，联系方式，预留字段
        self.search = search
        # 开始日期（“yyyy-MM-dd”）
        self.start_date = start_date
        # 结束日期（“yyyy-MM-dd”）
        self.end_date = end_date
        # 供应商类别id，格式：[xxx,xxx,...]，可扩展支持多选，此字段为预留字段
        self.item_category = item_category
        # 客户/供应商id，格式：[xxx,xxx,...]，可扩展支持多选
        self.item_ids = item_ids
        # 业务员id，格式：[xxx,xxx,...]，可扩展支持多选
        self.emp_ids = emp_ids
        # 部门id，格式：[xxx,xxx,...]，可扩展支持多选
        self.dept_ids = dept_ids
        # 币别id，格式：[xxx,xxx,...]，此字段为预留字段
        self.currency_ids = currency_ids
        # 客户/供应商，此为按供应商维度汇总方式汇总 （与其他汇总方式多选一）
        self.item = item
        # 业务员，此为按业务员维度汇总方式汇总（与其他汇总方式多选一）
        self.emp = emp
        # 部门，此为按部门维度汇总方式汇总 （与其他汇总方式多选一）
        self.dept = dept
        # 客户/供应商分类，此为按供应商分类维度汇总方式汇总，此为字段为预留字段 （与其他汇总方式多选一）
        self.group = group
        # 包括未审核
        self.include_uncheck = include_uncheck
        # 余额为0不显示
        self.notview_zero = notview_zero
        # 无发生额不显示
        self.notviewno_happen = notviewno_happen
        # 包括其他应收，默认为true
        self.include_oth = include_oth
        # 排序字段，1-金额降序  2-金额升序
        self.api_orderby = api_orderby
        # 是否启用了外币，预留字段，没有传值或者设置时默认为false
        self.is_foreigncur = is_foreigncur
        # 选择按分类汇总时候的类别级次，预留字段，默认为1，前面暂时没有这个的请求参数
        self.class_order = class_order
        # 分页信息，当前页（默认1）
        self.page = page
        # 按预付金额大小排序
        self.pre_amount = pre_amount
        # 按总金额大小排序
        self.amount = amount
        # 按应收付金额大小排序
        self.scm_amount = scm_amount

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.search is not None:
            result['search'] = self.search
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.item_category is not None:
            result['itemcategory'] = self.item_category
        if self.item_ids is not None:
            result['itemids'] = self.item_ids
        if self.emp_ids is not None:
            result['empids'] = self.emp_ids
        if self.dept_ids is not None:
            result['deptids'] = self.dept_ids
        if self.currency_ids is not None:
            result['currencyids'] = self.currency_ids
        if self.item is not None:
            result['item'] = self.item
        if self.emp is not None:
            result['emp'] = self.emp
        if self.dept is not None:
            result['dept'] = self.dept
        if self.group is not None:
            result['group'] = self.group
        if self.include_uncheck is not None:
            result['includeuncheck'] = self.include_uncheck
        if self.notview_zero is not None:
            result['notviewzero'] = self.notview_zero
        if self.notviewno_happen is not None:
            result['notviewnohappen'] = self.notviewno_happen
        if self.include_oth is not None:
            result['includeoth'] = self.include_oth
        if self.api_orderby is not None:
            result['apiorderby'] = self.api_orderby
        if self.is_foreigncur is not None:
            result['isforeigncur'] = self.is_foreigncur
        if self.class_order is not None:
            result['classorder'] = self.class_order
        if self.page is not None:
            result['page'] = self.page
        if self.pre_amount is not None:
            result['preamount'] = self.pre_amount
        if self.amount is not None:
            result['amount'] = self.amount
        if self.scm_amount is not None:
            result['scmamount'] = self.scm_amount
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('itemcategory') is not None:
            self.item_category = m.get('itemcategory')
        if m.get('itemids') is not None:
            self.item_ids = m.get('itemids')
        if m.get('empids') is not None:
            self.emp_ids = m.get('empids')
        if m.get('deptids') is not None:
            self.dept_ids = m.get('deptids')
        if m.get('currencyids') is not None:
            self.currency_ids = m.get('currencyids')
        if m.get('item') is not None:
            self.item = m.get('item')
        if m.get('emp') is not None:
            self.emp = m.get('emp')
        if m.get('dept') is not None:
            self.dept = m.get('dept')
        if m.get('group') is not None:
            self.group = m.get('group')
        if m.get('includeuncheck') is not None:
            self.include_uncheck = m.get('includeuncheck')
        if m.get('notviewzero') is not None:
            self.notview_zero = m.get('notviewzero')
        if m.get('notviewnohappen') is not None:
            self.notviewno_happen = m.get('notviewnohappen')
        if m.get('includeoth') is not None:
            self.include_oth = m.get('includeoth')
        if m.get('apiorderby') is not None:
            self.api_orderby = m.get('apiorderby')
        if m.get('isforeigncur') is not None:
            self.is_foreigncur = m.get('isforeigncur')
        if m.get('classorder') is not None:
            self.class_order = m.get('classorder')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('preamount') is not None:
            self.pre_amount = m.get('preamount')
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('scmamount') is not None:
            self.scm_amount = m.get('scmamount')
        return self


class ArApSummaryReportRequest(TeaModel):
    def __init__(
        self,
        body: ArApSummaryReportRequestBody = None,
    ):
        self.body = body
        # 查询应收汇总表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ArApSummaryReportRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ArApOperateRequestBody(TeaModel):
    def __init__(
        self,
        ids: List[str] = None,
        bill_type: str = None,
        operate_type: str = None,
    ):
        # 单据ID
        self.ids = ids
        # 单据类型标识
        self.bill_type = bill_type
        # 操作类型，传固定值
        self.operate_type = operate_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids is not None:
            result['ids'] = self.ids
        if self.bill_type is not None:
            result['billtype'] = self.bill_type
        if self.operate_type is not None:
            result['operatetype'] = self.operate_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        if m.get('billtype') is not None:
            self.bill_type = m.get('billtype')
        if m.get('operatetype') is not None:
            self.operate_type = m.get('operatetype')
        return self


class ArApOperateRequest(TeaModel):
    def __init__(
        self,
        body: ArApOperateRequestBody = None,
    ):
        self.body = body
        # 应收应付的单据操作

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ArApOperateRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self

class MaterialEntry(TeaModel):
    def __init__(
        self,
        id: str = None,
        material: str = None,
        stock: str = None,
        sp_id: str = None,
        qty: str = None,
        unit: str = None,
        aux_prop: str = None,
        bar_code: str = None,
        batch_no: str = None,
        product_place: str = None,
        product_register_no: str = None,
        product_license: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_type: str = None,
        kf_period: str = None,
        sn_list_id: str = None,
        sn_list: str = None,
        price: str = None,
        tax_price: str = None,
        cess: str = None,
        tax_amount: str = None,
        all_amount: str = None,
        dis_rate: str = None,
        discount: str = None,
        dis_amount: str = None,
        dis_price: str = None,
        amount: str = None,
        all_amount_before_discount: str = None,
        actual_tax_price: str = None,
        distribution_discount_for_bill: str = None,
        actual_no_tax_amount: str = None,
        fee: str = None,
        allocate_discount_amount: str = None,
        is_free: str = None,
        current_settle_amount: str = None,
        all_amount_for: str = None,
        cost: str = None,
        unit_cost: str = None,
        comment: str = None,
        src_bill_no: str = None,
        src_bill_type: str = None,
        src_inter_id: str = None,
        src_bill_date: str = None,
        src_seq: str = None,
        src_entryid: str = None,
    ):
        self.id = id
        # 商品
        self.material = material
        # 仓库
        self.stock = stock
        # 仓位，启用了仓位管理则必填
        self.sp_id = sp_id
        # 数量
        self.qty = qty
        # 单位
        self.unit = unit
        # 辅助属性；辅助属性商品必填
        self.aux_prop = aux_prop
        # 条形码
        self.bar_code = bar_code
        # 批次号 (批次商品必填)
        self.batch_no = batch_no
        # 产地
        self.product_place = product_place
        # 注册证号
        self.product_register_no = product_register_no
        # 生产许可证号
        self.product_license = product_license
        # 生产日期
        self.kf_date = kf_date
        # 有效日期
        self.valid_date = valid_date
        # 保质期类型，1：天，2：月，3：年
        self.kf_type = kf_type
        # 保质期天数
        self.kf_period = kf_period
        # 序列号流转id；单据新增后会在单据详情中带回这个字段信息，序列号商品修改时必填
        self.sn_list_id = sn_list_id
        # 序列号 格式：001:备注1;002:备注2 （序列号:序列号备注 多个序列号以英文分号字符;分隔）,序列号商品必填
        self.sn_list = sn_list
        # 单价
        self.price = price
        self.tax_price = tax_price
        # 商品增值税税率；不传后端自取，传入则以传入为准
        self.cess = cess
        # 商品税额
        self.tax_amount = tax_amount
        # 价税合计
        self.all_amount = all_amount
        # 折扣率
        self.dis_rate = dis_rate
        # 折扣（折）
        self.discount = discount
        # 折扣额
        self.dis_amount = dis_amount
        # 折扣单价
        self.dis_price = dis_price
        # 折后金额
        self.amount = amount
        # 整单折前价税合计
        self.all_amount_before_discount = all_amount_before_discount
        # 实际含税单价
        self.actual_tax_price = actual_tax_price
        # 整单折扣分配额
        self.distribution_discount_for_bill = distribution_discount_for_bill
        # 实际不含税金额
        self.actual_no_tax_amount = actual_no_tax_amount
        # 采购费用分摊
        self.fee = fee
        # 优惠分摊金额
        self.allocate_discount_amount = allocate_discount_amount
        # 是否赠品
        self.is_free = is_free
        # 本次核销金额
        self.current_settle_amount = current_settle_amount
        # 价税合计本位币
        self.all_amount_for = all_amount_for
        # 入库成本
        self.cost = cost
        # 入库单位成本
        self.unit_cost = unit_cost
        # 商品行备注
        self.comment = comment
        # 源单编码
        self.src_bill_no = src_bill_no
        # 源单类型
        self.src_bill_type = src_bill_type
        # 源单内码
        self.src_inter_id = src_inter_id
        # 源单日期
        self.src_bill_date = src_bill_date
        # 源单行号
        self.src_seq = src_seq
        # 源单分录内码
        self.src_entryid = src_entryid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.material is not None:
            result['materialid_id'] = self.material
        if self.stock is not None:
            result['stockid_id'] = self.stock
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.qty is not None:
            result['qty'] = self.qty
        if self.unit is not None:
            result['unit_id'] = self.unit
        if self.aux_prop is not None:
            result['auxpropid_id'] = self.aux_prop
        if self.bar_code is not None:
            result['barcode'] = self.bar_code
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.product_place is not None:
            result['proplace'] = self.product_place
        if self.product_register_no is not None:
            result['proregno'] = self.product_register_no
        if self.product_license is not None:
            result['prolicense'] = self.product_license
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.sn_list is not None:
            result['sn_list'] = self.sn_list
        if self.price is not None:
            result['price'] = self.price
        if self.tax_price is not None:
            result['taxprice'] = self.tax_price
        if self.cess is not None:
            result['cess'] = self.cess
        if self.tax_amount is not None:
            result['taxamount'] = self.tax_amount
        if self.all_amount is not None:
            result['allamount'] = self.all_amount
        if self.dis_rate is not None:
            result['disrate'] = self.dis_rate
        if self.discount is not None:
            result['discount'] = self.discount
        if self.dis_amount is not None:
            result['disamount'] = self.dis_amount
        if self.dis_price is not None:
            result['disprice'] = self.dis_price
        if self.amount is not None:
            result['amount'] = self.amount
        if self.all_amount_before_discount is not None:
            result['billdisbeforeamount'] = self.all_amount_before_discount
        if self.actual_tax_price is not None:
            result['acttaxprice'] = self.actual_tax_price
        if self.distribution_discount_for_bill is not None:
            result['billdisdistribution'] = self.distribution_discount_for_bill
        if self.actual_no_tax_amount is not None:
            result['actnontaxamount'] = self.actual_no_tax_amount
        if self.fee is not None:
            result['fee'] = self.fee
        if self.allocate_discount_amount is not None:
            result['dividediffamount'] = self.allocate_discount_amount
        if self.is_free is not None:
            result['is_free'] = self.is_free
        if self.current_settle_amount is not None:
            result['cursettleamount'] = self.current_settle_amount
        if self.all_amount_for is not None:
            result['allamountfor'] = self.all_amount_for
        if self.cost is not None:
            result['cost'] = self.cost
        if self.unit_cost is not None:
            result['unitcost'] = self.unit_cost
        if self.comment is not None:
            result['comment'] = self.comment
        if self.src_bill_no is not None:
            result['srcbillno'] = self.src_bill_no
        if self.src_bill_type is not None:
            result['srcbilltypeid_id'] = self.src_bill_type
        if self.src_inter_id is not None:
            result['srcinterid'] = self.src_inter_id
        if self.src_bill_date is not None:
            result['src_billdate'] = self.src_bill_date
        if self.src_seq is not None:
            result['srcseq'] = self.src_seq
        if self.src_entryid is not None:
            result['srcentryid'] = self.src_entryid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('materialid_id') is not None:
            self.material = m.get('materialid_id')
        if m.get('stockid_id') is not None:
            self.stock = m.get('stockid_id')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('unit_id') is not None:
            self.unit = m.get('unit_id')
        if m.get('auxpropid_id') is not None:
            self.aux_prop = m.get('auxpropid_id')
        if m.get('barcode') is not None:
            self.bar_code = m.get('barcode')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.product_place = m.get('proplace')
        if m.get('proregno') is not None:
            self.product_register_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.product_license = m.get('prolicense')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('sn_list') is not None:
            self.sn_list = m.get('sn_list')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('taxprice') is not None:
            self.tax_price = m.get('taxprice')
        if m.get('cess') is not None:
            self.cess = m.get('cess')
        if m.get('taxamount') is not None:
            self.tax_amount = m.get('taxamount')
        if m.get('allamount') is not None:
            self.all_amount = m.get('allamount')
        if m.get('disrate') is not None:
            self.dis_rate = m.get('disrate')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('disamount') is not None:
            self.dis_amount = m.get('disamount')
        if m.get('disprice') is not None:
            self.dis_price = m.get('disprice')
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('billdisbeforeamount') is not None:
            self.all_amount_before_discount = m.get('billdisbeforeamount')
        if m.get('acttaxprice') is not None:
            self.actual_tax_price = m.get('acttaxprice')
        if m.get('billdisdistribution') is not None:
            self.distribution_discount_for_bill = m.get('billdisdistribution')
        if m.get('actnontaxamount') is not None:
            self.actual_no_tax_amount = m.get('actnontaxamount')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        if m.get('dividediffamount') is not None:
            self.allocate_discount_amount = m.get('dividediffamount')
        if m.get('is_free') is not None:
            self.is_free = m.get('is_free')
        if m.get('cursettleamount') is not None:
            self.current_settle_amount = m.get('cursettleamount')
        if m.get('allamountfor') is not None:
            self.all_amount_for = m.get('allamountfor')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('unitcost') is not None:
            self.unit_cost = m.get('unitcost')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('srcbillno') is not None:
            self.src_bill_no = m.get('srcbillno')
        if m.get('srcbilltypeid_id') is not None:
            self.src_bill_type = m.get('srcbilltypeid_id')
        if m.get('srcinterid') is not None:
            self.src_inter_id = m.get('srcinterid')
        if m.get('src_billdate') is not None:
            self.src_bill_date = m.get('src_billdate')
        if m.get('srcseq') is not None:
            self.src_seq = m.get('srcseq')
        if m.get('srcentryid') is not None:
            self.src_entryid = m.get('srcentryid')
        return self

class ArReportRequestBody(TeaModel):
    def __init__(
        self,
        search: str = None,
        start_date: str = None,
        end_date: str = None,
        emp_ids: List[str] = None,
        dept_ids: List[str] = None,
        currency_ids: List[str] = None,
        include_uncheck: bool = None,
        notview_zero: bool = None,
        notviewno_happen: bool = None,
        include_oth: bool = None,
        order_by: int = None,
        page: int = None,
        page_size: int = None,
    ):
        # 模糊搜索，支持供应商名称，联系人，联系方式，预留字段
        self.search = search
        # 开始日期（“yyyy-MM-dd”）
        self.start_date = start_date
        # 结束日期（“yyyy-MM-dd”）
        self.end_date = end_date
        # 业务员id，格式：[xxx,xxx,...]，可扩展支持多选
        self.emp_ids = emp_ids
        # 部门id，格式：[xxx,xxx,...]，可扩展支持多选
        self.dept_ids = dept_ids
        # 币别id，格式：[xxx,xxx,...]，此字段为预留字段
        self.currency_ids = currency_ids
        # 包括未审核
        self.include_uncheck = include_uncheck
        # 余额为0不显示
        self.notview_zero = notview_zero
        # 无发生额不显示
        self.notviewno_happen = notviewno_happen
        # 包括其他应收，默认为true
        self.include_oth = include_oth
        # 排序字段，1-金额降序  2-金额升序
        self.order_by = order_by
        # 分页信息，当前页（默认1）
        self.page = page
        # 每页显示条数
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.search is not None:
            result['search'] = self.search
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.emp_ids is not None:
            result['empids'] = self.emp_ids
        if self.dept_ids is not None:
            result['deptids'] = self.dept_ids
        if self.currency_ids is not None:
            result['currencyids'] = self.currency_ids
        if self.include_uncheck is not None:
            result['includeuncheck'] = self.include_uncheck
        if self.notview_zero is not None:
            result['notviewzero'] = self.notview_zero
        if self.notviewno_happen is not None:
            result['notviewnohappen'] = self.notviewno_happen
        if self.include_oth is not None:
            result['includeoth'] = self.include_oth
        if self.order_by is not None:
            result['orderby'] = self.order_by
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('empids') is not None:
            self.emp_ids = m.get('empids')
        if m.get('deptids') is not None:
            self.dept_ids = m.get('deptids')
        if m.get('currencyids') is not None:
            self.currency_ids = m.get('currencyids')
        if m.get('includeuncheck') is not None:
            self.include_uncheck = m.get('includeuncheck')
        if m.get('notviewzero') is not None:
            self.notview_zero = m.get('notviewzero')
        if m.get('notviewnohappen') is not None:
            self.notviewno_happen = m.get('notviewnohappen')
        if m.get('includeoth') is not None:
            self.include_oth = m.get('includeoth')
        if m.get('orderby') is not None:
            self.order_by = m.get('orderby')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        return self


class ArReportRequest(TeaModel):
    def __init__(
        self,
        body: ArReportRequestBody = None,
    ):
        self.body = body
        # 收款单列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ArReportRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ArCreditListRequestBody(TeaModel):
    def __init__(
        self,
        search: str = None,
        start_date: str = None,
        end_date: str = None,
        begin_date: str = None,
        expire_date: str = None,
        start_time: int = None,
        end_time: int = None,
        begin_time: int = None,
        expire_time: int = None,
        start_bill_date: str = None,
        end_bill_date: str = None,
        bill_status: str = None,
        bill_source: str = None,
        item_group: str = None,
        item_class: str = None,
        emp: str = None,
        dept: str = None,
        src_inter_id: str = None,
        page: int = None,
        page_size: int = None,
    ):
        self.search = search
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.start_date = start_date
        # 结束日期（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.end_date = end_date
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），修改日期
        self.begin_date = begin_date
        # 结束日期（格式：“yyyy-MM-dd”，为空表示不过滤），修改日期
        self.expire_date = expire_date
        # 开始时间（格式：“时间戳”，-1表示不过滤），创建时间
        self.start_time = start_time
        # 结束时间（格式：“时间戳”，-1表示不过滤），创建时间
        self.end_time = end_time
        # 开始时间（格式：“时间戳”，-1表示不过滤），修改时间
        self.begin_time = begin_time
        # 结束时间（格式：“时间戳”，-1表示不过滤），修改时间
        self.expire_time = expire_time
        # 单据日期-开始日期（“yyyy-MM-dd”）
        self.start_bill_date = start_bill_date
        # 单据日期-结束日期（“yyyy-MM-dd”）
        self.end_bill_date = end_bill_date
        # 单据状态（所有：“”，已审核：“C”，未审核：“A”）
        self.bill_status = bill_status
        # 单据来源 (手机："app", 电脑:“PC”, 所有:"")
        self.bill_source = bill_source
        # 供应商分类id， 单选
        self.item_group = item_group
        # 供应商id， 单选
        self.item_class = item_class
        # 业务员id, 单选
        self.emp = emp
        # 部门id， 单选
        self.dept = dept
        # 源单id
        self.src_inter_id = src_inter_id
        # 当前页（默认1）
        self.page = page
        # 每页显示条数，（默认10，最大值100）
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.search is not None:
            result['search'] = self.search
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.begin_date is not None:
            result['begindate'] = self.begin_date
        if self.expire_date is not None:
            result['expiredate'] = self.expire_date
        if self.start_time is not None:
            result['starttime'] = self.start_time
        if self.end_time is not None:
            result['endtime'] = self.end_time
        if self.begin_time is not None:
            result['begintime'] = self.begin_time
        if self.expire_time is not None:
            result['expiretime'] = self.expire_time
        if self.start_bill_date is not None:
            result['startbilldate'] = self.start_bill_date
        if self.end_bill_date is not None:
            result['endbilldate'] = self.end_bill_date
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.bill_source is not None:
            result['billsource'] = self.bill_source
        if self.item_group is not None:
            result['itemgroup_id'] = self.item_group
        if self.item_class is not None:
            result['itemclass_id'] = self.item_class
        if self.emp is not None:
            result['emp_id'] = self.emp
        if self.dept is not None:
            result['dept_id'] = self.dept
        if self.src_inter_id is not None:
            result['selbillinfoentry_srcinterid'] = self.src_inter_id
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('begindate') is not None:
            self.begin_date = m.get('begindate')
        if m.get('expiredate') is not None:
            self.expire_date = m.get('expiredate')
        if m.get('starttime') is not None:
            self.start_time = m.get('starttime')
        if m.get('endtime') is not None:
            self.end_time = m.get('endtime')
        if m.get('begintime') is not None:
            self.begin_time = m.get('begintime')
        if m.get('expiretime') is not None:
            self.expire_time = m.get('expiretime')
        if m.get('startbilldate') is not None:
            self.start_bill_date = m.get('startbilldate')
        if m.get('endbilldate') is not None:
            self.end_bill_date = m.get('endbilldate')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('billsource') is not None:
            self.bill_source = m.get('billsource')
        if m.get('itemgroup_id') is not None:
            self.item_group = m.get('itemgroup_id')
        if m.get('itemclass_id') is not None:
            self.item_class = m.get('itemclass_id')
        if m.get('emp_id') is not None:
            self.emp = m.get('emp_id')
        if m.get('dept_id') is not None:
            self.dept = m.get('dept_id')
        if m.get('selbillinfoentry_srcinterid') is not None:
            self.src_inter_id = m.get('selbillinfoentry_srcinterid')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        return self


class ArCreditListRequest(TeaModel):
    def __init__(
        self,
        body: ArCreditListRequestBody = None,
    ):
        self.body = body
        # 收款单新增或修改Request

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ArCreditListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ArCreditDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        billno: str = None,
        bill_source: str = None,
        bill_date: str = None,
        billstatus: str = None,
        itemclass_id: str = None,
        itemclass_name: str = None,
        itemclass_number: str = None,
        dept_id: str = None,
        dept_name: str = None,
        dept_number: str = None,
        emp_id: str = None,
        emp_name: str = None,
        emp_number: str = None,
        curtotalinstantamount: str = None,
        curtotalinstantamountfor: str = None,
        totalamount: str = None,
        totalamountfor: str = None,
        totaldiscountamount: str = None,
        totaldiscountamountfor: str = None,
        remark: str = None,
        attachments_url: List[AttachmentsUrl] = None,
        payfromtoentry: List[PayFromEntry] = None,
        selbillinfoentry: List[SelBillEntry] = None,
        currency_id: str = None,
        currency_name: str = None,
        currency_number: str = None,
        currencyfor_id: str = None,
        currencyfor_name: str = None,
        currencyfor_number: str = None,
    ):
        # 单据ID，新增时不传，修改时必传
        self.id = id
        # 单据编号
        self.billno = billno
        # 单据来源，新增时必须传值，移动端固定传入 "APP",其他来源可自定义,修改时可以不传
        self.bill_source = bill_source
        # 单据日期,格式：2019-01-01
        self.bill_date = bill_date
        # 单据状态，A：未审核，C：已审核
        self.billstatus = billstatus
        # 供应商 id
        self.itemclass_id = itemclass_id
        # 供应商名称
        self.itemclass_name = itemclass_name
        # 供应商编码
        self.itemclass_number = itemclass_number
        # 部门 id
        self.dept_id = dept_id
        # 部门名称
        self.dept_name = dept_name
        # 部门编码
        self.dept_number = dept_number
        # 业务员id
        self.emp_id = emp_id
        # 业务员 名称
        self.emp_name = emp_name
        # 业务员编码
        self.emp_number = emp_number
        # 本次收款总金额
        self.curtotalinstantamount = curtotalinstantamount
        # 本次收款总金额(本位币)
        self.curtotalinstantamountfor = curtotalinstantamountfor
        # 本次应付总金额
        self.totalamount = totalamount
        # 本次应付总金额(本位币)
        self.totalamountfor = totalamountfor
        # 优惠金额
        self.totaldiscountamount = totaldiscountamount
        # 优惠金额(本位币)
        self.totaldiscountamountfor = totaldiscountamountfor
        # 单据备注
        self.remark = remark
        # 附件地址
        self.attachments_url = attachments_url
        # 收款信息分录
        self.payfromtoentry = payfromtoentry
        # 源单信息分录
        self.selbillinfoentry = selbillinfoentry
        # 币别id
        self.currency_id = currency_id
        # 币别名称
        self.currency_name = currency_name
        # 币别编码
        self.currency_number = currency_number
        # 本币为id
        self.currencyfor_id = currencyfor_id
        # 本币为名称
        self.currencyfor_name = currencyfor_name
        # 本币为编码
        self.currencyfor_number = currencyfor_number

    def validate(self):
        if self.attachments_url:
            for k in self.attachments_url:
                if k:
                    k.validate()
        if self.payfromtoentry:
            for k in self.payfromtoentry:
                if k:
                    k.validate()
        if self.selbillinfoentry:
            for k in self.selbillinfoentry:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.billno is not None:
            result['billno'] = self.billno
        if self.bill_source is not None:
            result['billsource'] = self.bill_source
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.billstatus is not None:
            result['billdate'] = self.billstatus
        if self.itemclass_id is not None:
            result['itemclass_id'] = self.itemclass_id
        if self.itemclass_name is not None:
            result['itemclass_name'] = self.itemclass_name
        if self.itemclass_number is not None:
            result['itemclass_number'] = self.itemclass_number
        if self.dept_id is not None:
            result['dept_id'] = self.dept_id
        if self.dept_name is not None:
            result['dept_name'] = self.dept_name
        if self.dept_number is not None:
            result['dept_number'] = self.dept_number
        if self.emp_id is not None:
            result['emp_id'] = self.emp_id
        if self.emp_name is not None:
            result['emp_name'] = self.emp_name
        if self.emp_number is not None:
            result['emp_number'] = self.emp_number
        if self.curtotalinstantamount is not None:
            result['curtotalinstantamount'] = self.curtotalinstantamount
        if self.curtotalinstantamountfor is not None:
            result['curtotalinstantamountfor'] = self.curtotalinstantamountfor
        if self.totalamount is not None:
            result['totalamount'] = self.totalamount
        if self.totalamountfor is not None:
            result['totalamountfor'] = self.totalamountfor
        if self.totaldiscountamount is not None:
            result['totaldiscountamount'] = self.totaldiscountamount
        if self.totaldiscountamountfor is not None:
            result['totaldiscountamountfor'] = self.totaldiscountamountfor
        if self.remark is not None:
            result['remark'] = self.remark
        result['attachments_url'] = []
        if self.attachments_url is not None:
            for k in self.attachments_url:
                result['attachments_url'].append(k.to_map() if k else None)
        result['payfromtoentry'] = []
        if self.payfromtoentry is not None:
            for k in self.payfromtoentry:
                result['payfromtoentry'].append(k.to_map() if k else None)
        result['selbillinfoentry'] = []
        if self.selbillinfoentry is not None:
            for k in self.selbillinfoentry:
                result['selbillinfoentry'].append(k.to_map() if k else None)
        if self.currency_id is not None:
            result['currency_id'] = self.currency_id
        if self.currency_name is not None:
            result['currency_name'] = self.currency_name
        if self.currency_number is not None:
            result['currency_number'] = self.currency_number
        if self.currencyfor_id is not None:
            result['currencyfor_id'] = self.currencyfor_id
        if self.currencyfor_name is not None:
            result['currencyfor_name'] = self.currencyfor_name
        if self.currencyfor_number is not None:
            result['currencyfor_number'] = self.currencyfor_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billno') is not None:
            self.billno = m.get('billno')
        if m.get('billsource') is not None:
            self.bill_source = m.get('billsource')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('billdate') is not None:
            self.billstatus = m.get('billdate')
        if m.get('itemclass_id') is not None:
            self.itemclass_id = m.get('itemclass_id')
        if m.get('itemclass_name') is not None:
            self.itemclass_name = m.get('itemclass_name')
        if m.get('itemclass_number') is not None:
            self.itemclass_number = m.get('itemclass_number')
        if m.get('dept_id') is not None:
            self.dept_id = m.get('dept_id')
        if m.get('dept_name') is not None:
            self.dept_name = m.get('dept_name')
        if m.get('dept_number') is not None:
            self.dept_number = m.get('dept_number')
        if m.get('emp_id') is not None:
            self.emp_id = m.get('emp_id')
        if m.get('emp_name') is not None:
            self.emp_name = m.get('emp_name')
        if m.get('emp_number') is not None:
            self.emp_number = m.get('emp_number')
        if m.get('curtotalinstantamount') is not None:
            self.curtotalinstantamount = m.get('curtotalinstantamount')
        if m.get('curtotalinstantamountfor') is not None:
            self.curtotalinstantamountfor = m.get('curtotalinstantamountfor')
        if m.get('totalamount') is not None:
            self.totalamount = m.get('totalamount')
        if m.get('totalamountfor') is not None:
            self.totalamountfor = m.get('totalamountfor')
        if m.get('totaldiscountamount') is not None:
            self.totaldiscountamount = m.get('totaldiscountamount')
        if m.get('totaldiscountamountfor') is not None:
            self.totaldiscountamountfor = m.get('totaldiscountamountfor')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        self.attachments_url = []
        if m.get('attachments_url') is not None:
            for k in m.get('attachments_url'):
                temp_model = AttachmentsUrl()
                self.attachments_url.append(temp_model.from_map(k))
        self.payfromtoentry = []
        if m.get('payfromtoentry') is not None:
            for k in m.get('payfromtoentry'):
                temp_model = PayFromEntry()
                self.payfromtoentry.append(temp_model.from_map(k))
        self.selbillinfoentry = []
        if m.get('selbillinfoentry') is not None:
            for k in m.get('selbillinfoentry'):
                temp_model = SelBillEntry()
                self.selbillinfoentry.append(temp_model.from_map(k))
        if m.get('currency_id') is not None:
            self.currency_id = m.get('currency_id')
        if m.get('currency_name') is not None:
            self.currency_name = m.get('currency_name')
        if m.get('currency_number') is not None:
            self.currency_number = m.get('currency_number')
        if m.get('currencyfor_id') is not None:
            self.currencyfor_id = m.get('currencyfor_id')
        if m.get('currencyfor_name') is not None:
            self.currencyfor_name = m.get('currencyfor_name')
        if m.get('currencyfor_number') is not None:
            self.currencyfor_number = m.get('currencyfor_number')
        return self


class SaveArCreditRequest(TeaModel):
    def __init__(
        self,
        body: ArCreditDetail = None,
    ):
        self.body = body
        # 收款单新增或修改一张收款单

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ArCreditDetail()
            self.body = temp_model.from_map(m['body'])
        return self


class ArCreditDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: ArCreditDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code
        # 收款单详情

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = ArCreditDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class InitBaseListRequestBody(TeaModel):
    def __init__(
        self,
        search: str = None,
        start_bill_date: str = None,
        end_bill_date: str = None,
        bill_status: str = None,
        allow_zero: str = None,
        un_page: int = None,
        page: int = None,
        page_size: int = None,
        currency: str = None,
        item_group_id: str = None,
        item_class_id: str = None,
        orderby: str = None,
        select_fields: str = None,
        total_fields: str = None,
        amount_settle_status: str = None,
    ):
        self.search = search
        # 单据日期-开始日期（“yyyy-MM-dd”）
        self.start_bill_date = start_bill_date
        # 单据日期-结束日期（“yyyy-MM-dd”）
        self.end_bill_date = end_bill_date
        # 单据状态（所有：“”，已审核：“C”，未审核：“A”）
        self.bill_status = bill_status
        # 是否允许过滤未核销金额=0的记录（默认：false 不过滤，true，过滤）
        self.allow_zero = allow_zero
        # 是否分页（默认0 分页,为1时不分页）
        self.un_page = un_page
        # 当前页（默认1）
        self.page = page
        # 每页显示条数，（默认10，最大值100）
        self.page_size = page_size
        # 单据币别ID，不传则以本位币为准
        self.currency = currency
        # 供应商分类id， 单选
        self.item_group_id = item_group_id
        # 供应商id， 单选
        self.item_class_id = item_class_id
        # 排序 (默认：billno desc按单据编号降序)
        self.orderby = orderby
        # 指定查询字段 (默认：只提供基本字段返回，特殊字段需指定查询，详见selectfields支持的字段)
        self.select_fields = select_fields
        # 合计字段
        self.total_fields = total_fields
        # 其他应收/其他应付 核销状态：已核销：“C”，部分核销：“B”，未核销：“A”
        self.amount_settle_status = amount_settle_status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.search is not None:
            result['search'] = self.search
        if self.start_bill_date is not None:
            result['startbilldate'] = self.start_bill_date
        if self.end_bill_date is not None:
            result['endbilldate'] = self.end_bill_date
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.allow_zero is not None:
            result['allowzero'] = self.allow_zero
        if self.un_page is not None:
            result['unpage'] = self.un_page
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        if self.currency is not None:
            result['currencyid'] = self.currency
        if self.item_group_id is not None:
            result['itemgroup_id'] = self.item_group_id
        if self.item_class_id is not None:
            result['itemclass_id'] = self.item_class_id
        if self.orderby is not None:
            result['orderby'] = self.orderby
        if self.select_fields is not None:
            result['selectfields'] = self.select_fields
        if self.total_fields is not None:
            result['totalfields'] = self.total_fields
        if self.amount_settle_status is not None:
            result['amountsettlestatus'] = self.amount_settle_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('startbilldate') is not None:
            self.start_bill_date = m.get('startbilldate')
        if m.get('endbilldate') is not None:
            self.end_bill_date = m.get('endbilldate')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('allowzero') is not None:
            self.allow_zero = m.get('allowzero')
        if m.get('unpage') is not None:
            self.un_page = m.get('unpage')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        if m.get('currencyid') is not None:
            self.currency = m.get('currencyid')
        if m.get('itemgroup_id') is not None:
            self.item_group_id = m.get('itemgroup_id')
        if m.get('itemclass_id') is not None:
            self.item_class_id = m.get('itemclass_id')
        if m.get('orderby') is not None:
            self.orderby = m.get('orderby')
        if m.get('selectfields') is not None:
            self.select_fields = m.get('selectfields')
        if m.get('totalfields') is not None:
            self.total_fields = m.get('totalfields')
        if m.get('amountsettlestatus') is not None:
            self.amount_settle_status = m.get('amountsettlestatus')
        return self


class InitBaseListRequest(TeaModel):
    def __init__(
        self,
        body: InitBaseListRequestBody = None,
    ):
        self.body = body
        # 期初其他应付列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InitBaseListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ArInitOtherBaseListRequestBody(TeaModel):
    def __init__(
        self,
        search: str = None,
        start_bill_date: str = None,
        end_bill_date: str = None,
        bill_status: str = None,
        allow_zero: str = None,
        un_page: int = None,
        page: int = None,
        page_size: int = None,
        currency: str = None,
        item_group_id: str = None,
        item_class_id: str = None,
        orderby: str = None,
        select_fields: str = None,
        total_fields: str = None,
        oth_amount_settle_status: str = None,
    ):
        self.search = search
        # 单据日期-开始日期（“yyyy-MM-dd”）
        self.start_bill_date = start_bill_date
        # 单据日期-结束日期（“yyyy-MM-dd”）
        self.end_bill_date = end_bill_date
        # 单据状态（所有：“”，已审核：“C”，未审核：“A”）
        self.bill_status = bill_status
        # 是否允许过滤未核销金额=0的记录（默认：false 不过滤，true，过滤）
        self.allow_zero = allow_zero
        # 是否分页（默认0 分页,为1时不分页）
        self.un_page = un_page
        # 当前页（默认1）
        self.page = page
        # 每页显示条数，（默认10，最大值100）
        self.page_size = page_size
        # 单据币别ID，不传则以本位币为准
        self.currency = currency
        # 供应商分类id， 单选
        self.item_group_id = item_group_id
        # 供应商id， 单选
        self.item_class_id = item_class_id
        # 排序 (默认：billno desc按单据编号降序)
        self.orderby = orderby
        # 指定查询字段 (默认：只提供基本字段返回，特殊字段需指定查询，详见selectfields支持的字段)
        self.select_fields = select_fields
        # 合计字段
        self.total_fields = total_fields
        # 其他应收/其他应付 核销状态：已核销：“C”，部分核销：“B”，未核销：“A”
        self.oth_amount_settle_status = oth_amount_settle_status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.search is not None:
            result['search'] = self.search
        if self.start_bill_date is not None:
            result['startbilldate'] = self.start_bill_date
        if self.end_bill_date is not None:
            result['endbilldate'] = self.end_bill_date
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.allow_zero is not None:
            result['allowzero'] = self.allow_zero
        if self.un_page is not None:
            result['unpage'] = self.un_page
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        if self.currency is not None:
            result['currencyid'] = self.currency
        if self.item_group_id is not None:
            result['itemgroup_id'] = self.item_group_id
        if self.item_class_id is not None:
            result['itemclass_id'] = self.item_class_id
        if self.orderby is not None:
            result['orderby'] = self.orderby
        if self.select_fields is not None:
            result['selectfields'] = self.select_fields
        if self.total_fields is not None:
            result['totalfields'] = self.total_fields
        if self.oth_amount_settle_status is not None:
            result['othamountsettlestatus'] = self.oth_amount_settle_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('startbilldate') is not None:
            self.start_bill_date = m.get('startbilldate')
        if m.get('endbilldate') is not None:
            self.end_bill_date = m.get('endbilldate')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('allowzero') is not None:
            self.allow_zero = m.get('allowzero')
        if m.get('unpage') is not None:
            self.un_page = m.get('unpage')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        if m.get('currencyid') is not None:
            self.currency = m.get('currencyid')
        if m.get('itemgroup_id') is not None:
            self.item_group_id = m.get('itemgroup_id')
        if m.get('itemclass_id') is not None:
            self.item_class_id = m.get('itemclass_id')
        if m.get('orderby') is not None:
            self.orderby = m.get('orderby')
        if m.get('selectfields') is not None:
            self.select_fields = m.get('selectfields')
        if m.get('totalfields') is not None:
            self.total_fields = m.get('totalfields')
        if m.get('othamountsettlestatus') is not None:
            self.oth_amount_settle_status = m.get('othamountsettlestatus')
        return self


class ArInitOtherBaseListRequest(TeaModel):
    def __init__(
        self,
        body: ArInitOtherBaseListRequestBody = None,
    ):
        self.body = body
        # 期初其他应收列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ArInitOtherBaseListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ArApBalanceOrDebtListRequestBody(TeaModel):
    def __init__(
        self,
        balance_type: str = None,
        id: str = None,
        search: str = None,
        group_name: str = None,
        un_page: int = None,
        page: int = None,
        page_size: int = None,
        currency: str = None,
        order_by: str = None,
    ):
        # 欠款&余额类型, ap：供应商应付欠款&余额,ar : 客户应收欠款&余额
        self.balance_type = balance_type
        # 供应商或客户id
        self.id = id
        # 模糊搜索，支持客户或供应商名称
        self.search = search
        # 客户或供应商分组名称
        self.group_name = group_name
        # 是否分页
        self.un_page = un_page
        # 当前页
        self.page = page
        # 每页显示条数
        self.page_size = page_size
        # 单据币别ID，不传则以本位币为准
        self.currency = currency
        # 排序 
        self.order_by = order_by

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.balance_type is not None:
            result['balancetype'] = self.balance_type
        if self.id is not None:
            result['id'] = self.id
        if self.search is not None:
            result['id'] = self.search
        if self.group_name is not None:
            result['group_name'] = self.group_name
        if self.un_page is not None:
            result['unpage'] = self.un_page
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        if self.currency is not None:
            result['currencyid'] = self.currency
        if self.order_by is not None:
            result['orderby'] = self.order_by
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('balancetype') is not None:
            self.balance_type = m.get('balancetype')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('id') is not None:
            self.search = m.get('id')
        if m.get('group_name') is not None:
            self.group_name = m.get('group_name')
        if m.get('unpage') is not None:
            self.un_page = m.get('unpage')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        if m.get('currencyid') is not None:
            self.currency = m.get('currencyid')
        if m.get('orderby') is not None:
            self.order_by = m.get('orderby')
        return self


class ArApBalanceOrDebtListRequest(TeaModel):
    def __init__(
        self,
        body: ArApBalanceOrDebtListRequestBody = None,
    ):
        self.body = body
        # 欠款&余额列表接口

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ArApBalanceOrDebtListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class NoBodyRequestBody(TeaModel):
    def __init__(self):
        pass

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        return self


class NoBodyRequest(TeaModel):
    def __init__(
        self,
        body: NoBodyRequestBody = None,
    ):
        self.body = body
        # 获取账户收支明细单据类型

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = NoBodyRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ArApAccountDetailSummaryRequestBody(TeaModel):
    def __init__(
        self,
        start_date: str = None,
        end_date: str = None,
        account_ids: str = None,
        dept_ids: str = None,
        emp_ids: str = None,
        is_incl_uncheck: str = None,
        pay_type_ids: str = None,
        bill_types: str = None,
        supplier_ids: str = None,
        customer_ids: str = None,
        is_generate_journal: str = None,
        search: str = None,
    ):
        # 开始日期（格式：“yyyy-MM-dd”）
        self.start_date = start_date
        # 开始日期（格式：“yyyy-MM-dd”）
        self.end_date = end_date
        # 账户id列表，多个用英文逗号分隔
        self.account_ids = account_ids
        # 部门id列表，多个用英文逗号分隔
        self.dept_ids = dept_ids
        # 业务员id列表，多个用英文逗号分隔
        self.emp_ids = emp_ids
        # 是否包括未审核，"true"-包括，"false"-不包括
        self.is_incl_uncheck = is_incl_uncheck
        # 结算方式id列表，多个用英文逗号分隔
        self.pay_type_ids = pay_type_ids
        # 单据类型列表，多个用英文逗号分隔
        self.bill_types = bill_types
        # 供应商id列表，多个用英文逗号分隔
        self.supplier_ids = supplier_ids
        # 客户id列表，多个用英文逗号分隔
        self.customer_ids = customer_ids
        # 是否生成日记账，"true"-是，"false"-否
        self.is_generate_journal = is_generate_journal
        # 搜索文本(模糊匹配客户，业务员，供应商)
        self.search = search

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.start_date is not None:
            result['paramdatefrom'] = self.start_date
        if self.end_date is not None:
            result['paramdateto'] = self.end_date
        if self.account_ids is not None:
            result['accountIds'] = self.account_ids
        if self.dept_ids is not None:
            result['deptIds'] = self.dept_ids
        if self.emp_ids is not None:
            result['empIds'] = self.emp_ids
        if self.is_incl_uncheck is not None:
            result['isInclUncheck'] = self.is_incl_uncheck
        if self.pay_type_ids is not None:
            result['payTypeIds'] = self.pay_type_ids
        if self.bill_types is not None:
            result['billTypes'] = self.bill_types
        if self.supplier_ids is not None:
            result['supplierIds'] = self.supplier_ids
        if self.customer_ids is not None:
            result['customerIds'] = self.customer_ids
        if self.is_generate_journal is not None:
            result['isGenerateJournal'] = self.is_generate_journal
        if self.search is not None:
            result['search'] = self.search
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('paramdatefrom') is not None:
            self.start_date = m.get('paramdatefrom')
        if m.get('paramdateto') is not None:
            self.end_date = m.get('paramdateto')
        if m.get('accountIds') is not None:
            self.account_ids = m.get('accountIds')
        if m.get('deptIds') is not None:
            self.dept_ids = m.get('deptIds')
        if m.get('empIds') is not None:
            self.emp_ids = m.get('empIds')
        if m.get('isInclUncheck') is not None:
            self.is_incl_uncheck = m.get('isInclUncheck')
        if m.get('payTypeIds') is not None:
            self.pay_type_ids = m.get('payTypeIds')
        if m.get('billTypes') is not None:
            self.bill_types = m.get('billTypes')
        if m.get('supplierIds') is not None:
            self.supplier_ids = m.get('supplierIds')
        if m.get('customerIds') is not None:
            self.customer_ids = m.get('customerIds')
        if m.get('isGenerateJournal') is not None:
            self.is_generate_journal = m.get('isGenerateJournal')
        if m.get('search') is not None:
            self.search = m.get('search')
        return self


class ArApAccountDetailSummaryRequest(TeaModel):
    def __init__(
        self,
        body: ArApAccountDetailSummaryRequestBody = None,
    ):
        self.body = body
        # 账户收支明细表分类统计

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ArApAccountDetailSummaryRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ArApAccountDetailBybillnoRequestBody(TeaModel):
    def __init__(
        self,
        start_date: str = None,
        end_date: str = None,
        account_ids: str = None,
        currency_ids: str = None,
        dept_ids: str = None,
        emp_ids: str = None,
        is_incl_uncheck: str = None,
        pay_type_ids: str = None,
        bill_types: str = None,
        supplier_ids: str = None,
        customer_ids: str = None,
        is_generate_journal: str = None,
        is_income: str = None,
        search: str = None,
        page: int = None,
    ):
        # 开始日期（格式：“yyyy-MM-dd”）
        self.start_date = start_date
        # 开始日期（格式：“yyyy-MM-dd”）
        self.end_date = end_date
        # 账户id列表，多个用英文逗号分隔
        self.account_ids = account_ids
        # 币别id列表，多个用英文逗号分隔
        self.currency_ids = currency_ids
        # 部门id列表，多个用英文逗号分隔
        self.dept_ids = dept_ids
        # 业务员id列表，多个用英文逗号分隔
        self.emp_ids = emp_ids
        # 是否包括未审核，"true"-包括，"false"-不包括
        self.is_incl_uncheck = is_incl_uncheck
        # 结算方式id列表，多个用英文逗号分隔
        self.pay_type_ids = pay_type_ids
        # 单据类型列表，多个用英文逗号分隔
        self.bill_types = bill_types
        # 供应商id列表，多个用英文逗号分隔
        self.supplier_ids = supplier_ids
        # 客户id列表，多个用英文逗号分隔
        self.customer_ids = customer_ids
        # 是否生成日记账，"true"-是，"false"-否
        self.is_generate_journal = is_generate_journal
        # 是否收入明细，"true"-是，"false"-否
        self.is_income = is_income
        # 搜索文本(模糊匹配客户，业务员，供应商)
        self.search = search
        # 当前页
        self.page = page

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.start_date is not None:
            result['paramdatefrom'] = self.start_date
        if self.end_date is not None:
            result['paramdateto'] = self.end_date
        if self.account_ids is not None:
            result['accountIds'] = self.account_ids
        if self.currency_ids is not None:
            result['currencyIds'] = self.currency_ids
        if self.dept_ids is not None:
            result['deptIds'] = self.dept_ids
        if self.emp_ids is not None:
            result['empIds'] = self.emp_ids
        if self.is_incl_uncheck is not None:
            result['isInclUncheck'] = self.is_incl_uncheck
        if self.pay_type_ids is not None:
            result['payTypeIds'] = self.pay_type_ids
        if self.bill_types is not None:
            result['billTypes'] = self.bill_types
        if self.supplier_ids is not None:
            result['supplierIds'] = self.supplier_ids
        if self.customer_ids is not None:
            result['customerIds'] = self.customer_ids
        if self.is_generate_journal is not None:
            result['isGenerateJournal'] = self.is_generate_journal
        if self.is_income is not None:
            result['isIncome'] = self.is_income
        if self.search is not None:
            result['search'] = self.search
        if self.page is not None:
            result['page'] = self.page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('paramdatefrom') is not None:
            self.start_date = m.get('paramdatefrom')
        if m.get('paramdateto') is not None:
            self.end_date = m.get('paramdateto')
        if m.get('accountIds') is not None:
            self.account_ids = m.get('accountIds')
        if m.get('currencyIds') is not None:
            self.currency_ids = m.get('currencyIds')
        if m.get('deptIds') is not None:
            self.dept_ids = m.get('deptIds')
        if m.get('empIds') is not None:
            self.emp_ids = m.get('empIds')
        if m.get('isInclUncheck') is not None:
            self.is_incl_uncheck = m.get('isInclUncheck')
        if m.get('payTypeIds') is not None:
            self.pay_type_ids = m.get('payTypeIds')
        if m.get('billTypes') is not None:
            self.bill_types = m.get('billTypes')
        if m.get('supplierIds') is not None:
            self.supplier_ids = m.get('supplierIds')
        if m.get('customerIds') is not None:
            self.customer_ids = m.get('customerIds')
        if m.get('isGenerateJournal') is not None:
            self.is_generate_journal = m.get('isGenerateJournal')
        if m.get('isIncome') is not None:
            self.is_income = m.get('isIncome')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('page') is not None:
            self.page = m.get('page')
        return self


class ArApAccountDetailBybillnoRequest(TeaModel):
    def __init__(
        self,
        body: ArApAccountDetailBybillnoRequestBody = None,
    ):
        self.body = body
        # 账户收支明细表按单统计

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ArApAccountDetailBybillnoRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ArApAccountBalanceRequestBody(TeaModel):
    def __init__(
        self,
        start_date: str = None,
        end_date: str = None,
    ):
        # 开始日期（格式：“yyyy-MM-dd”）
        self.start_date = start_date
        # 开始日期（格式：“yyyy-MM-dd”）
        self.end_date = end_date

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.start_date is not None:
            result['paramdatefrom'] = self.start_date
        if self.end_date is not None:
            result['paramdateto'] = self.end_date
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('paramdatefrom') is not None:
            self.start_date = m.get('paramdatefrom')
        if m.get('paramdateto') is not None:
            self.end_date = m.get('paramdateto')
        return self


class ArApAccountBalanceRequest(TeaModel):
    def __init__(
        self,
        body: ArApAccountBalanceRequestBody = None,
    ):
        self.body = body
        # 资金分析主页面

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ArApAccountBalanceRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ArApAccountDetailListRequestBody(TeaModel):
    def __init__(
        self,
        start_date: str = None,
        end_date: str = None,
        account_ids: str = None,
        currency_ids: str = None,
        dept_ids: str = None,
        emp_ids: str = None,
        is_incl_uncheck: str = None,
        pay_type_ids: str = None,
        bill_types: str = None,
        supplier_ids: str = None,
        customer_ids: str = None,
        is_generate_journal: str = None,
        is_income: str = None,
        page: int = None,
    ):
        # 开始日期（格式：“yyyy-MM-dd”）
        self.start_date = start_date
        # 开始日期（格式：“yyyy-MM-dd”）
        self.end_date = end_date
        # 账户id列表，多个用英文逗号分隔
        self.account_ids = account_ids
        # 币别id列表，多个用英文逗号分隔
        self.currency_ids = currency_ids
        # 部门id列表，多个用英文逗号分隔
        self.dept_ids = dept_ids
        # 业务员id列表，多个用英文逗号分隔
        self.emp_ids = emp_ids
        # 是否包括未审核，"true"-包括，"false"-不包括
        self.is_incl_uncheck = is_incl_uncheck
        # 结算方式id列表，多个用英文逗号分隔
        self.pay_type_ids = pay_type_ids
        # 单据类型列表，多个用英文逗号分隔
        self.bill_types = bill_types
        # 供应商id列表，多个用英文逗号分隔
        self.supplier_ids = supplier_ids
        # 客户id列表，多个用英文逗号分隔
        self.customer_ids = customer_ids
        # 是否生成日记账，"true"-是，"false"-否
        self.is_generate_journal = is_generate_journal
        # 是否收入明细，"true"-是，"false"-否
        self.is_income = is_income
        # 当前页
        self.page = page

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.start_date is not None:
            result['paramdatefrom'] = self.start_date
        if self.end_date is not None:
            result['paramdateto'] = self.end_date
        if self.account_ids is not None:
            result['accountIds'] = self.account_ids
        if self.currency_ids is not None:
            result['currencyIds'] = self.currency_ids
        if self.dept_ids is not None:
            result['deptIds'] = self.dept_ids
        if self.emp_ids is not None:
            result['empIds'] = self.emp_ids
        if self.is_incl_uncheck is not None:
            result['isInclUncheck'] = self.is_incl_uncheck
        if self.pay_type_ids is not None:
            result['payTypeIds'] = self.pay_type_ids
        if self.bill_types is not None:
            result['billTypes'] = self.bill_types
        if self.supplier_ids is not None:
            result['supplierIds'] = self.supplier_ids
        if self.customer_ids is not None:
            result['customerIds'] = self.customer_ids
        if self.is_generate_journal is not None:
            result['isGenerateJournal'] = self.is_generate_journal
        if self.is_income is not None:
            result['isIncome'] = self.is_income
        if self.page is not None:
            result['page'] = self.page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('paramdatefrom') is not None:
            self.start_date = m.get('paramdatefrom')
        if m.get('paramdateto') is not None:
            self.end_date = m.get('paramdateto')
        if m.get('accountIds') is not None:
            self.account_ids = m.get('accountIds')
        if m.get('currencyIds') is not None:
            self.currency_ids = m.get('currencyIds')
        if m.get('deptIds') is not None:
            self.dept_ids = m.get('deptIds')
        if m.get('empIds') is not None:
            self.emp_ids = m.get('empIds')
        if m.get('isInclUncheck') is not None:
            self.is_incl_uncheck = m.get('isInclUncheck')
        if m.get('payTypeIds') is not None:
            self.pay_type_ids = m.get('payTypeIds')
        if m.get('billTypes') is not None:
            self.bill_types = m.get('billTypes')
        if m.get('supplierIds') is not None:
            self.supplier_ids = m.get('supplierIds')
        if m.get('customerIds') is not None:
            self.customer_ids = m.get('customerIds')
        if m.get('isGenerateJournal') is not None:
            self.is_generate_journal = m.get('isGenerateJournal')
        if m.get('isIncome') is not None:
            self.is_income = m.get('isIncome')
        if m.get('page') is not None:
            self.page = m.get('page')
        return self


class ArApAccountDetailListRequest(TeaModel):
    def __init__(
        self,
        body: ArApAccountDetailListRequestBody = None,
    ):
        self.body = body
        # 资金帐户明细列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ArApAccountDetailListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BossBalanceHomePageRequestBody(TeaModel):
    def __init__(
        self,
        query_type: str = None,
    ):
        # 查询类型:   "1"-上月 "2"-本月  "3"-本季度  "4"-本年
        self.query_type = query_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.query_type is not None:
            result['queryType'] = self.query_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('queryType') is not None:
            self.query_type = m.get('queryType')
        return self


class BossBalanceHomePageRequest(TeaModel):
    def __init__(
        self,
        body: BossBalanceHomePageRequestBody = None,
    ):
        self.body = body
        # 资金看板-资金余额首页

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = BossBalanceHomePageRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BossDebitCreditTrendRequestBody(TeaModel):
    def __init__(
        self,
        income_type: str = None,
        trend_type: str = None,
    ):
        # 收支类型， "1"-收入趋势，“2”-支出趋势
        self.income_type = income_type
        # 趋势类型，“1”—最近一周，“2”-最近30天，“3”-最近一年
        self.trend_type = trend_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.income_type is not None:
            result['incomeType'] = self.income_type
        if self.trend_type is not None:
            result['trendType'] = self.trend_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('incomeType') is not None:
            self.income_type = m.get('incomeType')
        if m.get('trendType') is not None:
            self.trend_type = m.get('trendType')
        return self


class BossDebitCreditTrendRequest(TeaModel):
    def __init__(
        self,
        body: BossDebitCreditTrendRequestBody = None,
    ):
        self.body = body
        # 资金看板-资金收支趋势

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = BossDebitCreditTrendRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BossAccountDetailsRequestBody(TeaModel):
    def __init__(
        self,
        query_type: str = None,
        start_date: str = None,
        end_date: str = None,
        start_period: str = None,
        end_period: str = None,
        account_ids: str = None,
        currency_ids: str = None,
        dept_ids: str = None,
        emp_ids: str = None,
        is_incl_uncheck: str = None,
        pay_type_ids: str = None,
        bill_types: str = None,
        supplier_ids: str = None,
        customer_ids: str = None,
        is_generate_journal: str = None,
        is_income: str = None,
        page: int = None,
    ):
        # 查询类型:"date"-按照日期查询   "period"-按照期间查询
        self.query_type = query_type
        # 开始日期（格式：“yyyy-MM-dd”）
        self.start_date = start_date
        # 开始日期（格式：“yyyy-MM-dd”）
        self.end_date = end_date
        # 开始期间（当queryType="period"时必填）， 格式："202103"
        self.start_period = start_period
        # 结束期间（当queryType="period"时必填），格式："202103"
        self.end_period = end_period
        # 账户id列表，多个用英文逗号分隔
        self.account_ids = account_ids
        # 币别ID（暂不支持多个）
        self.currency_ids = currency_ids
        # 部门id列表，多个用英文逗号分隔
        self.dept_ids = dept_ids
        # 业务员id列表，多个用英文逗号分隔
        self.emp_ids = emp_ids
        # 是否包括未审核，"true"-包括，"false"-不包括
        self.is_incl_uncheck = is_incl_uncheck
        # 结算方式id列表，多个用英文逗号分隔
        self.pay_type_ids = pay_type_ids
        # 单据类型列表，多个用英文逗号分隔
        self.bill_types = bill_types
        # 供应商id列表，多个用英文逗号分隔
        self.supplier_ids = supplier_ids
        # 客户id列表，多个用英文逗号分隔
        self.customer_ids = customer_ids
        # 是否生成日记账，"true"-是，"false"-否
        self.is_generate_journal = is_generate_journal
        # 是否收入明细，"true"-是，"false"-否
        self.is_income = is_income
        # 当前页，必填默认传1，每页默认显示20条
        self.page = page

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.query_type is not None:
            result['queryType'] = self.query_type
        if self.start_date is not None:
            result['paramdatefrom'] = self.start_date
        if self.end_date is not None:
            result['paramdateto'] = self.end_date
        if self.start_period is not None:
            result['paramstartperiod'] = self.start_period
        if self.end_period is not None:
            result['paramendperiod'] = self.end_period
        if self.account_ids is not None:
            result['accountIds'] = self.account_ids
        if self.currency_ids is not None:
            result['currencyIds'] = self.currency_ids
        if self.dept_ids is not None:
            result['deptIds'] = self.dept_ids
        if self.emp_ids is not None:
            result['empIds'] = self.emp_ids
        if self.is_incl_uncheck is not None:
            result['isInclUncheck'] = self.is_incl_uncheck
        if self.pay_type_ids is not None:
            result['payTypeIds'] = self.pay_type_ids
        if self.bill_types is not None:
            result['billTypes'] = self.bill_types
        if self.supplier_ids is not None:
            result['supplierIds'] = self.supplier_ids
        if self.customer_ids is not None:
            result['customerIds'] = self.customer_ids
        if self.is_generate_journal is not None:
            result['isGenerateJournal'] = self.is_generate_journal
        if self.is_income is not None:
            result['isIncome'] = self.is_income
        if self.page is not None:
            result['page'] = self.page
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('queryType') is not None:
            self.query_type = m.get('queryType')
        if m.get('paramdatefrom') is not None:
            self.start_date = m.get('paramdatefrom')
        if m.get('paramdateto') is not None:
            self.end_date = m.get('paramdateto')
        if m.get('paramstartperiod') is not None:
            self.start_period = m.get('paramstartperiod')
        if m.get('paramendperiod') is not None:
            self.end_period = m.get('paramendperiod')
        if m.get('accountIds') is not None:
            self.account_ids = m.get('accountIds')
        if m.get('currencyIds') is not None:
            self.currency_ids = m.get('currencyIds')
        if m.get('deptIds') is not None:
            self.dept_ids = m.get('deptIds')
        if m.get('empIds') is not None:
            self.emp_ids = m.get('empIds')
        if m.get('isInclUncheck') is not None:
            self.is_incl_uncheck = m.get('isInclUncheck')
        if m.get('payTypeIds') is not None:
            self.pay_type_ids = m.get('payTypeIds')
        if m.get('billTypes') is not None:
            self.bill_types = m.get('billTypes')
        if m.get('supplierIds') is not None:
            self.supplier_ids = m.get('supplierIds')
        if m.get('customerIds') is not None:
            self.customer_ids = m.get('customerIds')
        if m.get('isGenerateJournal') is not None:
            self.is_generate_journal = m.get('isGenerateJournal')
        if m.get('isIncome') is not None:
            self.is_income = m.get('isIncome')
        if m.get('page') is not None:
            self.page = m.get('page')
        return self


class BossAccountDetailsRequest(TeaModel):
    def __init__(
        self,
        body: BossAccountDetailsRequestBody = None,
    ):
        self.body = body
        # 资金看板-资金流水明细

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = BossAccountDetailsRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BossAccountBalanceRequestBody(TeaModel):
    def __init__(
        self,
        currency_id: str = None,
    ):
        self.currency_id = currency_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.currency_id is not None:
            result['currencyId'] = self.currency_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('currencyId') is not None:
            self.currency_id = m.get('currencyId')
        return self


class BossAccountBalanceRequest(TeaModel):
    def __init__(
        self,
        body: BossAccountBalanceRequestBody = None,
    ):
        self.body = body
        # 资金看板-资金账户余额

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = BossAccountBalanceRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ArApAccountBalanceListRequestBody(TeaModel):
    def __init__(
        self,
        start_date: str = None,
        end_date: str = None,
        account_ids: str = None,
        currency_ids: str = None,
    ):
        # 开始日期（格式：“yyyy-MM-dd”），一般为本月1号
        self.start_date = start_date
        # 截止日期（格式：“yyyy-MM-dd”），一般为本月当前时间
        self.end_date = end_date
        # 账户id列表，多个用英文逗号分隔
        self.account_ids = account_ids
        # 币别id列表，多个用英文逗号分隔
        self.currency_ids = currency_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.start_date is not None:
            result['paramdatefrom'] = self.start_date
        if self.end_date is not None:
            result['paramdateto'] = self.end_date
        if self.account_ids is not None:
            result['accountIds'] = self.account_ids
        if self.currency_ids is not None:
            result['currencyIds'] = self.currency_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('paramdatefrom') is not None:
            self.start_date = m.get('paramdatefrom')
        if m.get('paramdateto') is not None:
            self.end_date = m.get('paramdateto')
        if m.get('accountIds') is not None:
            self.account_ids = m.get('accountIds')
        if m.get('currencyIds') is not None:
            self.currency_ids = m.get('currencyIds')
        return self


class ArApAccountBalanceListRequest(TeaModel):
    def __init__(
        self,
        body: ArApAccountBalanceListRequestBody = None,
    ):
        self.body = body
        # 资金分析主页面查询接口

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ArApAccountBalanceListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ArApCapitalTrendRequestBody(TeaModel):
    def __init__(
        self,
        start_date: str = None,
        end_date: str = None,
        trend_type: str = None,
    ):
        # 开始日期（格式：“yyyy-MM-dd”），一般为本月1号
        self.start_date = start_date
        # 截止日期（格式：“yyyy-MM-dd”），一般为本月当前时间
        self.end_date = end_date
        # 查询类型，1-按日，2-按月
        self.trend_type = trend_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.start_date is not None:
            result['paramdatefrom'] = self.start_date
        if self.end_date is not None:
            result['paramdateto'] = self.end_date
        if self.trend_type is not None:
            result['trendType'] = self.trend_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('paramdatefrom') is not None:
            self.start_date = m.get('paramdatefrom')
        if m.get('paramdateto') is not None:
            self.end_date = m.get('paramdateto')
        if m.get('trendType') is not None:
            self.trend_type = m.get('trendType')
        return self


class ArApCapitalTrendRequest(TeaModel):
    def __init__(
        self,
        body: ArApCapitalTrendRequestBody = None,
    ):
        self.body = body
        # 资金趋势图（按日）

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ArApCapitalTrendRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PreCreditListRequestBody(TeaModel):
    def __init__(
        self,
        search: str = None,
        start_date: str = None,
        end_date: str = None,
        begin_date: str = None,
        expire_date: str = None,
        start_time: int = None,
        end_time: int = None,
        begin_time: int = None,
        expire_time: int = None,
        start_bill_date: str = None,
        end_bill_date: str = None,
        bill_status: str = None,
        bill_source: str = None,
        item_group: str = None,
        item_class: str = None,
        emp: str = None,
        dept: str = None,
        orderbill_id: str = None,
        page: int = None,
        page_size: int = None,
    ):
        self.search = search
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.start_date = start_date
        # 结束日期（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.end_date = end_date
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），修改日期
        self.begin_date = begin_date
        # 结束日期（格式：“yyyy-MM-dd”，为空表示不过滤），修改日期
        self.expire_date = expire_date
        # 开始时间（格式：“时间戳”，-1表示不过滤），创建时间
        self.start_time = start_time
        # 结束时间（格式：“时间戳”，-1表示不过滤），创建时间
        self.end_time = end_time
        # 开始时间（格式：“时间戳”，-1表示不过滤），修改时间
        self.begin_time = begin_time
        # 结束时间（格式：“时间戳”，-1表示不过滤），修改时间
        self.expire_time = expire_time
        # 单据日期-开始日期（“yyyy-MM-dd”）
        self.start_bill_date = start_bill_date
        # 单据日期-结束日期（“yyyy-MM-dd”）
        self.end_bill_date = end_bill_date
        # 单据状态（所有：“”，已审核：“C”，未审核：“A”）
        self.bill_status = bill_status
        # 单据来源 (手机："app", 电脑:“PC”, 所有:"")
        self.bill_source = bill_source
        # 供应商分类id， 单选
        self.item_group = item_group
        # 供应商id， 单选
        self.item_class = item_class
        # 业务员id, 单选
        self.emp = emp
        # 部门id， 单选
        self.dept = dept
        # 源单id
        self.orderbill_id = orderbill_id
        # 当前页（默认1）
        self.page = page
        # 每页显示条数，（默认10，最大值100）
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.search is not None:
            result['search'] = self.search
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.begin_date is not None:
            result['begindate'] = self.begin_date
        if self.expire_date is not None:
            result['expiredate'] = self.expire_date
        if self.start_time is not None:
            result['starttime'] = self.start_time
        if self.end_time is not None:
            result['endtime'] = self.end_time
        if self.begin_time is not None:
            result['begintime'] = self.begin_time
        if self.expire_time is not None:
            result['expiretime'] = self.expire_time
        if self.start_bill_date is not None:
            result['startbilldate'] = self.start_bill_date
        if self.end_bill_date is not None:
            result['endbilldate'] = self.end_bill_date
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.bill_source is not None:
            result['billsource'] = self.bill_source
        if self.item_group is not None:
            result['itemgroup_id'] = self.item_group
        if self.item_class is not None:
            result['itemclass_id'] = self.item_class
        if self.emp is not None:
            result['emp_id'] = self.emp
        if self.dept is not None:
            result['dept_id'] = self.dept
        if self.orderbill_id is not None:
            result['orderbillid'] = self.orderbill_id
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('begindate') is not None:
            self.begin_date = m.get('begindate')
        if m.get('expiredate') is not None:
            self.expire_date = m.get('expiredate')
        if m.get('starttime') is not None:
            self.start_time = m.get('starttime')
        if m.get('endtime') is not None:
            self.end_time = m.get('endtime')
        if m.get('begintime') is not None:
            self.begin_time = m.get('begintime')
        if m.get('expiretime') is not None:
            self.expire_time = m.get('expiretime')
        if m.get('startbilldate') is not None:
            self.start_bill_date = m.get('startbilldate')
        if m.get('endbilldate') is not None:
            self.end_bill_date = m.get('endbilldate')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('billsource') is not None:
            self.bill_source = m.get('billsource')
        if m.get('itemgroup_id') is not None:
            self.item_group = m.get('itemgroup_id')
        if m.get('itemclass_id') is not None:
            self.item_class = m.get('itemclass_id')
        if m.get('emp_id') is not None:
            self.emp = m.get('emp_id')
        if m.get('dept_id') is not None:
            self.dept = m.get('dept_id')
        if m.get('orderbillid') is not None:
            self.orderbill_id = m.get('orderbillid')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        return self


class PreCreditListRequest(TeaModel):
    def __init__(
        self,
        body: PreCreditListRequestBody = None,
    ):
        self.body = body
        # 预付款单列表接口

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = PreCreditListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApPreCreditDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        billno: str = None,
        bill_source: str = None,
        bill_date: str = None,
        billstatus: str = None,
        itemclass_id: str = None,
        itemclass_name: str = None,
        itemclass_number: str = None,
        dept_id: str = None,
        dept_name: str = None,
        dept_number: str = None,
        emp_id: str = None,
        emp_name: str = None,
        emp_number: str = None,
        totalbalanceamountmemo: str = None,
        totalamount: str = None,
        totalamountfor: str = None,
        remark: str = None,
        attachments_url: List[AttachmentsUrl] = None,
        payfromtoentry: List[PayFromEntry] = None,
    ):
        # 单据ID，新增时不传，修改时必传
        self.id = id
        # 单据编号
        self.billno = billno
        # 单据来源，新增时必须传值，移动端固定传入 "APP",其他来源可自定义,修改时可以不传
        self.bill_source = bill_source
        # 单据日期,格式：2019-01-01
        self.bill_date = bill_date
        # 单据状态，A：未审核，C：已审核
        self.billstatus = billstatus
        # 供应商 id
        self.itemclass_id = itemclass_id
        # 供应商名称
        self.itemclass_name = itemclass_name
        # 供应商编码
        self.itemclass_number = itemclass_number
        # 部门 id
        self.dept_id = dept_id
        # 部门名称
        self.dept_name = dept_name
        # 部门编码
        self.dept_number = dept_number
        # 业务员id
        self.emp_id = emp_id
        # 业务员 名称
        self.emp_name = emp_name
        # 业务员编码
        self.emp_number = emp_number
        # 应付款余额
        self.totalbalanceamountmemo = totalbalanceamountmemo
        # 本次应付总金额
        self.totalamount = totalamount
        # 本次应付总金额(本位币)
        self.totalamountfor = totalamountfor
        # 单据备注
        self.remark = remark
        # 附件地址
        self.attachments_url = attachments_url
        # 应款信息分录
        self.payfromtoentry = payfromtoentry

    def validate(self):
        if self.attachments_url:
            for k in self.attachments_url:
                if k:
                    k.validate()
        if self.payfromtoentry:
            for k in self.payfromtoentry:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.billno is not None:
            result['billno'] = self.billno
        if self.bill_source is not None:
            result['billsource'] = self.bill_source
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.billstatus is not None:
            result['billdate'] = self.billstatus
        if self.itemclass_id is not None:
            result['itemclass_id'] = self.itemclass_id
        if self.itemclass_name is not None:
            result['itemclass_name'] = self.itemclass_name
        if self.itemclass_number is not None:
            result['itemclass_number'] = self.itemclass_number
        if self.dept_id is not None:
            result['dept_id'] = self.dept_id
        if self.dept_name is not None:
            result['dept_name'] = self.dept_name
        if self.dept_number is not None:
            result['dept_number'] = self.dept_number
        if self.emp_id is not None:
            result['emp_id'] = self.emp_id
        if self.emp_name is not None:
            result['emp_name'] = self.emp_name
        if self.emp_number is not None:
            result['emp_number'] = self.emp_number
        if self.totalbalanceamountmemo is not None:
            result['totalbalanceamountmemo'] = self.totalbalanceamountmemo
        if self.totalamount is not None:
            result['totalamount'] = self.totalamount
        if self.totalamountfor is not None:
            result['totalamountfor'] = self.totalamountfor
        if self.remark is not None:
            result['remark'] = self.remark
        result['attachments_url'] = []
        if self.attachments_url is not None:
            for k in self.attachments_url:
                result['attachments_url'].append(k.to_map() if k else None)
        result['payfromtoentry'] = []
        if self.payfromtoentry is not None:
            for k in self.payfromtoentry:
                result['payfromtoentry'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billno') is not None:
            self.billno = m.get('billno')
        if m.get('billsource') is not None:
            self.bill_source = m.get('billsource')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('billdate') is not None:
            self.billstatus = m.get('billdate')
        if m.get('itemclass_id') is not None:
            self.itemclass_id = m.get('itemclass_id')
        if m.get('itemclass_name') is not None:
            self.itemclass_name = m.get('itemclass_name')
        if m.get('itemclass_number') is not None:
            self.itemclass_number = m.get('itemclass_number')
        if m.get('dept_id') is not None:
            self.dept_id = m.get('dept_id')
        if m.get('dept_name') is not None:
            self.dept_name = m.get('dept_name')
        if m.get('dept_number') is not None:
            self.dept_number = m.get('dept_number')
        if m.get('emp_id') is not None:
            self.emp_id = m.get('emp_id')
        if m.get('emp_name') is not None:
            self.emp_name = m.get('emp_name')
        if m.get('emp_number') is not None:
            self.emp_number = m.get('emp_number')
        if m.get('totalbalanceamountmemo') is not None:
            self.totalbalanceamountmemo = m.get('totalbalanceamountmemo')
        if m.get('totalamount') is not None:
            self.totalamount = m.get('totalamount')
        if m.get('totalamountfor') is not None:
            self.totalamountfor = m.get('totalamountfor')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        self.attachments_url = []
        if m.get('attachments_url') is not None:
            for k in m.get('attachments_url'):
                temp_model = AttachmentsUrl()
                self.attachments_url.append(temp_model.from_map(k))
        self.payfromtoentry = []
        if m.get('payfromtoentry') is not None:
            for k in m.get('payfromtoentry'):
                temp_model = PayFromEntry()
                self.payfromtoentry.append(temp_model.from_map(k))
        return self


class SaveApPreCreditRequest(TeaModel):
    def __init__(
        self,
        body: ApPreCreditDetail = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ApPreCreditDetail()
            self.body = temp_model.from_map(m['body'])
        return self


class ApPreCreditDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: ApPreCreditDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code
        # 预付款单详情

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = ApPreCreditDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class PreCreditDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        billno: str = None,
        bill_source: str = None,
        bill_date: str = None,
        billstatus: str = None,
        itemclass_id: str = None,
        itemclass_name: str = None,
        itemclass_number: str = None,
        dept_id: str = None,
        dept_name: str = None,
        dept_number: str = None,
        emp_id: str = None,
        emp_name: str = None,
        emp_number: str = None,
        totalbalanceamountmemo: str = None,
        totalamount: str = None,
        totalamountfor: str = None,
        remark: str = None,
        attachments_url: List[AttachmentsUrl] = None,
        payfromtoentry: List[PayFromEntry] = None,
        selbillinfoentry: List[SelBillEntry] = None,
    ):
        # 单据ID，新增时不传，修改时必传
        self.id = id
        # 单据编号
        self.billno = billno
        # 单据来源，新增时必须传值，移动端固定传入 "APP",其他来源可自定义,修改时可以不传
        self.bill_source = bill_source
        # 单据日期,格式：2019-01-01
        self.bill_date = bill_date
        # 单据状态，A：未审核，C：已审核
        self.billstatus = billstatus
        # 供应商 id
        self.itemclass_id = itemclass_id
        # 供应商名称
        self.itemclass_name = itemclass_name
        # 供应商编码
        self.itemclass_number = itemclass_number
        # 部门 id
        self.dept_id = dept_id
        # 部门名称
        self.dept_name = dept_name
        # 部门编码
        self.dept_number = dept_number
        # 业务员id
        self.emp_id = emp_id
        # 业务员 名称
        self.emp_name = emp_name
        # 业务员编码
        self.emp_number = emp_number
        # 应付款余额
        self.totalbalanceamountmemo = totalbalanceamountmemo
        # 本次应付总金额
        self.totalamount = totalamount
        # 本次应付总金额(本位币)
        self.totalamountfor = totalamountfor
        # 单据备注
        self.remark = remark
        # 附件地址
        self.attachments_url = attachments_url
        # 应款信息分录
        self.payfromtoentry = payfromtoentry
        # 立即付款分录
        self.selbillinfoentry = selbillinfoentry
        # 预付退款单新增&修改

    def validate(self):
        if self.attachments_url:
            for k in self.attachments_url:
                if k:
                    k.validate()
        self.validate_required(self.payfromtoentry, 'payfromtoentry')
        if self.payfromtoentry:
            for k in self.payfromtoentry:
                if k:
                    k.validate()
        if self.selbillinfoentry:
            for k in self.selbillinfoentry:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.billno is not None:
            result['billno'] = self.billno
        if self.bill_source is not None:
            result['billsource'] = self.bill_source
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.billstatus is not None:
            result['billdate'] = self.billstatus
        if self.itemclass_id is not None:
            result['itemclass_id'] = self.itemclass_id
        if self.itemclass_name is not None:
            result['itemclass_name'] = self.itemclass_name
        if self.itemclass_number is not None:
            result['itemclass_number'] = self.itemclass_number
        if self.dept_id is not None:
            result['dept_id'] = self.dept_id
        if self.dept_name is not None:
            result['dept_name'] = self.dept_name
        if self.dept_number is not None:
            result['dept_number'] = self.dept_number
        if self.emp_id is not None:
            result['emp_id'] = self.emp_id
        if self.emp_name is not None:
            result['emp_name'] = self.emp_name
        if self.emp_number is not None:
            result['emp_number'] = self.emp_number
        if self.totalbalanceamountmemo is not None:
            result['totalbalanceamountmemo'] = self.totalbalanceamountmemo
        if self.totalamount is not None:
            result['totalamount'] = self.totalamount
        if self.totalamountfor is not None:
            result['totalamountfor'] = self.totalamountfor
        if self.remark is not None:
            result['remark'] = self.remark
        result['attachments_url'] = []
        if self.attachments_url is not None:
            for k in self.attachments_url:
                result['attachments_url'].append(k.to_map() if k else None)
        result['payfromtoentry'] = []
        if self.payfromtoentry is not None:
            for k in self.payfromtoentry:
                result['payfromtoentry'].append(k.to_map() if k else None)
        result['selbillinfoentry'] = []
        if self.selbillinfoentry is not None:
            for k in self.selbillinfoentry:
                result['selbillinfoentry'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billno') is not None:
            self.billno = m.get('billno')
        if m.get('billsource') is not None:
            self.bill_source = m.get('billsource')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('billdate') is not None:
            self.billstatus = m.get('billdate')
        if m.get('itemclass_id') is not None:
            self.itemclass_id = m.get('itemclass_id')
        if m.get('itemclass_name') is not None:
            self.itemclass_name = m.get('itemclass_name')
        if m.get('itemclass_number') is not None:
            self.itemclass_number = m.get('itemclass_number')
        if m.get('dept_id') is not None:
            self.dept_id = m.get('dept_id')
        if m.get('dept_name') is not None:
            self.dept_name = m.get('dept_name')
        if m.get('dept_number') is not None:
            self.dept_number = m.get('dept_number')
        if m.get('emp_id') is not None:
            self.emp_id = m.get('emp_id')
        if m.get('emp_name') is not None:
            self.emp_name = m.get('emp_name')
        if m.get('emp_number') is not None:
            self.emp_number = m.get('emp_number')
        if m.get('totalbalanceamountmemo') is not None:
            self.totalbalanceamountmemo = m.get('totalbalanceamountmemo')
        if m.get('totalamount') is not None:
            self.totalamount = m.get('totalamount')
        if m.get('totalamountfor') is not None:
            self.totalamountfor = m.get('totalamountfor')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        self.attachments_url = []
        if m.get('attachments_url') is not None:
            for k in m.get('attachments_url'):
                temp_model = AttachmentsUrl()
                self.attachments_url.append(temp_model.from_map(k))
        self.payfromtoentry = []
        if m.get('payfromtoentry') is not None:
            for k in m.get('payfromtoentry'):
                temp_model = PayFromEntry()
                self.payfromtoentry.append(temp_model.from_map(k))
        self.selbillinfoentry = []
        if m.get('selbillinfoentry') is not None:
            for k in m.get('selbillinfoentry'):
                temp_model = SelBillEntry()
                self.selbillinfoentry.append(temp_model.from_map(k))
        return self


class SavePreCreditRequest(TeaModel):
    def __init__(
        self,
        body: PreCreditDetail = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = PreCreditDetail()
            self.body = temp_model.from_map(m['body'])
        return self


class ApPreCreditRetDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: PreCreditDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code
        # 预付退款单详情

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = PreCreditDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class ArPreCreditDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: PreCreditDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code
        # 预收款单详情

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = PreCreditDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class ArPreCreditRetDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: PreCreditDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code
        # 预收退款单详情

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = PreCreditDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class CompanySendRequestBody(TeaModel):
    def __init__(
        self,
        bills: List[str] = None,
        bill_type: str = None,
    ):
        # 单据内码数组
        self.bills = bills
        # 单据类型
        self.bill_type = bill_type

    def validate(self):
        self.validate_required(self.bills, 'bills')
        self.validate_required(self.bill_type, 'bill_type')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bills is not None:
            result['bills'] = self.bills
        if self.bill_type is not None:
            result['billtypeid'] = self.bill_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('bills') is not None:
            self.bills = m.get('bills')
        if m.get('billtypeid') is not None:
            self.bill_type = m.get('billtypeid')
        return self


class CompanySendRequest(TeaModel):
    def __init__(
        self,
        body: CompanySendRequestBody = None,
    ):
        self.body = body
        # 企业互联发送数据接口

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = CompanySendRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BillEntryData(TeaModel):
    def __init__(
        self,
        id: str = None,
        entry_id: str = None,
    ):
        self.id = id
        self.entry_id = entry_id

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.entry_id, 'entry_id')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.entry_id is not None:
            result['entryid'] = self.entry_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('entryid') is not None:
            self.entry_id = m.get('entryid')
        return self


class BillPushRequestBody(TeaModel):
    def __init__(
        self,
        ids: str = None,
        numbers: List[str] = None,
        source_bill: str = None,
        target_bill: str = None,
        operate_type: str = None,
        push_entry: bool = None,
        data: BillEntryData = None,
    ):
        # 单据ID
        self.ids = ids
        # 编码的集合，不传ID时使用编码
        self.numbers = numbers
        # 当前单据类型
        self.source_bill = source_bill
        # 下推目标单据类型
        self.target_bill = target_bill
        # 根据操作类型下推
        self.operate_type = operate_type
        # 按分录下推,值传true
        self.push_entry = push_entry
        # 单据ID
        self.data = data

    def validate(self):
        self.validate_required(self.source_bill, 'source_bill')
        self.validate_required(self.target_bill, 'target_bill')
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids is not None:
            result['ids'] = self.ids
        if self.numbers is not None:
            result['numbers'] = self.numbers
        if self.source_bill is not None:
            result['sourcebill'] = self.source_bill
        if self.target_bill is not None:
            result['targetbill'] = self.target_bill
        if self.operate_type is not None:
            result['operatetype'] = self.operate_type
        if self.push_entry is not None:
            result['push_entry'] = self.push_entry
        if self.data is not None:
            result['data'] = self.data.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        if m.get('numbers') is not None:
            self.numbers = m.get('numbers')
        if m.get('sourcebill') is not None:
            self.source_bill = m.get('sourcebill')
        if m.get('targetbill') is not None:
            self.target_bill = m.get('targetbill')
        if m.get('operatetype') is not None:
            self.operate_type = m.get('operatetype')
        if m.get('push_entry') is not None:
            self.push_entry = m.get('push_entry')
        if m.get('data') is not None:
            temp_model = BillEntryData()
            self.data = temp_model.from_map(m['data'])
        return self


class BillPushRequest(TeaModel):
    def __init__(
        self,
        body: BillPushRequestBody = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = BillPushRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MultiUnitCalRequestBody(TeaModel):
    def __init__(
        self,
        material_id: str = None,
        bill_type: str = None,
        unit: str = None,
        unit_type: str = None,
        coefficient: str = None,
        qty: str = None,
        aux_unit: str = None,
        aux_unit_type: str = None,
        aux_coefficient: str = None,
        aux_qty: str = None,
        change_source: str = None,
        change_flag: str = None,
    ):
        # 单据ID
        self.material_id = material_id
        # 单据类型
        self.bill_type = bill_type
        # 单位id
        self.unit = unit
        # 单位类型（0普通单位，1浮动单位）
        self.unit_type = unit_type
        # 单位的换算率
        self.coefficient = coefficient
        # 单位的换算率
        self.qty = qty
        # 辅助单位id
        self.aux_unit = aux_unit
        # 辅助单位类型（0普通单位，1浮动单位）
        self.aux_unit_type = aux_unit_type
        # 辅助单位换算率
        self.aux_coefficient = aux_coefficient
        # 单位的换算率
        self.aux_qty = aux_qty
        # 改变事件源:数量(qty)、单位(unit)、辅助数量(auxqty)、辅助单位(auxunitid)
        self.change_source = change_source
        # 是否改变过浮动单位数量（预留）
        self.change_flag = change_flag

    def validate(self):
        self.validate_required(self.material_id, 'material_id')
        self.validate_required(self.bill_type, 'bill_type')
        self.validate_required(self.unit, 'unit')
        self.validate_required(self.unit_type, 'unit_type')
        self.validate_required(self.coefficient, 'coefficient')
        self.validate_required(self.qty, 'qty')
        self.validate_required(self.aux_unit, 'aux_unit')
        self.validate_required(self.aux_unit_type, 'aux_unit_type')
        self.validate_required(self.aux_coefficient, 'aux_coefficient')
        self.validate_required(self.aux_qty, 'aux_qty')
        self.validate_required(self.change_source, 'change_source')
        self.validate_required(self.change_flag, 'change_flag')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.material_id is not None:
            result['materialid'] = self.material_id
        if self.bill_type is not None:
            result['billtypeid'] = self.bill_type
        if self.unit is not None:
            result['unit'] = self.unit
        if self.unit_type is not None:
            result['unittype'] = self.unit_type
        if self.coefficient is not None:
            result['coefficient'] = self.coefficient
        if self.qty is not None:
            result['qty'] = self.qty
        if self.aux_unit is not None:
            result['auxunitid'] = self.aux_unit
        if self.aux_unit_type is not None:
            result['auxunittype'] = self.aux_unit_type
        if self.aux_coefficient is not None:
            result['auxcoefficient'] = self.aux_coefficient
        if self.aux_qty is not None:
            result['auxqty'] = self.aux_qty
        if self.change_source is not None:
            result['changesource'] = self.change_source
        if self.change_flag is not None:
            result['changeflag'] = self.change_flag
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('materialid') is not None:
            self.material_id = m.get('materialid')
        if m.get('billtypeid') is not None:
            self.bill_type = m.get('billtypeid')
        if m.get('unit') is not None:
            self.unit = m.get('unit')
        if m.get('unittype') is not None:
            self.unit_type = m.get('unittype')
        if m.get('coefficient') is not None:
            self.coefficient = m.get('coefficient')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('auxunitid') is not None:
            self.aux_unit = m.get('auxunitid')
        if m.get('auxunittype') is not None:
            self.aux_unit_type = m.get('auxunittype')
        if m.get('auxcoefficient') is not None:
            self.aux_coefficient = m.get('auxcoefficient')
        if m.get('auxqty') is not None:
            self.aux_qty = m.get('auxqty')
        if m.get('changesource') is not None:
            self.change_source = m.get('changesource')
        if m.get('changeflag') is not None:
            self.change_flag = m.get('changeflag')
        return self


class MultiUnitCalRequest(TeaModel):
    def __init__(
        self,
        body: MultiUnitCalRequestBody = None,
    ):
        self.body = body
        # 商品多单位录入计算逻辑

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = MultiUnitCalRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CustomerDebitRequestBody(TeaModel):
    def __init__(
        self,
        currency: str = None,
        customer: str = None,
    ):
        # 部门ID
        self.currency = currency
        # 客户ID,格式：["xxx","xxx",...]
        self.customer = customer

    def validate(self):
        self.validate_required(self.customer, 'customer')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.currency is not None:
            result['currencyid'] = self.currency
        if self.customer is not None:
            result['customerid'] = self.customer
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('currencyid') is not None:
            self.currency = m.get('currencyid')
        if m.get('customerid') is not None:
            self.customer = m.get('customerid')
        return self


class CustomerDebitRequest(TeaModel):
    def __init__(
        self,
        body: CustomerDebitRequestBody = None,
    ):
        self.body = body
        # 查询客户上次的欠款和应收款余额

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = CustomerDebitRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaleBatchListRequestBody(TeaModel):
    def __init__(
        self,
        material: str = None,
        aux_prop: str = None,
        stock: str = None,
        sp_id: str = None,
        batch_no: str = None,
        is_zero_stock: bool = None,
    ):
        # 商品ID
        self.material = material
        # 商品辅助属性
        self.aux_prop = aux_prop
        # 仓库ID
        self.stock = stock
        # 仓位ID
        self.sp_id = sp_id
        # 批次编码
        self.batch_no = batch_no
        # 是否查询零库存或者负库存批次， true-是， false-否
        self.is_zero_stock = is_zero_stock

    def validate(self):
        self.validate_required(self.is_zero_stock, 'is_zero_stock')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.material is not None:
            result['materialid'] = self.material
        if self.aux_prop is not None:
            result['auxpropid'] = self.aux_prop
        if self.stock is not None:
            result['stockid'] = self.stock
        if self.sp_id is not None:
            result['spid'] = self.sp_id
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.is_zero_stock is not None:
            result['iszerostock'] = self.is_zero_stock
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('materialid') is not None:
            self.material = m.get('materialid')
        if m.get('auxpropid') is not None:
            self.aux_prop = m.get('auxpropid')
        if m.get('stockid') is not None:
            self.stock = m.get('stockid')
        if m.get('spid') is not None:
            self.sp_id = m.get('spid')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('iszerostock') is not None:
            self.is_zero_stock = m.get('iszerostock')
        return self


class SaleBatchListRequest(TeaModel):
    def __init__(
        self,
        body: SaleBatchListRequestBody = None,
    ):
        self.body = body
        # 查询商品批次列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = SaleBatchListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SalePriceForMaterial(TeaModel):
    def __init__(
        self,
        material: str = None,
        unit: str = None,
        bill_type: str = None,
        bill_date: str = None,
        customer: str = None,
        aux_prop: str = None,
        qty: str = None,
    ):
        # 商品ID
        self.material = material
        # 单位ID
        self.unit = unit
        # 单据类型
        self.bill_type = bill_type
        # 单据日期，格式：2019-0-01
        self.bill_date = bill_date
        # 客户ID
        self.customer = customer
        # 商品辅助属性ID；辅助属性商品必填
        self.aux_prop = aux_prop
        self.qty = qty

    def validate(self):
        self.validate_required(self.material, 'material')
        self.validate_required(self.unit, 'unit')
        self.validate_required(self.bill_type, 'bill_type')
        self.validate_required(self.bill_date, 'bill_date')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.material is not None:
            result['materialid'] = self.material
        if self.unit is not None:
            result['unitid'] = self.unit
        if self.bill_type is not None:
            result['billtypeId'] = self.bill_type
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.customer is not None:
            result['customerid'] = self.customer
        if self.aux_prop is not None:
            result['auxpropid'] = self.aux_prop
        if self.qty is not None:
            result['qty'] = self.qty
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('materialid') is not None:
            self.material = m.get('materialid')
        if m.get('unitid') is not None:
            self.unit = m.get('unitid')
        if m.get('billtypeId') is not None:
            self.bill_type = m.get('billtypeId')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('customerid') is not None:
            self.customer = m.get('customerid')
        if m.get('auxpropid') is not None:
            self.aux_prop = m.get('auxpropid')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        return self


class SalePriceForMaterialRequestBody(TeaModel):
    def __init__(
        self,
        data: List[SalePriceForMaterial] = None,
    ):
        self.data = data

    def validate(self):
        self.validate_required(self.data, 'data')
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = SalePriceForMaterial()
                self.data.append(temp_model.from_map(k))
        return self


class SalePriceForMaterialRequest(TeaModel):
    def __init__(
        self,
        body: SalePriceForMaterialRequestBody = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = SalePriceForMaterialRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SalePriceListRequestBody(TeaModel):
    def __init__(
        self,
        material: str = None,
        unit: str = None,
        bill_type: str = None,
        bill_date: str = None,
        aux_prop: List[str] = None,
        qty: List[str] = None,
        customer: str = None,
        supplier: str = None,
    ):
        # 商品ID
        self.material = material
        # 单位ID
        self.unit = unit
        # 单据类型
        self.bill_type = bill_type
        # 单据日期，格式：2019-0-01
        self.bill_date = bill_date
        # 商品辅助属性ID；辅助属性商品必填
        self.aux_prop = aux_prop
        self.qty = qty
        # 客户ID
        self.customer = customer
        # 供应商ID（采购类单据必填）
        self.supplier = supplier

    def validate(self):
        self.validate_required(self.material, 'material')
        self.validate_required(self.unit, 'unit')
        self.validate_required(self.bill_type, 'bill_type')
        self.validate_required(self.bill_date, 'bill_date')
        self.validate_required(self.aux_prop, 'aux_prop')
        self.validate_required(self.qty, 'qty')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.material is not None:
            result['materialid'] = self.material
        if self.unit is not None:
            result['unitid'] = self.unit
        if self.bill_type is not None:
            result['billtypeId'] = self.bill_type
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.aux_prop is not None:
            result['auxpropid'] = self.aux_prop
        if self.qty is not None:
            result['qty'] = self.qty
        if self.customer is not None:
            result['customerid'] = self.customer
        if self.supplier is not None:
            result['supplierid'] = self.supplier
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('materialid') is not None:
            self.material = m.get('materialid')
        if m.get('unitid') is not None:
            self.unit = m.get('unitid')
        if m.get('billtypeId') is not None:
            self.bill_type = m.get('billtypeId')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('auxpropid') is not None:
            self.aux_prop = m.get('auxpropid')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('customerid') is not None:
            self.customer = m.get('customerid')
        if m.get('supplierid') is not None:
            self.supplier = m.get('supplierid')
        return self


class SalePriceListRequest(TeaModel):
    def __init__(
        self,
        body: SalePriceListRequestBody = None,
    ):
        self.body = body
        # 查询商品价格策略

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = SalePriceListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaleAllPriceListRequestBody(TeaModel):
    def __init__(
        self,
        material: str = None,
        unit: str = None,
        bill_type: str = None,
        bill_date: str = None,
        customer: str = None,
        aux_prop: str = None,
        qty: str = None,
        barcode: str = None,
    ):
        # 商品ID
        self.material = material
        # 单位ID
        self.unit = unit
        # 单据类型
        self.bill_type = bill_type
        # 单据日期，格式：2019-0-01
        self.bill_date = bill_date
        # 客户ID
        self.customer = customer
        # 商品辅助属性ID；辅助属性商品必填
        self.aux_prop = aux_prop
        self.qty = qty
        # 如果商品有条码，必须传，否则取不到某些价格（如最近销售价）
        self.barcode = barcode

    def validate(self):
        self.validate_required(self.material, 'material')
        self.validate_required(self.unit, 'unit')
        self.validate_required(self.bill_type, 'bill_type')
        self.validate_required(self.bill_date, 'bill_date')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.material is not None:
            result['materialid'] = self.material
        if self.unit is not None:
            result['unitid'] = self.unit
        if self.bill_type is not None:
            result['billtypeId'] = self.bill_type
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.customer is not None:
            result['customerid'] = self.customer
        if self.aux_prop is not None:
            result['auxpropid'] = self.aux_prop
        if self.qty is not None:
            result['qty'] = self.qty
        if self.barcode is not None:
            result['barcode'] = self.barcode
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('materialid') is not None:
            self.material = m.get('materialid')
        if m.get('unitid') is not None:
            self.unit = m.get('unitid')
        if m.get('billtypeId') is not None:
            self.bill_type = m.get('billtypeId')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('customerid') is not None:
            self.customer = m.get('customerid')
        if m.get('auxpropid') is not None:
            self.aux_prop = m.get('auxpropid')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('barcode') is not None:
            self.barcode = m.get('barcode')
        return self


class SaleAllPriceListRequest(TeaModel):
    def __init__(
        self,
        body: SaleAllPriceListRequestBody = None,
    ):
        self.body = body
        # 获取商品的多种价格

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = SaleAllPriceListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MaterialStockRequestBody(TeaModel):
    def __init__(
        self,
        material: str = None,
        aux_prop: str = None,
        is_show_stock_position: bool = None,
        is_show_zero_qty: bool = None,
    ):
        # 商品ID
        self.material = material
        # 商品辅助属性ID；辅助属性商品必填
        self.aux_prop = aux_prop
        # 是否显示仓位，默认：false
        self.is_show_stock_position = is_show_stock_position
        # 是否显示零库存，默认：false
        self.is_show_zero_qty = is_show_zero_qty

    def validate(self):
        self.validate_required(self.material, 'material')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.material is not None:
            result['materialid'] = self.material
        if self.aux_prop is not None:
            result['auxpropid'] = self.aux_prop
        if self.is_show_stock_position is not None:
            result['isshowstockposition'] = self.is_show_stock_position
        if self.is_show_zero_qty is not None:
            result['isshowzeroimqty'] = self.is_show_zero_qty
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('materialid') is not None:
            self.material = m.get('materialid')
        if m.get('auxpropid') is not None:
            self.aux_prop = m.get('auxpropid')
        if m.get('isshowstockposition') is not None:
            self.is_show_stock_position = m.get('isshowstockposition')
        if m.get('isshowzeroimqty') is not None:
            self.is_show_zero_qty = m.get('isshowzeroimqty')
        return self


class MaterialStockRequest(TeaModel):
    def __init__(
        self,
        body: MaterialStockRequestBody = None,
    ):
        self.body = body
        # 查询商品库存分布

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = MaterialStockRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BatchInfoForMaterialRequestBody(TeaModel):
    def __init__(
        self,
        material: str = None,
        aux_prop: str = None,
        stock: str = None,
        sp_id: str = None,
    ):
        # 商品ID
        self.material = material
        # 商品辅助属性ID；辅助属性商品必填
        self.aux_prop = aux_prop
        # 仓库ID
        self.stock = stock
        # 仓位ID
        self.sp_id = sp_id

    def validate(self):
        self.validate_required(self.material, 'material')
        self.validate_required(self.stock, 'stock')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.material is not None:
            result['materialid'] = self.material
        if self.aux_prop is not None:
            result['auxpropid'] = self.aux_prop
        if self.stock is not None:
            result['stockid'] = self.stock
        if self.sp_id is not None:
            result['spid'] = self.sp_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('materialid') is not None:
            self.material = m.get('materialid')
        if m.get('auxpropid') is not None:
            self.aux_prop = m.get('auxpropid')
        if m.get('stockid') is not None:
            self.stock = m.get('stockid')
        if m.get('spid') is not None:
            self.sp_id = m.get('spid')
        return self


class BatchInfoForMaterialRequest(TeaModel):
    def __init__(
        self,
        body: BatchInfoForMaterialRequestBody = None,
    ):
        self.body = body
        # 根据系统参数查询商品批次信息

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = BatchInfoForMaterialRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class HomePageToDoRequestBody(TeaModel):
    def __init__(
        self,
        check_perm: bool = None,
        group: List[str] = None,
    ):
        # 是否进行功能权限校验，默认为false
        self.check_perm = check_perm
        # 查询分组；格式：["sal","pur"]；传[]查询所有
        self.group = group

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_perm is not None:
            result['checkperm'] = self.check_perm
        if self.group is not None:
            result['groupid'] = self.group
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('checkperm') is not None:
            self.check_perm = m.get('checkperm')
        if m.get('groupid') is not None:
            self.group = m.get('groupid')
        return self


class HomePageToDoRequest(TeaModel):
    def __init__(
        self,
        body: HomePageToDoRequestBody = None,
    ):
        self.body = body
        # 首页代办-全模块数据查询

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = HomePageToDoRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SpidInvListRequestBody(TeaModel):
    def __init__(
        self,
        stock_ids: List[str] = None,
        search: str = None,
        is_show_zero_im_qty: bool = None,
        material_ids: List[str] = None,
        show_packge: bool = None,
    ):
        # 仓库ID集合
        self.stock_ids = stock_ids
        # 模糊搜索，仓位名称、仓位编码
        self.search = search
        # 是否显示负库存，true：显示
        self.is_show_zero_im_qty = is_show_zero_im_qty
        # 商品id,传递则显示仓位对应商品的库存，否则显示仓位下所有商品的库存
        self.material_ids = material_ids
        # 值为true且materialids不为空时，返回商品对应库存的整件散包信息，默认false
        self.show_packge = show_packge

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.stock_ids is not None:
            result['stockids'] = self.stock_ids
        if self.search is not None:
            result['search'] = self.search
        if self.is_show_zero_im_qty is not None:
            result['isshowzeroimqty'] = self.is_show_zero_im_qty
        if self.material_ids is not None:
            result['materialids'] = self.material_ids
        if self.show_packge is not None:
            result['showpackge'] = self.show_packge
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('stockids') is not None:
            self.stock_ids = m.get('stockids')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('isshowzeroimqty') is not None:
            self.is_show_zero_im_qty = m.get('isshowzeroimqty')
        if m.get('materialids') is not None:
            self.material_ids = m.get('materialids')
        if m.get('showpackge') is not None:
            self.show_packge = m.get('showpackge')
        return self


class SpidInvListRequest(TeaModel):
    def __init__(
        self,
        body: SpidInvListRequestBody = None,
    ):
        self.body = body
        # 查询仓库下的仓位的即时库存列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = SpidInvListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvOperateRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_type: str = None,
        operate_type: str = None,
    ):
        # 单据ID
        self.id = id
        # 单据类型 其他入库单 inv_other_bill_inbound 其他出库单 inv_other_bill_outbound 移仓单inv_tfmove_bill_order 调拨入库 inv_tfin_bill_inbound 调拨出库 inv_tfout_bill_outbound
        self.bill_type = bill_type
        # 操作类型，传固定值 删除 delete 审核 audit 反审核 unaudit
        self.operate_type = operate_type

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.bill_type, 'bill_type')
        self.validate_required(self.operate_type, 'operate_type')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_type is not None:
            result['billtype'] = self.bill_type
        if self.operate_type is not None:
            result['operatetype'] = self.operate_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billtype') is not None:
            self.bill_type = m.get('billtype')
        if m.get('operatetype') is not None:
            self.operate_type = m.get('operatetype')
        return self


class InvOperateRequest(TeaModel):
    def __init__(
        self,
        body: InvOperateRequestBody = None,
    ):
        self.body = body
        # 仓存类单据（删除、审核、反审核）操作
        # 接口将停止维护，推荐使用：批量操作接口

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvOperateRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StockInvListRequestBody(TeaModel):
    def __init__(
        self,
        enable: str = None,
        search: str = None,
        is_show_zero_im_qty: bool = None,
        show_packge: bool = None,
        material_ids: List[str] = None,
        stockid: List[str] = None,
        groupid: str = None,
        page: int = None,
        page_size: int = None,
    ):
        # 可用状态，1：可用，0：禁用
        self.enable = enable
        # 模糊搜索-名称、编码
        self.search = search
        # 是否显示负库存，true：显示
        self.is_show_zero_im_qty = is_show_zero_im_qty
        # 值为true且materialids不为空时，返回商品对应库存的整件散包信息，默认false
        self.show_packge = show_packge
        # 商品id,传递则显示对应商品的库存，否则显示所有商品的库存
        self.material_ids = material_ids
        # 仓库id,传递则只返回指定仓库的库存
        self.stockid = stockid
        # 仓库类别ID
        self.groupid = groupid
        # 当前页（默认1）
        self.page = page
        # 每页显示条数（默认10，最大100），不传该字段表示不分页
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.enable is not None:
            result['enable'] = self.enable
        if self.search is not None:
            result['search'] = self.search
        if self.is_show_zero_im_qty is not None:
            result['isshowzeroimqty'] = self.is_show_zero_im_qty
        if self.show_packge is not None:
            result['showpackge'] = self.show_packge
        if self.material_ids is not None:
            result['materialids'] = self.material_ids
        if self.stockid is not None:
            result['stockid'] = self.stockid
        if self.groupid is not None:
            result['groupid'] = self.groupid
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('enable') is not None:
            self.enable = m.get('enable')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('isshowzeroimqty') is not None:
            self.is_show_zero_im_qty = m.get('isshowzeroimqty')
        if m.get('showpackge') is not None:
            self.show_packge = m.get('showpackge')
        if m.get('materialids') is not None:
            self.material_ids = m.get('materialids')
        if m.get('stockid') is not None:
            self.stockid = m.get('stockid')
        if m.get('groupid') is not None:
            self.groupid = m.get('groupid')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        return self


class StockInvListRequest(TeaModel):
    def __init__(
        self,
        body: StockInvListRequestBody = None,
    ):
        self.body = body
        # 查询仓库的即时库存列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = StockInvListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvOtherInMaterialEntity(TeaModel):
    def __init__(
        self,
        id: str = None,
        material_id: str = None,
        stock_id: str = None,
        sp_id: str = None,
        qty: str = None,
        base_qty: str = None,
        aux_qty: str = None,
        unit_id: str = None,
        base_unit_id: str = None,
        aux_unit_id: str = None,
        auxprop_id: str = None,
        aux_id_1: str = None,
        aux_id_2: str = None,
        aux_id_3: str = None,
        aux_id_4: str = None,
        aux_id_5: str = None,
        barcode: str = None,
        batch_no: str = None,
        proplace: str = None,
        proreg_no: str = None,
        prolicense: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_type: str = None,
        kf_period: str = None,
        sn: str = None,
        sn_list_id: str = None,
        sn_list: str = None,
        price: str = None,
        cost: str = None,
        unit_cost: str = None,
        comment: str = None,
        src_bill_no: str = None,
        src_bill_type_id: str = None,
        src_inter_id: str = None,
        src_bill_date: str = None,
        src_seq: str = None,
        src_entry_id: str = None,
    ):
        # 分录id，新增不传该字段，修改必传
        self.id = id
        # 商品id
        self.material_id = material_id
        # 仓库id
        self.stock_id = stock_id
        # 仓位id
        self.sp_id = sp_id
        # 数量
        self.qty = qty
        # 基本数量
        self.base_qty = base_qty
        # 辅助数量
        self.aux_qty = aux_qty
        # 单位id
        self.unit_id = unit_id
        # 基本单位id
        self.base_unit_id = base_unit_id
        # 辅助单位id
        self.aux_unit_id = aux_unit_id
        # 辅助属性分录id(辅助属性商品必填)
        self.auxprop_id = auxprop_id
        # 辅助属性分类对应的辅助属性1ID(辅助属性商品必填)
        self.aux_id_1 = aux_id_1
        # 辅助属性分类对应的辅助属性2ID(辅助属性商品必填)
        self.aux_id_2 = aux_id_2
        # 辅助属性分类对应的辅助属性3ID(辅助属性商品必填)
        self.aux_id_3 = aux_id_3
        # 辅助属性分类对应的辅助属性4ID(辅助属性商品必填)
        self.aux_id_4 = aux_id_4
        # 辅助属性分类对应的辅助属性5ID(辅助属性商品必填)
        self.aux_id_5 = aux_id_5
        # 条形码
        self.barcode = barcode
        # 批次号 (批次商品必填)
        self.batch_no = batch_no
        # 产地
        self.proplace = proplace
        # 注册证号
        self.proreg_no = proreg_no
        # 生产许可证号
        self.prolicense = prolicense
        # 生产日期
        self.kf_date = kf_date
        # 有效日期
        self.valid_date = valid_date
        # 保质期类型，1：天，2：月，3：年
        self.kf_type = kf_type
        # 保质期天数
        self.kf_period = kf_period
        # 序列号
        self.sn = sn
        # 序列号流转id；单据新增后会在单据详情中带回这个字段信息，序列号商品修改时必填
        self.sn_list_id = sn_list_id
        # 序列号 格式：001:备注1;002:备注2 （序列号:序列号备注 多个序列号以英文分号字符;分隔）,序列号商品必填
        self.sn_list = sn_list
        # 单价
        self.price = price
        # 入库成本
        self.cost = cost
        # 入库单位成本
        self.unit_cost = unit_cost
        # 行备注
        self.comment = comment
        # 源单编码
        self.src_bill_no = src_bill_no
        # 源单类型
        self.src_bill_type_id = src_bill_type_id
        # 源单内码
        self.src_inter_id = src_inter_id
        # 源单日期
        self.src_bill_date = src_bill_date
        # 源单行号
        self.src_seq = src_seq
        # 源单分录内码
        self.src_entry_id = src_entry_id

    def validate(self):
        self.validate_required(self.material_id, 'material_id')
        self.validate_required(self.stock_id, 'stock_id')
        self.validate_required(self.qty, 'qty')
        self.validate_required(self.base_qty, 'base_qty')
        self.validate_required(self.aux_qty, 'aux_qty')
        self.validate_required(self.unit_id, 'unit_id')
        self.validate_required(self.base_unit_id, 'base_unit_id')
        self.validate_required(self.aux_unit_id, 'aux_unit_id')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.material_id is not None:
            result['materialid_id'] = self.material_id
        if self.stock_id is not None:
            result['stockid_id'] = self.stock_id
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.qty is not None:
            result['qty'] = self.qty
        if self.base_qty is not None:
            result['baseqty'] = self.base_qty
        if self.aux_qty is not None:
            result['auxqty'] = self.aux_qty
        if self.unit_id is not None:
            result['unit_id'] = self.unit_id
        if self.base_unit_id is not None:
            result['baseunit_id'] = self.base_unit_id
        if self.aux_unit_id is not None:
            result['auxunitid_id'] = self.aux_unit_id
        if self.auxprop_id is not None:
            result['auxpropid_id'] = self.auxprop_id
        if self.aux_id_1 is not None:
            result['auxid1_id'] = self.aux_id_1
        if self.aux_id_2 is not None:
            result['auxid2_id'] = self.aux_id_2
        if self.aux_id_3 is not None:
            result['auxid3_id'] = self.aux_id_3
        if self.aux_id_4 is not None:
            result['auxid4_id'] = self.aux_id_4
        if self.aux_id_5 is not None:
            result['auxid5_id'] = self.aux_id_5
        if self.barcode is not None:
            result['auxid5_id'] = self.barcode
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.proplace is not None:
            result['proplace'] = self.proplace
        if self.proreg_no is not None:
            result['proregno'] = self.proreg_no
        if self.prolicense is not None:
            result['prolicense'] = self.prolicense
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.sn is not None:
            result['sn'] = self.sn
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.sn_list is not None:
            result['sn_list'] = self.sn_list
        if self.price is not None:
            result['price'] = self.price
        if self.cost is not None:
            result['cost'] = self.cost
        if self.unit_cost is not None:
            result['unitcost'] = self.unit_cost
        if self.comment is not None:
            result['comment'] = self.comment
        if self.src_bill_no is not None:
            result['srcbillno'] = self.src_bill_no
        if self.src_bill_type_id is not None:
            result['srcbilltypeid_id'] = self.src_bill_type_id
        if self.src_inter_id is not None:
            result['srcinterid'] = self.src_inter_id
        if self.src_bill_date is not None:
            result['src_billdate'] = self.src_bill_date
        if self.src_seq is not None:
            result['srcseq'] = self.src_seq
        if self.src_entry_id is not None:
            result['srcentryid'] = self.src_entry_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('materialid_id') is not None:
            self.material_id = m.get('materialid_id')
        if m.get('stockid_id') is not None:
            self.stock_id = m.get('stockid_id')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('baseqty') is not None:
            self.base_qty = m.get('baseqty')
        if m.get('auxqty') is not None:
            self.aux_qty = m.get('auxqty')
        if m.get('unit_id') is not None:
            self.unit_id = m.get('unit_id')
        if m.get('baseunit_id') is not None:
            self.base_unit_id = m.get('baseunit_id')
        if m.get('auxunitid_id') is not None:
            self.aux_unit_id = m.get('auxunitid_id')
        if m.get('auxpropid_id') is not None:
            self.auxprop_id = m.get('auxpropid_id')
        if m.get('auxid1_id') is not None:
            self.aux_id_1 = m.get('auxid1_id')
        if m.get('auxid2_id') is not None:
            self.aux_id_2 = m.get('auxid2_id')
        if m.get('auxid3_id') is not None:
            self.aux_id_3 = m.get('auxid3_id')
        if m.get('auxid4_id') is not None:
            self.aux_id_4 = m.get('auxid4_id')
        if m.get('auxid5_id') is not None:
            self.aux_id_5 = m.get('auxid5_id')
        if m.get('auxid5_id') is not None:
            self.barcode = m.get('auxid5_id')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.proplace = m.get('proplace')
        if m.get('proregno') is not None:
            self.proreg_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.prolicense = m.get('prolicense')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('sn') is not None:
            self.sn = m.get('sn')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('sn_list') is not None:
            self.sn_list = m.get('sn_list')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('unitcost') is not None:
            self.unit_cost = m.get('unitcost')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('srcbillno') is not None:
            self.src_bill_no = m.get('srcbillno')
        if m.get('srcbilltypeid_id') is not None:
            self.src_bill_type_id = m.get('srcbilltypeid_id')
        if m.get('srcinterid') is not None:
            self.src_inter_id = m.get('srcinterid')
        if m.get('src_billdate') is not None:
            self.src_bill_date = m.get('src_billdate')
        if m.get('srcseq') is not None:
            self.src_seq = m.get('srcseq')
        if m.get('srcentryid') is not None:
            self.src_entry_id = m.get('srcentryid')
        return self


class InvOtherInSaveRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_date: str = None,
        trans_type_id: str = None,
        remark: str = None,
        dept_id: str = None,
        emp_id: str = None,
        supplier_id: str = None,
        customer_id: str = None,
        contact_info: str = None,
        currency_id: str = None,
        material_entity: List[InvOtherInMaterialEntity] = None,
    ):
        # 单据ID，修改单据时必填，新增不传该字段
        self.id = id
        # 单据日期
        self.bill_date = bill_date
        # 业务类型id
        self.trans_type_id = trans_type_id
        # 备注
        self.remark = remark
        # 部门id
        self.dept_id = dept_id
        # 业务员id
        self.emp_id = emp_id
        # 供应商id
        self.supplier_id = supplier_id
        # 客户id
        self.customer_id = customer_id
        # 联系信息
        self.contact_info = contact_info
        # 币别id
        self.currency_id = currency_id
        # 商品分录
        self.material_entity = material_entity

    def validate(self):
        if self.material_entity:
            for k in self.material_entity:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.trans_type_id is not None:
            result['transtype_id'] = self.trans_type_id
        if self.remark is not None:
            result['remark'] = self.remark
        if self.dept_id is not None:
            result['deptid_id'] = self.dept_id
        if self.emp_id is not None:
            result['empid_id'] = self.emp_id
        if self.supplier_id is not None:
            result['supplierid_id'] = self.supplier_id
        if self.customer_id is not None:
            result['customerid_id'] = self.customer_id
        if self.contact_info is not None:
            result['contact_info'] = self.contact_info
        if self.currency_id is not None:
            result['currencyid_id'] = self.currency_id
        result['material_entity'] = []
        if self.material_entity is not None:
            for k in self.material_entity:
                result['material_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('transtype_id') is not None:
            self.trans_type_id = m.get('transtype_id')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('deptid_id') is not None:
            self.dept_id = m.get('deptid_id')
        if m.get('empid_id') is not None:
            self.emp_id = m.get('empid_id')
        if m.get('supplierid_id') is not None:
            self.supplier_id = m.get('supplierid_id')
        if m.get('customerid_id') is not None:
            self.customer_id = m.get('customerid_id')
        if m.get('contact_info') is not None:
            self.contact_info = m.get('contact_info')
        if m.get('currencyid_id') is not None:
            self.currency_id = m.get('currencyid_id')
        self.material_entity = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = InvOtherInMaterialEntity()
                self.material_entity.append(temp_model.from_map(k))
        return self


class InvOtherInSaveRequest(TeaModel):
    def __init__(
        self,
        body: InvOtherInSaveRequestBody = None,
    ):
        self.body = body
        # 其他入库单商品分录

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvOtherInSaveRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvOtherOutInListRequestBody(TeaModel):
    def __init__(
        self,
        dept_id: List[str] = None,
        supplier_id: List[str] = None,
        customer_id: List[str] = None,
        stock_id: List[str] = None,
        trans_type: str = None,
        bill_status: str = None,
        start_date: str = None,
        end_date: str = None,
        begin_date: str = None,
        expire_date: str = None,
        start_time: int = None,
        end_time: int = None,
        begin_time: int = None,
        expire_time: int = None,
        start_bill_date: str = None,
        end_bill_date: str = None,
        select_fields: str = None,
        search: str = None,
        page: int = None,
        page_size: int = None,
        total_fields: str = None,
    ):
        # 部门id
        self.dept_id = dept_id
        # 供应商id
        self.supplier_id = supplier_id
        # 客户id
        self.customer_id = customer_id
        # 仓库id
        self.stock_id = stock_id
        # 业务类型id
        self.trans_type = trans_type
        # 单据状态（所有：“”，已审核：“C”，未审核：“Z”）
        self.bill_status = bill_status
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.start_date = start_date
        # 结束日期（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.end_date = end_date
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），修改日期
        self.begin_date = begin_date
        # 结束日期（格式：“yyyy-MM-dd”，为空表示不过滤），修改日期
        self.expire_date = expire_date
        # 开始时间（格式：“时间戳”，-1表示不过滤），创建时间
        self.start_time = start_time
        # 结束时间（格式：“时间戳”，-1表示不过滤），创建时间
        self.end_time = end_time
        # 开始时间（格式：“时间戳”，-1表示不过滤），修改时间
        self.begin_time = begin_time
        # 结束时间（格式：“时间戳”，-1表示不过滤），修改时间
        self.expire_time = expire_time
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），单据日期
        self.start_bill_date = start_bill_date
        # 结束日期（格式：“yyyy-MM-dd”，为空表示不过滤），单据日期
        self.end_bill_date = end_bill_date
        # 自定义查询字段，如（"material_entity.materialid.id"）
        self.select_fields = select_fields
        # 模糊搜索，支持客户名称、单据编码
        self.search = search
        # 当前页（默认1）
        self.page = page
        # 每页显示条数，（默认10，最大值100）
        self.page_size = page_size
        # 自定义合计字段，合计的值为符合条件的合计，和分页无关，多个字段用英文逗号隔开，如：cost
        self.total_fields = total_fields

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept_id is not None:
            result['deptid'] = self.dept_id
        if self.supplier_id is not None:
            result['supplierid'] = self.supplier_id
        if self.customer_id is not None:
            result['customerid'] = self.customer_id
        if self.stock_id is not None:
            result['stockid'] = self.stock_id
        if self.trans_type is not None:
            result['transtype'] = self.trans_type
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.begin_date is not None:
            result['begindate'] = self.begin_date
        if self.expire_date is not None:
            result['expiredate'] = self.expire_date
        if self.start_time is not None:
            result['starttime'] = self.start_time
        if self.end_time is not None:
            result['endtime'] = self.end_time
        if self.begin_time is not None:
            result['begintime'] = self.begin_time
        if self.expire_time is not None:
            result['expiretime'] = self.expire_time
        if self.start_bill_date is not None:
            result['startbilldate'] = self.start_bill_date
        if self.end_bill_date is not None:
            result['endbilldate'] = self.end_bill_date
        if self.select_fields is not None:
            result['selectfields'] = self.select_fields
        if self.search is not None:
            result['search'] = self.search
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        if self.total_fields is not None:
            result['totalfields'] = self.total_fields
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('deptid') is not None:
            self.dept_id = m.get('deptid')
        if m.get('supplierid') is not None:
            self.supplier_id = m.get('supplierid')
        if m.get('customerid') is not None:
            self.customer_id = m.get('customerid')
        if m.get('stockid') is not None:
            self.stock_id = m.get('stockid')
        if m.get('transtype') is not None:
            self.trans_type = m.get('transtype')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('begindate') is not None:
            self.begin_date = m.get('begindate')
        if m.get('expiredate') is not None:
            self.expire_date = m.get('expiredate')
        if m.get('starttime') is not None:
            self.start_time = m.get('starttime')
        if m.get('endtime') is not None:
            self.end_time = m.get('endtime')
        if m.get('begintime') is not None:
            self.begin_time = m.get('begintime')
        if m.get('expiretime') is not None:
            self.expire_time = m.get('expiretime')
        if m.get('startbilldate') is not None:
            self.start_bill_date = m.get('startbilldate')
        if m.get('endbilldate') is not None:
            self.end_bill_date = m.get('endbilldate')
        if m.get('selectfields') is not None:
            self.select_fields = m.get('selectfields')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        if m.get('totalfields') is not None:
            self.total_fields = m.get('totalfields')
        return self


class InvOtherOutInListRequest(TeaModel):
    def __init__(
        self,
        body: InvOtherOutInListRequestBody = None,
    ):
        self.body = body
        # 其他入库单列表查询

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvOtherOutInListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvOtherInMaterialDetail(TeaModel):
    def __init__(
        self,
        seq: str = None,
        id: str = None,
        picture: str = None,
        material_id: str = None,
        material_name: str = None,
        material_number: str = None,
        material_is_multi_unit: bool = None,
        material_is_serial: bool = None,
        material_is_asstattr: bool = None,
        material_is_kfperiod: bool = None,
        material_is_batch: bool = None,
        material_model: str = None,
        stock_id: str = None,
        stock_name: str = None,
        stock_number: str = None,
        stock_is_allow_freight: str = None,
        sp_id: str = None,
        sp_name: str = None,
        sp_number: str = None,
        auxprop_id: str = None,
        auxprop_name: str = None,
        auxprop_number: str = None,
        aux_id_1: str = None,
        aux_id_1name: str = None,
        aux_id_1number: str = None,
        aux_id_2: str = None,
        aux_id_2name: str = None,
        aux_id_2number: str = None,
        aux_id_3: str = None,
        aux_id_3name: str = None,
        aux_id_3number: str = None,
        aux_id_4: str = None,
        aux_id_4name: str = None,
        aux_id_4number: str = None,
        aux_id_5: str = None,
        aux_id_5name: str = None,
        aux_id_5number: str = None,
        barcode: str = None,
        batch_no: str = None,
        proplace: str = None,
        proreg_no: str = None,
        prolicense: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_type: str = None,
        kf_period: str = None,
        sn: str = None,
        sn_list_id: str = None,
        base_unit_id: str = None,
        base_unit_name: str = None,
        base_unit_number: str = None,
        unit_id: str = None,
        unit_name: str = None,
        unit_number: str = None,
        aux_unit_id: str = None,
        aux_unit_name: str = None,
        aux_unit_number: str = None,
        conversion_rate: str = None,
        qty: str = None,
        inv_qty: str = None,
        base_qty: str = None,
        inv_base_qty: str = None,
        aux_qty: str = None,
        deffloat_qty: str = None,
        aux_coefficient: str = None,
        coefficient: str = None,
        price: str = None,
        cost: str = None,
        unit_cost: str = None,
        comment: str = None,
        src_bill_no: str = None,
        src_bill_type_id: str = None,
        src_bill_type_name: str = None,
        src_bill_type_number: str = None,
        src_inter_id: str = None,
        src_bill_date: str = None,
        src_seq: str = None,
        src_entry_id: str = None,
    ):
        # 分录序号
        self.seq = seq
        # 分录ID
        self.id = id
        # 图片url
        self.picture = picture
        # 商品id
        self.material_id = material_id
        # 商品名称
        self.material_name = material_name
        # 商品编码
        self.material_number = material_number
        # 商品是否多单位
        self.material_is_multi_unit = material_is_multi_unit
        # 商品是否序列号
        self.material_is_serial = material_is_serial
        # 商品是否启用辅助属性
        self.material_is_asstattr = material_is_asstattr
        # 商品是否开启保质期
        self.material_is_kfperiod = material_is_kfperiod
        # 商品是否开启批次
        self.material_is_batch = material_is_batch
        # 商品规格
        self.material_model = material_model
        # 仓库id
        self.stock_id = stock_id
        # 仓库名称
        self.stock_name = stock_name
        # 仓库编码
        self.stock_number = stock_number
        # 仓库启用仓位管理
        self.stock_is_allow_freight = stock_is_allow_freight
        # 仓位id
        self.sp_id = sp_id
        # 仓位名称
        self.sp_name = sp_name
        # 仓位编码
        self.sp_number = sp_number
        # 辅助属性id
        self.auxprop_id = auxprop_id
        # 辅助属性名称
        self.auxprop_name = auxprop_name
        # 辅助属性编码
        self.auxprop_number = auxprop_number
        # 辅助属性1id
        self.aux_id_1 = aux_id_1
        # 辅助属性1名称
        self.aux_id_1name = aux_id_1name
        # 辅助属性1编码
        self.aux_id_1number = aux_id_1number
        # 辅助属性2id
        self.aux_id_2 = aux_id_2
        # 辅助属性2名称
        self.aux_id_2name = aux_id_2name
        # 辅助属性2编码
        self.aux_id_2number = aux_id_2number
        # 辅助属性3id
        self.aux_id_3 = aux_id_3
        # 辅助属性3名称
        self.aux_id_3name = aux_id_3name
        # 辅助属性3编码
        self.aux_id_3number = aux_id_3number
        # 辅助属性4id
        self.aux_id_4 = aux_id_4
        # 辅助属性4名称
        self.aux_id_4name = aux_id_4name
        # 辅助属性4编码
        self.aux_id_4number = aux_id_4number
        # 辅助属性5id
        self.aux_id_5 = aux_id_5
        # 辅助属性5名称
        self.aux_id_5name = aux_id_5name
        # 辅助属性5编码
        self.aux_id_5number = aux_id_5number
        # 条形码
        self.barcode = barcode
        # 批次号
        self.batch_no = batch_no
        # 产地
        self.proplace = proplace
        # 注册证号
        self.proreg_no = proreg_no
        # 生产许可证号
        self.prolicense = prolicense
        # 生产日期
        self.kf_date = kf_date
        # 有效日期
        self.valid_date = valid_date
        # 保质期类型，1：天，2：月，3：年
        self.kf_type = kf_type
        # 保质期天数
        self.kf_period = kf_period
        # 序列号
        self.sn = sn
        # 序列号流转ID
        self.sn_list_id = sn_list_id
        # 基本单位id
        self.base_unit_id = base_unit_id
        # 基本单位名称
        self.base_unit_name = base_unit_name
        # 基本单位编码
        self.base_unit_number = base_unit_number
        # 单位id
        self.unit_id = unit_id
        # 单位名称
        self.unit_name = unit_name
        # 单位编码
        self.unit_number = unit_number
        # 辅助单位id
        self.aux_unit_id = aux_unit_id
        # 辅助单位名称
        self.aux_unit_name = aux_unit_name
        # 辅助单位编码
        self.aux_unit_number = aux_unit_number
        # 换算公式
        self.conversion_rate = conversion_rate
        # 数量
        self.qty = qty
        # 库存数量
        self.inv_qty = inv_qty
        # 基本数量
        self.base_qty = base_qty
        # 基本库存数量
        self.inv_base_qty = inv_base_qty
        # 辅助单位数量
        self.aux_qty = aux_qty
        # 辅助基本数量
        self.deffloat_qty = deffloat_qty
        # 辅助换算率
        self.aux_coefficient = aux_coefficient
        # 换算率
        self.coefficient = coefficient
        # 单价
        self.price = price
        # 入库成本
        self.cost = cost
        # 入库单位成本
        self.unit_cost = unit_cost
        # 行备注
        self.comment = comment
        # 源单编号
        self.src_bill_no = src_bill_no
        # 源单类型id
        self.src_bill_type_id = src_bill_type_id
        # 源单类型名称
        self.src_bill_type_name = src_bill_type_name
        # 源单类型编码
        self.src_bill_type_number = src_bill_type_number
        # 源单内码
        self.src_inter_id = src_inter_id
        # 源单日期
        self.src_bill_date = src_bill_date
        # 源单行号
        self.src_seq = src_seq
        # 源单分录内码
        self.src_entry_id = src_entry_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.seq is not None:
            result['seq'] = self.seq
        if self.id is not None:
            result['id'] = self.id
        if self.picture is not None:
            result['picture'] = self.picture
        if self.material_id is not None:
            result['materialid_id'] = self.material_id
        if self.material_name is not None:
            result['materialid_name'] = self.material_name
        if self.material_number is not None:
            result['materialid_number'] = self.material_number
        if self.material_is_multi_unit is not None:
            result['materialid_ismulti_unit'] = self.material_is_multi_unit
        if self.material_is_serial is not None:
            result['materialid_isserial'] = self.material_is_serial
        if self.material_is_asstattr is not None:
            result['materialid_isasstattr'] = self.material_is_asstattr
        if self.material_is_kfperiod is not None:
            result['materialid_iskfperiod'] = self.material_is_kfperiod
        if self.material_is_batch is not None:
            result['materialid_isbatch'] = self.material_is_batch
        if self.material_model is not None:
            result['materialid_model'] = self.material_model
        if self.stock_id is not None:
            result['stockid_id'] = self.stock_id
        if self.stock_name is not None:
            result['stockid_name'] = self.stock_name
        if self.stock_number is not None:
            result['stockid_number'] = self.stock_number
        if self.stock_is_allow_freight is not None:
            result['stockid_isallowfreight'] = self.stock_is_allow_freight
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.sp_name is not None:
            result['spid_name'] = self.sp_name
        if self.sp_number is not None:
            result['spid_number'] = self.sp_number
        if self.auxprop_id is not None:
            result['auxpropid_id'] = self.auxprop_id
        if self.auxprop_name is not None:
            result['auxpropid_name'] = self.auxprop_name
        if self.auxprop_number is not None:
            result['auxpropid_number'] = self.auxprop_number
        if self.aux_id_1 is not None:
            result['auxid1_id'] = self.aux_id_1
        if self.aux_id_1name is not None:
            result['auxid1_name'] = self.aux_id_1name
        if self.aux_id_1number is not None:
            result['auxid1_number'] = self.aux_id_1number
        if self.aux_id_2 is not None:
            result['auxid2_id'] = self.aux_id_2
        if self.aux_id_2name is not None:
            result['auxid2_name'] = self.aux_id_2name
        if self.aux_id_2number is not None:
            result['auxid2_number'] = self.aux_id_2number
        if self.aux_id_3 is not None:
            result['auxid3_id'] = self.aux_id_3
        if self.aux_id_3name is not None:
            result['auxid3_name'] = self.aux_id_3name
        if self.aux_id_3number is not None:
            result['auxid3_number'] = self.aux_id_3number
        if self.aux_id_4 is not None:
            result['auxid4_id'] = self.aux_id_4
        if self.aux_id_4name is not None:
            result['auxid4_name'] = self.aux_id_4name
        if self.aux_id_4number is not None:
            result['auxid4_number'] = self.aux_id_4number
        if self.aux_id_5 is not None:
            result['auxid5_id'] = self.aux_id_5
        if self.aux_id_5name is not None:
            result['auxid5_name'] = self.aux_id_5name
        if self.aux_id_5number is not None:
            result['auxid5_number'] = self.aux_id_5number
        if self.barcode is not None:
            result['barcode'] = self.barcode
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.proplace is not None:
            result['proplace'] = self.proplace
        if self.proreg_no is not None:
            result['proregno'] = self.proreg_no
        if self.prolicense is not None:
            result['prolicense'] = self.prolicense
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.sn is not None:
            result['sn'] = self.sn
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.base_unit_id is not None:
            result['baseunit_id'] = self.base_unit_id
        if self.base_unit_name is not None:
            result['baseunit_name'] = self.base_unit_name
        if self.base_unit_number is not None:
            result['baseunit_number'] = self.base_unit_number
        if self.unit_id is not None:
            result['unit_id'] = self.unit_id
        if self.unit_name is not None:
            result['unit_name'] = self.unit_name
        if self.unit_number is not None:
            result['unit_number'] = self.unit_number
        if self.aux_unit_id is not None:
            result['auxunitid_id'] = self.aux_unit_id
        if self.aux_unit_name is not None:
            result['auxunitid_name'] = self.aux_unit_name
        if self.aux_unit_number is not None:
            result['auxunitid_number'] = self.aux_unit_number
        if self.conversion_rate is not None:
            result['conversionrate'] = self.conversion_rate
        if self.qty is not None:
            result['qty'] = self.qty
        if self.inv_qty is not None:
            result['inv_qty'] = self.inv_qty
        if self.base_qty is not None:
            result['baseqty'] = self.base_qty
        if self.inv_base_qty is not None:
            result['inv_baseqty'] = self.inv_base_qty
        if self.aux_qty is not None:
            result['auxqty'] = self.aux_qty
        if self.deffloat_qty is not None:
            result['deffloatqty'] = self.deffloat_qty
        if self.aux_coefficient is not None:
            result['auxcoefficient'] = self.aux_coefficient
        if self.coefficient is not None:
            result['coefficient'] = self.coefficient
        if self.price is not None:
            result['price'] = self.price
        if self.cost is not None:
            result['cost'] = self.cost
        if self.unit_cost is not None:
            result['unitcost'] = self.unit_cost
        if self.comment is not None:
            result['comment'] = self.comment
        if self.src_bill_no is not None:
            result['srcbillno'] = self.src_bill_no
        if self.src_bill_type_id is not None:
            result['srcbilltypeid_id'] = self.src_bill_type_id
        if self.src_bill_type_name is not None:
            result['srcbilltypeid_name'] = self.src_bill_type_name
        if self.src_bill_type_number is not None:
            result['srcbilltypeid_number'] = self.src_bill_type_number
        if self.src_inter_id is not None:
            result['srcinterid'] = self.src_inter_id
        if self.src_bill_date is not None:
            result['src_billdate'] = self.src_bill_date
        if self.src_seq is not None:
            result['srcseq'] = self.src_seq
        if self.src_entry_id is not None:
            result['srcentryid'] = self.src_entry_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('seq') is not None:
            self.seq = m.get('seq')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('picture') is not None:
            self.picture = m.get('picture')
        if m.get('materialid_id') is not None:
            self.material_id = m.get('materialid_id')
        if m.get('materialid_name') is not None:
            self.material_name = m.get('materialid_name')
        if m.get('materialid_number') is not None:
            self.material_number = m.get('materialid_number')
        if m.get('materialid_ismulti_unit') is not None:
            self.material_is_multi_unit = m.get('materialid_ismulti_unit')
        if m.get('materialid_isserial') is not None:
            self.material_is_serial = m.get('materialid_isserial')
        if m.get('materialid_isasstattr') is not None:
            self.material_is_asstattr = m.get('materialid_isasstattr')
        if m.get('materialid_iskfperiod') is not None:
            self.material_is_kfperiod = m.get('materialid_iskfperiod')
        if m.get('materialid_isbatch') is not None:
            self.material_is_batch = m.get('materialid_isbatch')
        if m.get('materialid_model') is not None:
            self.material_model = m.get('materialid_model')
        if m.get('stockid_id') is not None:
            self.stock_id = m.get('stockid_id')
        if m.get('stockid_name') is not None:
            self.stock_name = m.get('stockid_name')
        if m.get('stockid_number') is not None:
            self.stock_number = m.get('stockid_number')
        if m.get('stockid_isallowfreight') is not None:
            self.stock_is_allow_freight = m.get('stockid_isallowfreight')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('spid_name') is not None:
            self.sp_name = m.get('spid_name')
        if m.get('spid_number') is not None:
            self.sp_number = m.get('spid_number')
        if m.get('auxpropid_id') is not None:
            self.auxprop_id = m.get('auxpropid_id')
        if m.get('auxpropid_name') is not None:
            self.auxprop_name = m.get('auxpropid_name')
        if m.get('auxpropid_number') is not None:
            self.auxprop_number = m.get('auxpropid_number')
        if m.get('auxid1_id') is not None:
            self.aux_id_1 = m.get('auxid1_id')
        if m.get('auxid1_name') is not None:
            self.aux_id_1name = m.get('auxid1_name')
        if m.get('auxid1_number') is not None:
            self.aux_id_1number = m.get('auxid1_number')
        if m.get('auxid2_id') is not None:
            self.aux_id_2 = m.get('auxid2_id')
        if m.get('auxid2_name') is not None:
            self.aux_id_2name = m.get('auxid2_name')
        if m.get('auxid2_number') is not None:
            self.aux_id_2number = m.get('auxid2_number')
        if m.get('auxid3_id') is not None:
            self.aux_id_3 = m.get('auxid3_id')
        if m.get('auxid3_name') is not None:
            self.aux_id_3name = m.get('auxid3_name')
        if m.get('auxid3_number') is not None:
            self.aux_id_3number = m.get('auxid3_number')
        if m.get('auxid4_id') is not None:
            self.aux_id_4 = m.get('auxid4_id')
        if m.get('auxid4_name') is not None:
            self.aux_id_4name = m.get('auxid4_name')
        if m.get('auxid4_number') is not None:
            self.aux_id_4number = m.get('auxid4_number')
        if m.get('auxid5_id') is not None:
            self.aux_id_5 = m.get('auxid5_id')
        if m.get('auxid5_name') is not None:
            self.aux_id_5name = m.get('auxid5_name')
        if m.get('auxid5_number') is not None:
            self.aux_id_5number = m.get('auxid5_number')
        if m.get('barcode') is not None:
            self.barcode = m.get('barcode')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.proplace = m.get('proplace')
        if m.get('proregno') is not None:
            self.proreg_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.prolicense = m.get('prolicense')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('sn') is not None:
            self.sn = m.get('sn')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('baseunit_id') is not None:
            self.base_unit_id = m.get('baseunit_id')
        if m.get('baseunit_name') is not None:
            self.base_unit_name = m.get('baseunit_name')
        if m.get('baseunit_number') is not None:
            self.base_unit_number = m.get('baseunit_number')
        if m.get('unit_id') is not None:
            self.unit_id = m.get('unit_id')
        if m.get('unit_name') is not None:
            self.unit_name = m.get('unit_name')
        if m.get('unit_number') is not None:
            self.unit_number = m.get('unit_number')
        if m.get('auxunitid_id') is not None:
            self.aux_unit_id = m.get('auxunitid_id')
        if m.get('auxunitid_name') is not None:
            self.aux_unit_name = m.get('auxunitid_name')
        if m.get('auxunitid_number') is not None:
            self.aux_unit_number = m.get('auxunitid_number')
        if m.get('conversionrate') is not None:
            self.conversion_rate = m.get('conversionrate')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('inv_qty') is not None:
            self.inv_qty = m.get('inv_qty')
        if m.get('baseqty') is not None:
            self.base_qty = m.get('baseqty')
        if m.get('inv_baseqty') is not None:
            self.inv_base_qty = m.get('inv_baseqty')
        if m.get('auxqty') is not None:
            self.aux_qty = m.get('auxqty')
        if m.get('deffloatqty') is not None:
            self.deffloat_qty = m.get('deffloatqty')
        if m.get('auxcoefficient') is not None:
            self.aux_coefficient = m.get('auxcoefficient')
        if m.get('coefficient') is not None:
            self.coefficient = m.get('coefficient')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('unitcost') is not None:
            self.unit_cost = m.get('unitcost')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('srcbillno') is not None:
            self.src_bill_no = m.get('srcbillno')
        if m.get('srcbilltypeid_id') is not None:
            self.src_bill_type_id = m.get('srcbilltypeid_id')
        if m.get('srcbilltypeid_name') is not None:
            self.src_bill_type_name = m.get('srcbilltypeid_name')
        if m.get('srcbilltypeid_number') is not None:
            self.src_bill_type_number = m.get('srcbilltypeid_number')
        if m.get('srcinterid') is not None:
            self.src_inter_id = m.get('srcinterid')
        if m.get('src_billdate') is not None:
            self.src_bill_date = m.get('src_billdate')
        if m.get('srcseq') is not None:
            self.src_seq = m.get('srcseq')
        if m.get('srcentryid') is not None:
            self.src_entry_id = m.get('srcentryid')
        return self


class InvOtherInDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_no: str = None,
        bill_date: str = None,
        bill_status: str = None,
        create_time: str = None,
        modify_time: str = None,
        audit_time: str = None,
        creator_id: str = None,
        creatorid_name: str = None,
        creatorid_number: str = None,
        modifier_id: str = None,
        modifier_name: str = None,
        modifier_number: str = None,
        auditor_id: str = None,
        auditor_name: str = None,
        auditor_number: str = None,
        trans_type_id: str = None,
        transtype_name: str = None,
        transtype_number: str = None,
        customer_id: str = None,
        customer_name: str = None,
        customer_number: str = None,
        supplier_id: str = None,
        supplier_name: str = None,
        supplier_number: str = None,
        remark: str = None,
        dept_id: str = None,
        dept_name: str = None,
        dept_number: str = None,
        emp_id: str = None,
        emp_name: str = None,
        emp_number: str = None,
        contact_phone: str = None,
        contact_country_id: str = None,
        contact_country_name: str = None,
        contact_country_number: str = None,
        contact_province_id: str = None,
        contact_province_name: str = None,
        contact_province_number: str = None,
        contact_city_id: str = None,
        contact_city_name: str = None,
        contact_city_number: str = None,
        contact_district_id: str = None,
        contact_district_name: str = None,
        contact_district_number: str = None,
        contact_address: str = None,
        material_entity: List[InvOtherInMaterialDetail] = None,
    ):
        # 单据ID
        self.id = id
        # 单据编码
        self.bill_no = bill_no
        # 单据日期
        self.bill_date = bill_date
        # 单据状态，Z：未审核，C：已审核
        self.bill_status = bill_status
        # 创建时间
        self.create_time = create_time
        # 修改时间
        self.modify_time = modify_time
        # 审核时间
        self.audit_time = audit_time
        # 创建人id
        self.creator_id = creator_id
        # 创建人名称
        self.creatorid_name = creatorid_name
        # 创建人编码
        self.creatorid_number = creatorid_number
        # 修改人id
        self.modifier_id = modifier_id
        # 修改人名称
        self.modifier_name = modifier_name
        # 修改人编码
        self.modifier_number = modifier_number
        # 审核人id
        self.auditor_id = auditor_id
        # 审核人名称
        self.auditor_name = auditor_name
        # 审核人编码
        self.auditor_number = auditor_number
        # 业务类型id
        self.trans_type_id = trans_type_id
        # 业务类型名称
        self.transtype_name = transtype_name
        # 业务类型编码
        self.transtype_number = transtype_number
        # 客户id
        self.customer_id = customer_id
        # 客户名称
        self.customer_name = customer_name
        # 客户编码
        self.customer_number = customer_number
        # 供应商id
        self.supplier_id = supplier_id
        # 供应商名称
        self.supplier_name = supplier_name
        # 供应商编码
        self.supplier_number = supplier_number
        # 备注
        self.remark = remark
        # 部门id
        self.dept_id = dept_id
        # 部门名称
        self.dept_name = dept_name
        # 部门编码
        self.dept_number = dept_number
        # 业务员id
        self.emp_id = emp_id
        # 业务员名称
        self.emp_name = emp_name
        # 业务员编码
        self.emp_number = emp_number
        # 联系电话
        self.contact_phone = contact_phone
        # 客户国家id
        self.contact_country_id = contact_country_id
        # 客户国家名称
        self.contact_country_name = contact_country_name
        # 客户国家编码
        self.contact_country_number = contact_country_number
        # 客户省份id
        self.contact_province_id = contact_province_id
        # 客户省份名称
        self.contact_province_name = contact_province_name
        # 客户省份编码
        self.contact_province_number = contact_province_number
        # 客户市区id
        self.contact_city_id = contact_city_id
        # 客户市区名称
        self.contact_city_name = contact_city_name
        # 客户市区编码
        self.contact_city_number = contact_city_number
        # 客户区县id
        self.contact_district_id = contact_district_id
        # 客户区县名称
        self.contact_district_name = contact_district_name
        # 客户区县编码
        self.contact_district_number = contact_district_number
        # 具体地址
        self.contact_address = contact_address
        # 商品分录
        self.material_entity = material_entity

    def validate(self):
        if self.material_entity:
            for k in self.material_entity:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_no is not None:
            result['billno'] = self.bill_no
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.create_time is not None:
            result['createtime'] = self.create_time
        if self.modify_time is not None:
            result['modifytime'] = self.modify_time
        if self.audit_time is not None:
            result['audittime'] = self.audit_time
        if self.creator_id is not None:
            result['creatorid_id'] = self.creator_id
        if self.creatorid_name is not None:
            result['creatorid_name'] = self.creatorid_name
        if self.creatorid_number is not None:
            result['creatorid_number'] = self.creatorid_number
        if self.modifier_id is not None:
            result['modifierid_id'] = self.modifier_id
        if self.modifier_name is not None:
            result['modifierid_name'] = self.modifier_name
        if self.modifier_number is not None:
            result['modifierid_number'] = self.modifier_number
        if self.auditor_id is not None:
            result['auditorid_id'] = self.auditor_id
        if self.auditor_name is not None:
            result['auditorid_name'] = self.auditor_name
        if self.auditor_number is not None:
            result['auditorid_number'] = self.auditor_number
        if self.trans_type_id is not None:
            result['transtype_id'] = self.trans_type_id
        if self.transtype_name is not None:
            result['transtype_name'] = self.transtype_name
        if self.transtype_number is not None:
            result['transtype_number'] = self.transtype_number
        if self.customer_id is not None:
            result['customerid_id'] = self.customer_id
        if self.customer_name is not None:
            result['customerid_name'] = self.customer_name
        if self.customer_number is not None:
            result['customerid_number'] = self.customer_number
        if self.supplier_id is not None:
            result['supplierid_id'] = self.supplier_id
        if self.supplier_name is not None:
            result['supplierid_name'] = self.supplier_name
        if self.supplier_number is not None:
            result['supplierid_number'] = self.supplier_number
        if self.remark is not None:
            result['remark'] = self.remark
        if self.dept_id is not None:
            result['deptid_id'] = self.dept_id
        if self.dept_name is not None:
            result['deptid_name'] = self.dept_name
        if self.dept_number is not None:
            result['deptid_number'] = self.dept_number
        if self.emp_id is not None:
            result['empid_id'] = self.emp_id
        if self.emp_name is not None:
            result['empid_name'] = self.emp_name
        if self.emp_number is not None:
            result['empid_number'] = self.emp_number
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        if self.contact_country_id is not None:
            result['contact_country_id'] = self.contact_country_id
        if self.contact_country_name is not None:
            result['contact_country_name'] = self.contact_country_name
        if self.contact_country_number is not None:
            result['contact_country_number'] = self.contact_country_number
        if self.contact_province_id is not None:
            result['contact_province_id'] = self.contact_province_id
        if self.contact_province_name is not None:
            result['contact_province_name'] = self.contact_province_name
        if self.contact_province_number is not None:
            result['contact_province_number'] = self.contact_province_number
        if self.contact_city_id is not None:
            result['contact_city_id'] = self.contact_city_id
        if self.contact_city_name is not None:
            result['contact_city_name'] = self.contact_city_name
        if self.contact_city_number is not None:
            result['contact_city_number'] = self.contact_city_number
        if self.contact_district_id is not None:
            result['contact_district_id'] = self.contact_district_id
        if self.contact_district_name is not None:
            result['contact_district_name'] = self.contact_district_name
        if self.contact_district_number is not None:
            result['contact_district_number'] = self.contact_district_number
        if self.contact_address is not None:
            result['contact_address'] = self.contact_address
        result['material_entity'] = []
        if self.material_entity is not None:
            for k in self.material_entity:
                result['material_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billno') is not None:
            self.bill_no = m.get('billno')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('createtime') is not None:
            self.create_time = m.get('createtime')
        if m.get('modifytime') is not None:
            self.modify_time = m.get('modifytime')
        if m.get('audittime') is not None:
            self.audit_time = m.get('audittime')
        if m.get('creatorid_id') is not None:
            self.creator_id = m.get('creatorid_id')
        if m.get('creatorid_name') is not None:
            self.creatorid_name = m.get('creatorid_name')
        if m.get('creatorid_number') is not None:
            self.creatorid_number = m.get('creatorid_number')
        if m.get('modifierid_id') is not None:
            self.modifier_id = m.get('modifierid_id')
        if m.get('modifierid_name') is not None:
            self.modifier_name = m.get('modifierid_name')
        if m.get('modifierid_number') is not None:
            self.modifier_number = m.get('modifierid_number')
        if m.get('auditorid_id') is not None:
            self.auditor_id = m.get('auditorid_id')
        if m.get('auditorid_name') is not None:
            self.auditor_name = m.get('auditorid_name')
        if m.get('auditorid_number') is not None:
            self.auditor_number = m.get('auditorid_number')
        if m.get('transtype_id') is not None:
            self.trans_type_id = m.get('transtype_id')
        if m.get('transtype_name') is not None:
            self.transtype_name = m.get('transtype_name')
        if m.get('transtype_number') is not None:
            self.transtype_number = m.get('transtype_number')
        if m.get('customerid_id') is not None:
            self.customer_id = m.get('customerid_id')
        if m.get('customerid_name') is not None:
            self.customer_name = m.get('customerid_name')
        if m.get('customerid_number') is not None:
            self.customer_number = m.get('customerid_number')
        if m.get('supplierid_id') is not None:
            self.supplier_id = m.get('supplierid_id')
        if m.get('supplierid_name') is not None:
            self.supplier_name = m.get('supplierid_name')
        if m.get('supplierid_number') is not None:
            self.supplier_number = m.get('supplierid_number')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('deptid_id') is not None:
            self.dept_id = m.get('deptid_id')
        if m.get('deptid_name') is not None:
            self.dept_name = m.get('deptid_name')
        if m.get('deptid_number') is not None:
            self.dept_number = m.get('deptid_number')
        if m.get('empid_id') is not None:
            self.emp_id = m.get('empid_id')
        if m.get('empid_name') is not None:
            self.emp_name = m.get('empid_name')
        if m.get('empid_number') is not None:
            self.emp_number = m.get('empid_number')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        if m.get('contact_country_id') is not None:
            self.contact_country_id = m.get('contact_country_id')
        if m.get('contact_country_name') is not None:
            self.contact_country_name = m.get('contact_country_name')
        if m.get('contact_country_number') is not None:
            self.contact_country_number = m.get('contact_country_number')
        if m.get('contact_province_id') is not None:
            self.contact_province_id = m.get('contact_province_id')
        if m.get('contact_province_name') is not None:
            self.contact_province_name = m.get('contact_province_name')
        if m.get('contact_province_number') is not None:
            self.contact_province_number = m.get('contact_province_number')
        if m.get('contact_city_id') is not None:
            self.contact_city_id = m.get('contact_city_id')
        if m.get('contact_city_name') is not None:
            self.contact_city_name = m.get('contact_city_name')
        if m.get('contact_city_number') is not None:
            self.contact_city_number = m.get('contact_city_number')
        if m.get('contact_district_id') is not None:
            self.contact_district_id = m.get('contact_district_id')
        if m.get('contact_district_name') is not None:
            self.contact_district_name = m.get('contact_district_name')
        if m.get('contact_district_number') is not None:
            self.contact_district_number = m.get('contact_district_number')
        if m.get('contact_address') is not None:
            self.contact_address = m.get('contact_address')
        self.material_entity = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = InvOtherInMaterialDetail()
                self.material_entity.append(temp_model.from_map(k))
        return self


class InvOtherInDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: InvOtherInDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = InvOtherInDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class InvBillDetailRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        number: str = None,
    ):
        # 单据id
        self.id = id
        # 单据编号（//id与number二选一）
        self.number = number

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.number is not None:
            result['number'] = self.number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('number') is not None:
            self.number = m.get('number')
        return self


class InvBillDetailRequest(TeaModel):
    def __init__(
        self,
        body: InvBillDetailRequestBody = None,
    ):
        self.body = body
        # 获取其他入库单详情

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvBillDetailRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvOtherInDrawRequestBody(TeaModel):
    def __init__(
        self,
        ids: str = None,
        source_bill_type: str = None,
    ):
        # 源单ID，多个id用英文逗号隔开
        self.ids = ids
        # 源单类型，sal_bill_outbound：销售出库单、sal_bill_order：销售订单
        self.source_bill_type = source_bill_type

    def validate(self):
        self.validate_required(self.ids, 'ids')
        self.validate_required(self.source_bill_type, 'source_bill_type')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids is not None:
            result['id'] = self.ids
        if self.source_bill_type is not None:
            result['sourceBillType'] = self.source_bill_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.ids = m.get('id')
        if m.get('sourceBillType') is not None:
            self.source_bill_type = m.get('sourceBillType')
        return self


class InvOtherInDrawRequest(TeaModel):
    def __init__(
        self,
        body: InvOtherInDrawRequestBody = None,
    ):
        self.body = body
        # 其他入库单选择源单

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvOtherInDrawRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class Unit(TeaModel):
    def __init__(
        self,
        unit_id: str = None,
        auxprop_id: str = None,
        barcode: str = None,
    ):
        # 单位id
        self.unit_id = unit_id
        # 辅助属性id
        self.auxprop_id = auxprop_id
        # 商品条码
        self.barcode = barcode

    def validate(self):
        self.validate_required(self.unit_id, 'unit_id')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.unit_id is not None:
            result['unitid'] = self.unit_id
        if self.auxprop_id is not None:
            result['auxpropid'] = self.auxprop_id
        if self.barcode is not None:
            result['barcode'] = self.barcode
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('unitid') is not None:
            self.unit_id = m.get('unitid')
        if m.get('auxpropid') is not None:
            self.auxprop_id = m.get('auxpropid')
        if m.get('barcode') is not None:
            self.barcode = m.get('barcode')
        return self


class InvMaterialCostQueryRequestBody(TeaModel):
    def __init__(
        self,
        materialid: str = None,
        units: List[Unit] = None,
        is_asstattr: bool = None,
    ):
        # 商品id
        self.materialid = materialid
        # 单位id和辅助属性id的集合
        self.units = units
        # 是否辅助属性商品
        self.is_asstattr = is_asstattr

    def validate(self):
        self.validate_required(self.materialid, 'materialid')
        self.validate_required(self.units, 'units')
        if self.units:
            for k in self.units:
                if k:
                    k.validate()
        self.validate_required(self.is_asstattr, 'is_asstattr')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.materialid is not None:
            result['materialid'] = self.materialid
        result['units'] = []
        if self.units is not None:
            for k in self.units:
                result['units'].append(k.to_map() if k else None)
        if self.is_asstattr is not None:
            result['isasstattr'] = self.is_asstattr
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('materialid') is not None:
            self.materialid = m.get('materialid')
        self.units = []
        if m.get('units') is not None:
            for k in m.get('units'):
                temp_model = Unit()
                self.units.append(temp_model.from_map(k))
        if m.get('isasstattr') is not None:
            self.is_asstattr = m.get('isasstattr')
        return self


class InvMaterialCostQueryRequest(TeaModel):
    def __init__(
        self,
        body: InvMaterialCostQueryRequestBody = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvMaterialCostQueryRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvOtherOutMaterialEntity(TeaModel):
    def __init__(
        self,
        id: str = None,
        material_id: str = None,
        stock_id: str = None,
        sp_id: str = None,
        qty: str = None,
        unit_id: str = None,
        auxprop_id: str = None,
        aux_id_1: str = None,
        aux_id_2: str = None,
        aux_id_3: str = None,
        aux_id_4: str = None,
        aux_id_5: str = None,
        barcode: str = None,
        batch_no: str = None,
        proplace: str = None,
        proreg_no: str = None,
        prolicense: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_type: str = None,
        kf_period: str = None,
        sn: str = None,
        sn_list_id: str = None,
        sn_list: str = None,
        cost: str = None,
        unit_cost: str = None,
        comment: str = None,
        src_bill_no: str = None,
        src_bill_type_id: str = None,
        src_inter_id: str = None,
        src_bill_date: str = None,
        src_seq: str = None,
        src_entry_id: str = None,
    ):
        # 分录id，新增不传该字段，修改必传
        self.id = id
        # 商品id
        self.material_id = material_id
        # 仓库id
        self.stock_id = stock_id
        # 仓位id
        self.sp_id = sp_id
        # 数量
        self.qty = qty
        # 单位id
        self.unit_id = unit_id
        # 辅助属性分录id(辅助属性商品必填)
        self.auxprop_id = auxprop_id
        # 辅助属性分类对应的辅助属性1ID(辅助属性商品必填)
        self.aux_id_1 = aux_id_1
        # 辅助属性分类对应的辅助属性2ID(辅助属性商品必填)
        self.aux_id_2 = aux_id_2
        # 辅助属性分类对应的辅助属性3ID(辅助属性商品必填)
        self.aux_id_3 = aux_id_3
        # 辅助属性分类对应的辅助属性4ID(辅助属性商品必填)
        self.aux_id_4 = aux_id_4
        # 辅助属性分类对应的辅助属性5ID(辅助属性商品必填)
        self.aux_id_5 = aux_id_5
        # 条形码
        self.barcode = barcode
        # 批次号 (批次商品必填)
        self.batch_no = batch_no
        # 产地
        self.proplace = proplace
        # 注册证号
        self.proreg_no = proreg_no
        # 生产许可证号
        self.prolicense = prolicense
        # 生产日期
        self.kf_date = kf_date
        # 有效日期
        self.valid_date = valid_date
        # 保质期类型，1：天，2：月，3：年
        self.kf_type = kf_type
        # 保质期天数
        self.kf_period = kf_period
        # 序列号
        self.sn = sn
        # 序列号流转id；单据新增后会在单据详情中带回这个字段信息，序列号商品修改时必填
        self.sn_list_id = sn_list_id
        # 序列号 格式：001:备注1;002:备注2 （序列号:序列号备注 多个序列号以英文分号字符;分隔）,序列号商品必填
        self.sn_list = sn_list
        # 入库成本
        self.cost = cost
        # 入库单位成本
        self.unit_cost = unit_cost
        # 行备注
        self.comment = comment
        # 源单编码
        self.src_bill_no = src_bill_no
        # 源单类型
        self.src_bill_type_id = src_bill_type_id
        # 源单内码
        self.src_inter_id = src_inter_id
        # 源单日期
        self.src_bill_date = src_bill_date
        # 源单行号
        self.src_seq = src_seq
        # 源单分录内码
        self.src_entry_id = src_entry_id

    def validate(self):
        self.validate_required(self.material_id, 'material_id')
        self.validate_required(self.stock_id, 'stock_id')
        self.validate_required(self.qty, 'qty')
        self.validate_required(self.unit_id, 'unit_id')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.material_id is not None:
            result['materialid_id'] = self.material_id
        if self.stock_id is not None:
            result['stockid_id'] = self.stock_id
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.qty is not None:
            result['qty'] = self.qty
        if self.unit_id is not None:
            result['unit_id'] = self.unit_id
        if self.auxprop_id is not None:
            result['auxpropid_id'] = self.auxprop_id
        if self.aux_id_1 is not None:
            result['auxid1_id'] = self.aux_id_1
        if self.aux_id_2 is not None:
            result['auxid2_id'] = self.aux_id_2
        if self.aux_id_3 is not None:
            result['auxid3_id'] = self.aux_id_3
        if self.aux_id_4 is not None:
            result['auxid4_id'] = self.aux_id_4
        if self.aux_id_5 is not None:
            result['auxid5_id'] = self.aux_id_5
        if self.barcode is not None:
            result['auxid5_id'] = self.barcode
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.proplace is not None:
            result['proplace'] = self.proplace
        if self.proreg_no is not None:
            result['proregno'] = self.proreg_no
        if self.prolicense is not None:
            result['prolicense'] = self.prolicense
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.sn is not None:
            result['sn'] = self.sn
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.sn_list is not None:
            result['sn_list'] = self.sn_list
        if self.cost is not None:
            result['cost'] = self.cost
        if self.unit_cost is not None:
            result['unitcost'] = self.unit_cost
        if self.comment is not None:
            result['comment'] = self.comment
        if self.src_bill_no is not None:
            result['srcbillno'] = self.src_bill_no
        if self.src_bill_type_id is not None:
            result['srcbilltypeid_id'] = self.src_bill_type_id
        if self.src_inter_id is not None:
            result['srcinterid'] = self.src_inter_id
        if self.src_bill_date is not None:
            result['src_billdate'] = self.src_bill_date
        if self.src_seq is not None:
            result['srcseq'] = self.src_seq
        if self.src_entry_id is not None:
            result['srcentryid'] = self.src_entry_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('materialid_id') is not None:
            self.material_id = m.get('materialid_id')
        if m.get('stockid_id') is not None:
            self.stock_id = m.get('stockid_id')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('unit_id') is not None:
            self.unit_id = m.get('unit_id')
        if m.get('auxpropid_id') is not None:
            self.auxprop_id = m.get('auxpropid_id')
        if m.get('auxid1_id') is not None:
            self.aux_id_1 = m.get('auxid1_id')
        if m.get('auxid2_id') is not None:
            self.aux_id_2 = m.get('auxid2_id')
        if m.get('auxid3_id') is not None:
            self.aux_id_3 = m.get('auxid3_id')
        if m.get('auxid4_id') is not None:
            self.aux_id_4 = m.get('auxid4_id')
        if m.get('auxid5_id') is not None:
            self.aux_id_5 = m.get('auxid5_id')
        if m.get('auxid5_id') is not None:
            self.barcode = m.get('auxid5_id')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.proplace = m.get('proplace')
        if m.get('proregno') is not None:
            self.proreg_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.prolicense = m.get('prolicense')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('sn') is not None:
            self.sn = m.get('sn')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('sn_list') is not None:
            self.sn_list = m.get('sn_list')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('unitcost') is not None:
            self.unit_cost = m.get('unitcost')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('srcbillno') is not None:
            self.src_bill_no = m.get('srcbillno')
        if m.get('srcbilltypeid_id') is not None:
            self.src_bill_type_id = m.get('srcbilltypeid_id')
        if m.get('srcinterid') is not None:
            self.src_inter_id = m.get('srcinterid')
        if m.get('src_billdate') is not None:
            self.src_bill_date = m.get('src_billdate')
        if m.get('srcseq') is not None:
            self.src_seq = m.get('srcseq')
        if m.get('srcentryid') is not None:
            self.src_entry_id = m.get('srcentryid')
        return self


class InvOtherOutSaveRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_date: str = None,
        trans_type_id: str = None,
        remark: str = None,
        dept_id: str = None,
        emp_id: str = None,
        supplier_id: str = None,
        customer_id: str = None,
        contact_info: str = None,
        currency_id: str = None,
        material_entity: List[InvOtherOutMaterialEntity] = None,
    ):
        # 单据ID，修改单据时必填，新增不传该字段
        self.id = id
        # 单据日期
        self.bill_date = bill_date
        # 业务类型id
        self.trans_type_id = trans_type_id
        # 备注
        self.remark = remark
        # 部门id
        self.dept_id = dept_id
        # 业务员id
        self.emp_id = emp_id
        # 供应商id
        self.supplier_id = supplier_id
        # 客户id
        self.customer_id = customer_id
        # 联系信息
        self.contact_info = contact_info
        # 币别id
        self.currency_id = currency_id
        # 商品分录
        self.material_entity = material_entity

    def validate(self):
        if self.material_entity:
            for k in self.material_entity:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.trans_type_id is not None:
            result['transtype_id'] = self.trans_type_id
        if self.remark is not None:
            result['remark'] = self.remark
        if self.dept_id is not None:
            result['deptid_id'] = self.dept_id
        if self.emp_id is not None:
            result['empid_id'] = self.emp_id
        if self.supplier_id is not None:
            result['supplierid_id'] = self.supplier_id
        if self.customer_id is not None:
            result['customerid_id'] = self.customer_id
        if self.contact_info is not None:
            result['contact_info'] = self.contact_info
        if self.currency_id is not None:
            result['currencyid_id'] = self.currency_id
        result['material_entity'] = []
        if self.material_entity is not None:
            for k in self.material_entity:
                result['material_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('transtype_id') is not None:
            self.trans_type_id = m.get('transtype_id')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('deptid_id') is not None:
            self.dept_id = m.get('deptid_id')
        if m.get('empid_id') is not None:
            self.emp_id = m.get('empid_id')
        if m.get('supplierid_id') is not None:
            self.supplier_id = m.get('supplierid_id')
        if m.get('customerid_id') is not None:
            self.customer_id = m.get('customerid_id')
        if m.get('contact_info') is not None:
            self.contact_info = m.get('contact_info')
        if m.get('currencyid_id') is not None:
            self.currency_id = m.get('currencyid_id')
        self.material_entity = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = InvOtherOutMaterialEntity()
                self.material_entity.append(temp_model.from_map(k))
        return self


class InvOtherOutSaveRequest(TeaModel):
    def __init__(
        self,
        body: InvOtherOutSaveRequestBody = None,
    ):
        self.body = body
        # 其他出库单商品分录

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvOtherOutSaveRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvOtherOutMaterialDetail(TeaModel):
    def __init__(
        self,
        seq: str = None,
        id: str = None,
        picture: str = None,
        material_id: str = None,
        material_name: str = None,
        material_number: str = None,
        material_is_multi_unit: bool = None,
        material_is_serial: bool = None,
        material_is_asstattr: bool = None,
        material_is_kfperiod: bool = None,
        material_is_batch: bool = None,
        material_model: str = None,
        stock_id: str = None,
        stock_name: str = None,
        stock_number: str = None,
        stock_is_allow_freight: str = None,
        sp_id: str = None,
        sp_name: str = None,
        sp_number: str = None,
        auxprop_id: str = None,
        auxprop_name: str = None,
        auxprop_number: str = None,
        aux_id_1: str = None,
        aux_id_1name: str = None,
        aux_id_1number: str = None,
        aux_id_2: str = None,
        aux_id_2name: str = None,
        aux_id_2number: str = None,
        aux_id_3: str = None,
        aux_id_3name: str = None,
        aux_id_3number: str = None,
        aux_id_4: str = None,
        aux_id_4name: str = None,
        aux_id_4number: str = None,
        aux_id_5: str = None,
        aux_id_5name: str = None,
        aux_id_5number: str = None,
        barcode: str = None,
        batch_no: str = None,
        proplace: str = None,
        proreg_no: str = None,
        prolicense: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_type: str = None,
        kf_period: str = None,
        sn: str = None,
        sn_list_id: str = None,
        base_unit_id: str = None,
        base_unit_name: str = None,
        base_unit_number: str = None,
        unit_id: str = None,
        unit_name: str = None,
        unit_number: str = None,
        aux_unit_id: str = None,
        aux_unit_name: str = None,
        aux_unit_number: str = None,
        conversion_rate: str = None,
        qty: str = None,
        inv_qty: str = None,
        base_qty: str = None,
        inv_base_qty: str = None,
        aux_qty: str = None,
        deffloat_qty: str = None,
        aux_coefficient: str = None,
        coefficient: str = None,
        price: str = None,
        cost: str = None,
        unit_cost: str = None,
        comment: str = None,
        src_bill_no: str = None,
        src_bill_type_id: str = None,
        src_bill_type_name: str = None,
        src_bill_type_number: str = None,
        src_inter_id: str = None,
        src_bill_date: str = None,
        src_seq: str = None,
        src_entry_id: str = None,
    ):
        # 分录序号
        self.seq = seq
        # 分录ID
        self.id = id
        # 图片url
        self.picture = picture
        # 商品id
        self.material_id = material_id
        # 商品名称
        self.material_name = material_name
        # 商品编码
        self.material_number = material_number
        # 商品是否多单位
        self.material_is_multi_unit = material_is_multi_unit
        # 商品是否序列号
        self.material_is_serial = material_is_serial
        # 商品是否启用辅助属性
        self.material_is_asstattr = material_is_asstattr
        # 商品是否开启保质期
        self.material_is_kfperiod = material_is_kfperiod
        # 商品是否开启批次
        self.material_is_batch = material_is_batch
        # 商品规格
        self.material_model = material_model
        # 仓库id
        self.stock_id = stock_id
        # 仓库名称
        self.stock_name = stock_name
        # 仓库编码
        self.stock_number = stock_number
        # 仓库启用仓位管理
        self.stock_is_allow_freight = stock_is_allow_freight
        # 仓位id
        self.sp_id = sp_id
        # 仓位名称
        self.sp_name = sp_name
        # 仓位编码
        self.sp_number = sp_number
        # 辅助属性id
        self.auxprop_id = auxprop_id
        # 辅助属性名称
        self.auxprop_name = auxprop_name
        # 辅助属性编码
        self.auxprop_number = auxprop_number
        # 辅助属性1id
        self.aux_id_1 = aux_id_1
        # 辅助属性1名称
        self.aux_id_1name = aux_id_1name
        # 辅助属性1编码
        self.aux_id_1number = aux_id_1number
        # 辅助属性2id
        self.aux_id_2 = aux_id_2
        # 辅助属性2名称
        self.aux_id_2name = aux_id_2name
        # 辅助属性2编码
        self.aux_id_2number = aux_id_2number
        # 辅助属性3id
        self.aux_id_3 = aux_id_3
        # 辅助属性3名称
        self.aux_id_3name = aux_id_3name
        # 辅助属性3编码
        self.aux_id_3number = aux_id_3number
        # 辅助属性4id
        self.aux_id_4 = aux_id_4
        # 辅助属性4名称
        self.aux_id_4name = aux_id_4name
        # 辅助属性4编码
        self.aux_id_4number = aux_id_4number
        # 辅助属性5id
        self.aux_id_5 = aux_id_5
        # 辅助属性5名称
        self.aux_id_5name = aux_id_5name
        # 辅助属性5编码
        self.aux_id_5number = aux_id_5number
        # 条形码
        self.barcode = barcode
        # 批次号
        self.batch_no = batch_no
        # 产地
        self.proplace = proplace
        # 注册证号
        self.proreg_no = proreg_no
        # 生产许可证号
        self.prolicense = prolicense
        # 生产日期
        self.kf_date = kf_date
        # 有效日期
        self.valid_date = valid_date
        # 保质期类型，1：天，2：月，3：年
        self.kf_type = kf_type
        # 保质期天数
        self.kf_period = kf_period
        # 序列号
        self.sn = sn
        # 序列号流转ID
        self.sn_list_id = sn_list_id
        # 基本单位id
        self.base_unit_id = base_unit_id
        # 基本单位名称
        self.base_unit_name = base_unit_name
        # 基本单位编码
        self.base_unit_number = base_unit_number
        # 单位id
        self.unit_id = unit_id
        # 单位名称
        self.unit_name = unit_name
        # 单位编码
        self.unit_number = unit_number
        # 辅助单位id
        self.aux_unit_id = aux_unit_id
        # 辅助单位名称
        self.aux_unit_name = aux_unit_name
        # 辅助单位编码
        self.aux_unit_number = aux_unit_number
        # 换算公式
        self.conversion_rate = conversion_rate
        # 数量
        self.qty = qty
        # 库存数量
        self.inv_qty = inv_qty
        # 基本数量
        self.base_qty = base_qty
        # 基本库存数量
        self.inv_base_qty = inv_base_qty
        # 辅助单位数量
        self.aux_qty = aux_qty
        # 辅助基本数量
        self.deffloat_qty = deffloat_qty
        # 辅助换算率
        self.aux_coefficient = aux_coefficient
        # 换算率
        self.coefficient = coefficient
        # 单价
        self.price = price
        # 入库成本
        self.cost = cost
        # 入库单位成本
        self.unit_cost = unit_cost
        # 行备注
        self.comment = comment
        # 源单编号
        self.src_bill_no = src_bill_no
        # 源单类型id
        self.src_bill_type_id = src_bill_type_id
        # 源单类型名称
        self.src_bill_type_name = src_bill_type_name
        # 源单类型编码
        self.src_bill_type_number = src_bill_type_number
        # 源单内码
        self.src_inter_id = src_inter_id
        # 源单日期
        self.src_bill_date = src_bill_date
        # 源单行号
        self.src_seq = src_seq
        # 源单分录内码
        self.src_entry_id = src_entry_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.seq is not None:
            result['seq'] = self.seq
        if self.id is not None:
            result['id'] = self.id
        if self.picture is not None:
            result['picture'] = self.picture
        if self.material_id is not None:
            result['materialid_id'] = self.material_id
        if self.material_name is not None:
            result['materialid_name'] = self.material_name
        if self.material_number is not None:
            result['materialid_number'] = self.material_number
        if self.material_is_multi_unit is not None:
            result['materialid_ismulti_unit'] = self.material_is_multi_unit
        if self.material_is_serial is not None:
            result['materialid_isserial'] = self.material_is_serial
        if self.material_is_asstattr is not None:
            result['materialid_isasstattr'] = self.material_is_asstattr
        if self.material_is_kfperiod is not None:
            result['materialid_iskfperiod'] = self.material_is_kfperiod
        if self.material_is_batch is not None:
            result['materialid_isbatch'] = self.material_is_batch
        if self.material_model is not None:
            result['materialid_model'] = self.material_model
        if self.stock_id is not None:
            result['stockid_id'] = self.stock_id
        if self.stock_name is not None:
            result['stockid_name'] = self.stock_name
        if self.stock_number is not None:
            result['stockid_number'] = self.stock_number
        if self.stock_is_allow_freight is not None:
            result['stockid_isallowfreight'] = self.stock_is_allow_freight
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.sp_name is not None:
            result['spid_name'] = self.sp_name
        if self.sp_number is not None:
            result['spid_number'] = self.sp_number
        if self.auxprop_id is not None:
            result['auxpropid_id'] = self.auxprop_id
        if self.auxprop_name is not None:
            result['auxpropid_name'] = self.auxprop_name
        if self.auxprop_number is not None:
            result['auxpropid_number'] = self.auxprop_number
        if self.aux_id_1 is not None:
            result['auxid1_id'] = self.aux_id_1
        if self.aux_id_1name is not None:
            result['auxid1_name'] = self.aux_id_1name
        if self.aux_id_1number is not None:
            result['auxid1_number'] = self.aux_id_1number
        if self.aux_id_2 is not None:
            result['auxid2_id'] = self.aux_id_2
        if self.aux_id_2name is not None:
            result['auxid2_name'] = self.aux_id_2name
        if self.aux_id_2number is not None:
            result['auxid2_number'] = self.aux_id_2number
        if self.aux_id_3 is not None:
            result['auxid3_id'] = self.aux_id_3
        if self.aux_id_3name is not None:
            result['auxid3_name'] = self.aux_id_3name
        if self.aux_id_3number is not None:
            result['auxid3_number'] = self.aux_id_3number
        if self.aux_id_4 is not None:
            result['auxid4_id'] = self.aux_id_4
        if self.aux_id_4name is not None:
            result['auxid4_name'] = self.aux_id_4name
        if self.aux_id_4number is not None:
            result['auxid4_number'] = self.aux_id_4number
        if self.aux_id_5 is not None:
            result['auxid5_id'] = self.aux_id_5
        if self.aux_id_5name is not None:
            result['auxid5_name'] = self.aux_id_5name
        if self.aux_id_5number is not None:
            result['auxid5_number'] = self.aux_id_5number
        if self.barcode is not None:
            result['barcode'] = self.barcode
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.proplace is not None:
            result['proplace'] = self.proplace
        if self.proreg_no is not None:
            result['proregno'] = self.proreg_no
        if self.prolicense is not None:
            result['prolicense'] = self.prolicense
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.sn is not None:
            result['sn'] = self.sn
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.base_unit_id is not None:
            result['baseunit_id'] = self.base_unit_id
        if self.base_unit_name is not None:
            result['baseunit_name'] = self.base_unit_name
        if self.base_unit_number is not None:
            result['baseunit_number'] = self.base_unit_number
        if self.unit_id is not None:
            result['unit_id'] = self.unit_id
        if self.unit_name is not None:
            result['unit_name'] = self.unit_name
        if self.unit_number is not None:
            result['unit_number'] = self.unit_number
        if self.aux_unit_id is not None:
            result['auxunitid_id'] = self.aux_unit_id
        if self.aux_unit_name is not None:
            result['auxunitid_name'] = self.aux_unit_name
        if self.aux_unit_number is not None:
            result['auxunitid_number'] = self.aux_unit_number
        if self.conversion_rate is not None:
            result['conversionrate'] = self.conversion_rate
        if self.qty is not None:
            result['qty'] = self.qty
        if self.inv_qty is not None:
            result['inv_qty'] = self.inv_qty
        if self.base_qty is not None:
            result['baseqty'] = self.base_qty
        if self.inv_base_qty is not None:
            result['inv_baseqty'] = self.inv_base_qty
        if self.aux_qty is not None:
            result['auxqty'] = self.aux_qty
        if self.deffloat_qty is not None:
            result['deffloatqty'] = self.deffloat_qty
        if self.aux_coefficient is not None:
            result['auxcoefficient'] = self.aux_coefficient
        if self.coefficient is not None:
            result['coefficient'] = self.coefficient
        if self.price is not None:
            result['price'] = self.price
        if self.cost is not None:
            result['cost'] = self.cost
        if self.unit_cost is not None:
            result['unitcost'] = self.unit_cost
        if self.comment is not None:
            result['comment'] = self.comment
        if self.src_bill_no is not None:
            result['srcbillno'] = self.src_bill_no
        if self.src_bill_type_id is not None:
            result['srcbilltypeid_id'] = self.src_bill_type_id
        if self.src_bill_type_name is not None:
            result['srcbilltypeid_name'] = self.src_bill_type_name
        if self.src_bill_type_number is not None:
            result['srcbilltypeid_number'] = self.src_bill_type_number
        if self.src_inter_id is not None:
            result['srcinterid'] = self.src_inter_id
        if self.src_bill_date is not None:
            result['src_billdate'] = self.src_bill_date
        if self.src_seq is not None:
            result['srcseq'] = self.src_seq
        if self.src_entry_id is not None:
            result['srcentryid'] = self.src_entry_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('seq') is not None:
            self.seq = m.get('seq')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('picture') is not None:
            self.picture = m.get('picture')
        if m.get('materialid_id') is not None:
            self.material_id = m.get('materialid_id')
        if m.get('materialid_name') is not None:
            self.material_name = m.get('materialid_name')
        if m.get('materialid_number') is not None:
            self.material_number = m.get('materialid_number')
        if m.get('materialid_ismulti_unit') is not None:
            self.material_is_multi_unit = m.get('materialid_ismulti_unit')
        if m.get('materialid_isserial') is not None:
            self.material_is_serial = m.get('materialid_isserial')
        if m.get('materialid_isasstattr') is not None:
            self.material_is_asstattr = m.get('materialid_isasstattr')
        if m.get('materialid_iskfperiod') is not None:
            self.material_is_kfperiod = m.get('materialid_iskfperiod')
        if m.get('materialid_isbatch') is not None:
            self.material_is_batch = m.get('materialid_isbatch')
        if m.get('materialid_model') is not None:
            self.material_model = m.get('materialid_model')
        if m.get('stockid_id') is not None:
            self.stock_id = m.get('stockid_id')
        if m.get('stockid_name') is not None:
            self.stock_name = m.get('stockid_name')
        if m.get('stockid_number') is not None:
            self.stock_number = m.get('stockid_number')
        if m.get('stockid_isallowfreight') is not None:
            self.stock_is_allow_freight = m.get('stockid_isallowfreight')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('spid_name') is not None:
            self.sp_name = m.get('spid_name')
        if m.get('spid_number') is not None:
            self.sp_number = m.get('spid_number')
        if m.get('auxpropid_id') is not None:
            self.auxprop_id = m.get('auxpropid_id')
        if m.get('auxpropid_name') is not None:
            self.auxprop_name = m.get('auxpropid_name')
        if m.get('auxpropid_number') is not None:
            self.auxprop_number = m.get('auxpropid_number')
        if m.get('auxid1_id') is not None:
            self.aux_id_1 = m.get('auxid1_id')
        if m.get('auxid1_name') is not None:
            self.aux_id_1name = m.get('auxid1_name')
        if m.get('auxid1_number') is not None:
            self.aux_id_1number = m.get('auxid1_number')
        if m.get('auxid2_id') is not None:
            self.aux_id_2 = m.get('auxid2_id')
        if m.get('auxid2_name') is not None:
            self.aux_id_2name = m.get('auxid2_name')
        if m.get('auxid2_number') is not None:
            self.aux_id_2number = m.get('auxid2_number')
        if m.get('auxid3_id') is not None:
            self.aux_id_3 = m.get('auxid3_id')
        if m.get('auxid3_name') is not None:
            self.aux_id_3name = m.get('auxid3_name')
        if m.get('auxid3_number') is not None:
            self.aux_id_3number = m.get('auxid3_number')
        if m.get('auxid4_id') is not None:
            self.aux_id_4 = m.get('auxid4_id')
        if m.get('auxid4_name') is not None:
            self.aux_id_4name = m.get('auxid4_name')
        if m.get('auxid4_number') is not None:
            self.aux_id_4number = m.get('auxid4_number')
        if m.get('auxid5_id') is not None:
            self.aux_id_5 = m.get('auxid5_id')
        if m.get('auxid5_name') is not None:
            self.aux_id_5name = m.get('auxid5_name')
        if m.get('auxid5_number') is not None:
            self.aux_id_5number = m.get('auxid5_number')
        if m.get('barcode') is not None:
            self.barcode = m.get('barcode')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.proplace = m.get('proplace')
        if m.get('proregno') is not None:
            self.proreg_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.prolicense = m.get('prolicense')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('sn') is not None:
            self.sn = m.get('sn')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('baseunit_id') is not None:
            self.base_unit_id = m.get('baseunit_id')
        if m.get('baseunit_name') is not None:
            self.base_unit_name = m.get('baseunit_name')
        if m.get('baseunit_number') is not None:
            self.base_unit_number = m.get('baseunit_number')
        if m.get('unit_id') is not None:
            self.unit_id = m.get('unit_id')
        if m.get('unit_name') is not None:
            self.unit_name = m.get('unit_name')
        if m.get('unit_number') is not None:
            self.unit_number = m.get('unit_number')
        if m.get('auxunitid_id') is not None:
            self.aux_unit_id = m.get('auxunitid_id')
        if m.get('auxunitid_name') is not None:
            self.aux_unit_name = m.get('auxunitid_name')
        if m.get('auxunitid_number') is not None:
            self.aux_unit_number = m.get('auxunitid_number')
        if m.get('conversionrate') is not None:
            self.conversion_rate = m.get('conversionrate')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('inv_qty') is not None:
            self.inv_qty = m.get('inv_qty')
        if m.get('baseqty') is not None:
            self.base_qty = m.get('baseqty')
        if m.get('inv_baseqty') is not None:
            self.inv_base_qty = m.get('inv_baseqty')
        if m.get('auxqty') is not None:
            self.aux_qty = m.get('auxqty')
        if m.get('deffloatqty') is not None:
            self.deffloat_qty = m.get('deffloatqty')
        if m.get('auxcoefficient') is not None:
            self.aux_coefficient = m.get('auxcoefficient')
        if m.get('coefficient') is not None:
            self.coefficient = m.get('coefficient')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('unitcost') is not None:
            self.unit_cost = m.get('unitcost')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('srcbillno') is not None:
            self.src_bill_no = m.get('srcbillno')
        if m.get('srcbilltypeid_id') is not None:
            self.src_bill_type_id = m.get('srcbilltypeid_id')
        if m.get('srcbilltypeid_name') is not None:
            self.src_bill_type_name = m.get('srcbilltypeid_name')
        if m.get('srcbilltypeid_number') is not None:
            self.src_bill_type_number = m.get('srcbilltypeid_number')
        if m.get('srcinterid') is not None:
            self.src_inter_id = m.get('srcinterid')
        if m.get('src_billdate') is not None:
            self.src_bill_date = m.get('src_billdate')
        if m.get('srcseq') is not None:
            self.src_seq = m.get('srcseq')
        if m.get('srcentryid') is not None:
            self.src_entry_id = m.get('srcentryid')
        return self


class InvOtherOutDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_no: str = None,
        bill_date: str = None,
        bill_status: str = None,
        create_time: str = None,
        modify_time: str = None,
        audit_time: str = None,
        creator_id: str = None,
        creatorid_name: str = None,
        creatorid_number: str = None,
        modifier_id: str = None,
        modifier_name: str = None,
        modifier_number: str = None,
        auditor_id: str = None,
        auditor_name: str = None,
        auditor_number: str = None,
        trans_type_id: str = None,
        transtype_name: str = None,
        transtype_number: str = None,
        customer_id: str = None,
        customer_name: str = None,
        customer_number: str = None,
        supplier_id: str = None,
        supplier_name: str = None,
        supplier_number: str = None,
        remark: str = None,
        dept_id: str = None,
        dept_name: str = None,
        dept_number: str = None,
        emp_id: str = None,
        emp_name: str = None,
        emp_number: str = None,
        contact_phone: str = None,
        contact_country_id: str = None,
        contact_country_name: str = None,
        contact_country_number: str = None,
        contact_province_id: str = None,
        contact_province_name: str = None,
        contact_province_number: str = None,
        contact_city_id: str = None,
        contact_city_name: str = None,
        contact_city_number: str = None,
        contact_district_id: str = None,
        contact_district_name: str = None,
        contact_district_number: str = None,
        contact_address: str = None,
        material_entity: List[InvOtherOutMaterialDetail] = None,
    ):
        # 单据ID
        self.id = id
        # 单据编码
        self.bill_no = bill_no
        # 单据日期
        self.bill_date = bill_date
        # 单据状态，Z：未审核，C：已审核
        self.bill_status = bill_status
        # 创建时间
        self.create_time = create_time
        # 修改时间
        self.modify_time = modify_time
        # 审核时间
        self.audit_time = audit_time
        # 创建人id
        self.creator_id = creator_id
        # 创建人名称
        self.creatorid_name = creatorid_name
        # 创建人编码
        self.creatorid_number = creatorid_number
        # 修改人id
        self.modifier_id = modifier_id
        # 修改人名称
        self.modifier_name = modifier_name
        # 修改人编码
        self.modifier_number = modifier_number
        # 审核人id
        self.auditor_id = auditor_id
        # 审核人名称
        self.auditor_name = auditor_name
        # 审核人编码
        self.auditor_number = auditor_number
        # 业务类型id
        self.trans_type_id = trans_type_id
        # 业务类型名称
        self.transtype_name = transtype_name
        # 业务类型编码
        self.transtype_number = transtype_number
        # 客户id
        self.customer_id = customer_id
        # 客户名称
        self.customer_name = customer_name
        # 客户编码
        self.customer_number = customer_number
        # 供应商id
        self.supplier_id = supplier_id
        # 供应商名称
        self.supplier_name = supplier_name
        # 供应商编码
        self.supplier_number = supplier_number
        # 备注
        self.remark = remark
        # 部门id
        self.dept_id = dept_id
        # 部门名称
        self.dept_name = dept_name
        # 部门编码
        self.dept_number = dept_number
        # 业务员id
        self.emp_id = emp_id
        # 业务员名称
        self.emp_name = emp_name
        # 业务员编码
        self.emp_number = emp_number
        # 联系电话
        self.contact_phone = contact_phone
        # 客户国家id
        self.contact_country_id = contact_country_id
        # 客户国家名称
        self.contact_country_name = contact_country_name
        # 客户国家编码
        self.contact_country_number = contact_country_number
        # 客户省份id
        self.contact_province_id = contact_province_id
        # 客户省份名称
        self.contact_province_name = contact_province_name
        # 客户省份编码
        self.contact_province_number = contact_province_number
        # 客户市区id
        self.contact_city_id = contact_city_id
        # 客户市区名称
        self.contact_city_name = contact_city_name
        # 客户市区编码
        self.contact_city_number = contact_city_number
        # 客户区县id
        self.contact_district_id = contact_district_id
        # 客户区县名称
        self.contact_district_name = contact_district_name
        # 客户区县编码
        self.contact_district_number = contact_district_number
        # 具体地址
        self.contact_address = contact_address
        # 商品分录
        self.material_entity = material_entity

    def validate(self):
        if self.material_entity:
            for k in self.material_entity:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_no is not None:
            result['billno'] = self.bill_no
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.create_time is not None:
            result['createtime'] = self.create_time
        if self.modify_time is not None:
            result['modifytime'] = self.modify_time
        if self.audit_time is not None:
            result['audittime'] = self.audit_time
        if self.creator_id is not None:
            result['creatorid_id'] = self.creator_id
        if self.creatorid_name is not None:
            result['creatorid_name'] = self.creatorid_name
        if self.creatorid_number is not None:
            result['creatorid_number'] = self.creatorid_number
        if self.modifier_id is not None:
            result['modifierid_id'] = self.modifier_id
        if self.modifier_name is not None:
            result['modifierid_name'] = self.modifier_name
        if self.modifier_number is not None:
            result['modifierid_number'] = self.modifier_number
        if self.auditor_id is not None:
            result['auditorid_id'] = self.auditor_id
        if self.auditor_name is not None:
            result['auditorid_name'] = self.auditor_name
        if self.auditor_number is not None:
            result['auditorid_number'] = self.auditor_number
        if self.trans_type_id is not None:
            result['transtype_id'] = self.trans_type_id
        if self.transtype_name is not None:
            result['transtype_name'] = self.transtype_name
        if self.transtype_number is not None:
            result['transtype_number'] = self.transtype_number
        if self.customer_id is not None:
            result['customerid_id'] = self.customer_id
        if self.customer_name is not None:
            result['customerid_name'] = self.customer_name
        if self.customer_number is not None:
            result['customerid_number'] = self.customer_number
        if self.supplier_id is not None:
            result['supplierid_id'] = self.supplier_id
        if self.supplier_name is not None:
            result['supplierid_name'] = self.supplier_name
        if self.supplier_number is not None:
            result['supplierid_number'] = self.supplier_number
        if self.remark is not None:
            result['remark'] = self.remark
        if self.dept_id is not None:
            result['deptid_id'] = self.dept_id
        if self.dept_name is not None:
            result['deptid_name'] = self.dept_name
        if self.dept_number is not None:
            result['deptid_number'] = self.dept_number
        if self.emp_id is not None:
            result['empid_id'] = self.emp_id
        if self.emp_name is not None:
            result['empid_name'] = self.emp_name
        if self.emp_number is not None:
            result['empid_number'] = self.emp_number
        if self.contact_phone is not None:
            result['contact_phone'] = self.contact_phone
        if self.contact_country_id is not None:
            result['contact_country_id'] = self.contact_country_id
        if self.contact_country_name is not None:
            result['contact_country_name'] = self.contact_country_name
        if self.contact_country_number is not None:
            result['contact_country_number'] = self.contact_country_number
        if self.contact_province_id is not None:
            result['contact_province_id'] = self.contact_province_id
        if self.contact_province_name is not None:
            result['contact_province_name'] = self.contact_province_name
        if self.contact_province_number is not None:
            result['contact_province_number'] = self.contact_province_number
        if self.contact_city_id is not None:
            result['contact_city_id'] = self.contact_city_id
        if self.contact_city_name is not None:
            result['contact_city_name'] = self.contact_city_name
        if self.contact_city_number is not None:
            result['contact_city_number'] = self.contact_city_number
        if self.contact_district_id is not None:
            result['contact_district_id'] = self.contact_district_id
        if self.contact_district_name is not None:
            result['contact_district_name'] = self.contact_district_name
        if self.contact_district_number is not None:
            result['contact_district_number'] = self.contact_district_number
        if self.contact_address is not None:
            result['contact_address'] = self.contact_address
        result['material_entity'] = []
        if self.material_entity is not None:
            for k in self.material_entity:
                result['material_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billno') is not None:
            self.bill_no = m.get('billno')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('createtime') is not None:
            self.create_time = m.get('createtime')
        if m.get('modifytime') is not None:
            self.modify_time = m.get('modifytime')
        if m.get('audittime') is not None:
            self.audit_time = m.get('audittime')
        if m.get('creatorid_id') is not None:
            self.creator_id = m.get('creatorid_id')
        if m.get('creatorid_name') is not None:
            self.creatorid_name = m.get('creatorid_name')
        if m.get('creatorid_number') is not None:
            self.creatorid_number = m.get('creatorid_number')
        if m.get('modifierid_id') is not None:
            self.modifier_id = m.get('modifierid_id')
        if m.get('modifierid_name') is not None:
            self.modifier_name = m.get('modifierid_name')
        if m.get('modifierid_number') is not None:
            self.modifier_number = m.get('modifierid_number')
        if m.get('auditorid_id') is not None:
            self.auditor_id = m.get('auditorid_id')
        if m.get('auditorid_name') is not None:
            self.auditor_name = m.get('auditorid_name')
        if m.get('auditorid_number') is not None:
            self.auditor_number = m.get('auditorid_number')
        if m.get('transtype_id') is not None:
            self.trans_type_id = m.get('transtype_id')
        if m.get('transtype_name') is not None:
            self.transtype_name = m.get('transtype_name')
        if m.get('transtype_number') is not None:
            self.transtype_number = m.get('transtype_number')
        if m.get('customerid_id') is not None:
            self.customer_id = m.get('customerid_id')
        if m.get('customerid_name') is not None:
            self.customer_name = m.get('customerid_name')
        if m.get('customerid_number') is not None:
            self.customer_number = m.get('customerid_number')
        if m.get('supplierid_id') is not None:
            self.supplier_id = m.get('supplierid_id')
        if m.get('supplierid_name') is not None:
            self.supplier_name = m.get('supplierid_name')
        if m.get('supplierid_number') is not None:
            self.supplier_number = m.get('supplierid_number')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('deptid_id') is not None:
            self.dept_id = m.get('deptid_id')
        if m.get('deptid_name') is not None:
            self.dept_name = m.get('deptid_name')
        if m.get('deptid_number') is not None:
            self.dept_number = m.get('deptid_number')
        if m.get('empid_id') is not None:
            self.emp_id = m.get('empid_id')
        if m.get('empid_name') is not None:
            self.emp_name = m.get('empid_name')
        if m.get('empid_number') is not None:
            self.emp_number = m.get('empid_number')
        if m.get('contact_phone') is not None:
            self.contact_phone = m.get('contact_phone')
        if m.get('contact_country_id') is not None:
            self.contact_country_id = m.get('contact_country_id')
        if m.get('contact_country_name') is not None:
            self.contact_country_name = m.get('contact_country_name')
        if m.get('contact_country_number') is not None:
            self.contact_country_number = m.get('contact_country_number')
        if m.get('contact_province_id') is not None:
            self.contact_province_id = m.get('contact_province_id')
        if m.get('contact_province_name') is not None:
            self.contact_province_name = m.get('contact_province_name')
        if m.get('contact_province_number') is not None:
            self.contact_province_number = m.get('contact_province_number')
        if m.get('contact_city_id') is not None:
            self.contact_city_id = m.get('contact_city_id')
        if m.get('contact_city_name') is not None:
            self.contact_city_name = m.get('contact_city_name')
        if m.get('contact_city_number') is not None:
            self.contact_city_number = m.get('contact_city_number')
        if m.get('contact_district_id') is not None:
            self.contact_district_id = m.get('contact_district_id')
        if m.get('contact_district_name') is not None:
            self.contact_district_name = m.get('contact_district_name')
        if m.get('contact_district_number') is not None:
            self.contact_district_number = m.get('contact_district_number')
        if m.get('contact_address') is not None:
            self.contact_address = m.get('contact_address')
        self.material_entity = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = InvOtherOutMaterialDetail()
                self.material_entity.append(temp_model.from_map(k))
        return self


class InvOtherOutDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: InvOtherOutDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = InvOtherOutDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class InvOtherOutDrawRequestBody(TeaModel):
    def __init__(
        self,
        ids: str = None,
    ):
        # 源单ID，多个id用英文逗号隔开
        self.ids = ids

    def validate(self):
        self.validate_required(self.ids, 'ids')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids is not None:
            result['id'] = self.ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.ids = m.get('id')
        return self


class InvOtherOutDrawRequest(TeaModel):
    def __init__(
        self,
        body: InvOtherOutDrawRequestBody = None,
    ):
        self.body = body
        # 其他出库单选择源单
        # 其他出库单选择其他入库单生成其他出库单

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvOtherOutDrawRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvCheckTaskRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        name: str = None,
        stock_id: str = None,
        lock_status: bool = None,
        check_type: str = None,
        check_date: str = None,
        check_model: str = None,
        checkerid_number: str = None,
        check_scope: str = None,
        material_number: str = None,
        material_brand_number: str = None,
        material_category_number: str = None,
        sp_number: str = None,
        include_forbidden: bool = None,
        include_zero: bool = None,
        material_source: str = None,
        check_batch_kf_period: bool = None,
        check_serial: bool = None,
        create_type: str = None,
        remark: str = None,
        bill_source: str = None,
    ):
        # 任务ID， 默认为0
        self.id = id
        # 任务名称
        self.name = name
        # 仓库id
        self.stock_id = stock_id
        # 是否锁盘，默认false
        self.lock_status = lock_status
        # 盘点类型（即时库存盘点：“1”，指定日期盘点：“2”）
        self.check_type = check_type
        # 盘点日期，指定日期盘点时才有
        self.check_date = check_date
        # 盘点模式（默认：单人盘点：“1”，多人盘点：“2”）
        self.check_model = check_model
        # 盘点人（值为职员的编码，多个之间用英文逗号分隔开
        self.checkerid_number = checkerid_number
        # 盘点范围（默认：全盘：“1”，抽盘：“2”）
        self.check_scope = check_scope
        # 商品（值为商品的编码，多个之间用英文逗号分隔开）
        self.material_number = material_number
        # 商品品牌（值为商品品牌的编码，多个之间用英文逗号分隔开）
        self.material_brand_number = material_brand_number
        # 商品分类（值为商品分类的编码，多个之间用英文逗号分隔开）
        self.material_category_number = material_category_number
        # 仓位（值为仓位的编码，多个之间用英文逗号分隔开）
        self.sp_number = sp_number
        # 包含禁用商品，默认false
        self.include_forbidden = include_forbidden
        # 包含零库存商品，默认false
        self.include_zero = include_zero
        # 商品来源（默认：在盘点仓库中有交易记录的商品：“2”，商品资料中所有商品：“1”）
        self.material_source = material_source
        # 按批次保质期盘点，默认false
        self.check_batch_kf_period = check_batch_kf_period
        # 按序列号盘点，默认false
        self.check_serial = check_serial
        # 商品清单展示（默认：空白盘点单：“1”，显示商品清单：“2”）
        self.create_type = create_type
        # 备注
        self.remark = remark
        # 单据来源，参照《单据来源举例》)
        self.bill_source = bill_source

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.stock_id is not None:
            result['stockid_id'] = self.stock_id
        if self.lock_status is not None:
            result['lockstatus'] = self.lock_status
        if self.check_type is not None:
            result['checktype'] = self.check_type
        if self.check_date is not None:
            result['checkdate'] = self.check_date
        if self.check_model is not None:
            result['checkmodel'] = self.check_model
        if self.checkerid_number is not None:
            result['checkerid_number'] = self.checkerid_number
        if self.check_scope is not None:
            result['checkscope'] = self.check_scope
        if self.material_number is not None:
            result['materialid_number'] = self.material_number
        if self.material_brand_number is not None:
            result['material_brand_number'] = self.material_brand_number
        if self.material_category_number is not None:
            result['material_category_number'] = self.material_category_number
        if self.sp_number is not None:
            result['spid_number'] = self.sp_number
        if self.include_forbidden is not None:
            result['include_forbidden'] = self.include_forbidden
        if self.include_zero is not None:
            result['include_zero'] = self.include_zero
        if self.material_source is not None:
            result['material_source'] = self.material_source
        if self.check_batch_kf_period is not None:
            result['check_batch_kfperiod'] = self.check_batch_kf_period
        if self.check_serial is not None:
            result['check_serial'] = self.check_serial
        if self.create_type is not None:
            result['create_type'] = self.create_type
        if self.remark is not None:
            result['remark'] = self.remark
        if self.bill_source is not None:
            result['billsource'] = self.bill_source
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('stockid_id') is not None:
            self.stock_id = m.get('stockid_id')
        if m.get('lockstatus') is not None:
            self.lock_status = m.get('lockstatus')
        if m.get('checktype') is not None:
            self.check_type = m.get('checktype')
        if m.get('checkdate') is not None:
            self.check_date = m.get('checkdate')
        if m.get('checkmodel') is not None:
            self.check_model = m.get('checkmodel')
        if m.get('checkerid_number') is not None:
            self.checkerid_number = m.get('checkerid_number')
        if m.get('checkscope') is not None:
            self.check_scope = m.get('checkscope')
        if m.get('materialid_number') is not None:
            self.material_number = m.get('materialid_number')
        if m.get('material_brand_number') is not None:
            self.material_brand_number = m.get('material_brand_number')
        if m.get('material_category_number') is not None:
            self.material_category_number = m.get('material_category_number')
        if m.get('spid_number') is not None:
            self.sp_number = m.get('spid_number')
        if m.get('include_forbidden') is not None:
            self.include_forbidden = m.get('include_forbidden')
        if m.get('include_zero') is not None:
            self.include_zero = m.get('include_zero')
        if m.get('material_source') is not None:
            self.material_source = m.get('material_source')
        if m.get('check_batch_kfperiod') is not None:
            self.check_batch_kf_period = m.get('check_batch_kfperiod')
        if m.get('check_serial') is not None:
            self.check_serial = m.get('check_serial')
        if m.get('create_type') is not None:
            self.create_type = m.get('create_type')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('billsource') is not None:
            self.bill_source = m.get('billsource')
        return self


class InvCheckTaskRequest(TeaModel):
    def __init__(
        self,
        body: InvCheckTaskRequestBody = None,
    ):
        self.body = body
        # 盘点任务保存

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvCheckTaskRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvCheckTaskListRequestBody(TeaModel):
    def __init__(
        self,
        check_model: str = None,
        start_date: str = None,
        end_date: str = None,
        start_bill_date: str = None,
        end_bill_date: str = None,
        search: str = None,
        page: int = None,
        page_size: int = None,
    ):
        # 盘点模式（所有：“”，单人盘点：“1”，多人盘点：“2”）
        self.check_model = check_model
        # 单据创建（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.start_date = start_date
        # 单据创建（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.end_date = end_date
        # 单据日期-开始日期（“yyyy-MM-dd”）
        self.start_bill_date = start_bill_date
        # 单据日期-结束日期（“yyyy-MM-dd”）
        self.end_bill_date = end_bill_date
        # 模糊搜索，支持单据编码、商品名称
        self.search = search
        # 当前页（默认1）
        self.page = page
        # 每页显示条数，（默认10，最大值100）
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check_model is not None:
            result['checkmodel'] = self.check_model
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.start_bill_date is not None:
            result['startbilldate'] = self.start_bill_date
        if self.end_bill_date is not None:
            result['endbilldate'] = self.end_bill_date
        if self.search is not None:
            result['search'] = self.search
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('checkmodel') is not None:
            self.check_model = m.get('checkmodel')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('startbilldate') is not None:
            self.start_bill_date = m.get('startbilldate')
        if m.get('endbilldate') is not None:
            self.end_bill_date = m.get('endbilldate')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        return self


class InvCheckTaskListRequest(TeaModel):
    def __init__(
        self,
        body: InvCheckTaskListRequestBody = None,
    ):
        self.body = body
        # 盘点任务列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvCheckTaskListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvCheckTaskDetailRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
    ):
        # 任务ID
        self.id = id

    def validate(self):
        self.validate_required(self.id, 'id')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class InvCheckTaskDetailRequest(TeaModel):
    def __init__(
        self,
        body: InvCheckTaskDetailRequestBody = None,
    ):
        self.body = body
        # 盘点任务详情

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvCheckTaskDetailRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvCheckTaskDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        name: str = None,
        stock_id: str = None,
        stock_name: str = None,
        stock_number: str = None,
        check_type: str = None,
        check_date: str = None,
        check_model: str = None,
        check_scope: str = None,
        include_forbidden: bool = None,
        include_zero: bool = None,
        material_source: str = None,
        check_batch_kf_period: bool = None,
        check_serial: bool = None,
        create_type: str = None,
        remark: str = None,
        material_category: dict = None,
        material_id: dict = None,
        sp_id: dict = None,
        material_brand: dict = None,
        checker_id: dict = None,
    ):
        # 任务ID
        self.id = id
        # 任务名称
        self.name = name
        # 仓库id
        self.stock_id = stock_id
        # 仓库名称
        self.stock_name = stock_name
        # 仓库编码
        self.stock_number = stock_number
        # 盘点类型（即时库存盘点：“1”，指定日期盘点：“2”）
        self.check_type = check_type
        # 盘点日期，指定日期盘点时才有
        self.check_date = check_date
        # 盘点模式（单人盘点：“1”，多人盘点：“2”）
        self.check_model = check_model
        # 盘点范围（全盘：“1”，抽盘：“2”）
        self.check_scope = check_scope
        # 包含禁用商品
        self.include_forbidden = include_forbidden
        # 包含零库存商品
        self.include_zero = include_zero
        # 商品来源（在盘点仓库中有交易记录的商品：“1”，商品资料中所有商品：“2”）
        self.material_source = material_source
        # 按批次保质期盘点
        self.check_batch_kf_period = check_batch_kf_period
        # 按序列号盘点
        self.check_serial = check_serial
        # 商品清单展示（空白盘点单：“1”，显示商品清单：“2”）
        self.create_type = create_type
        # 备注
        self.remark = remark
        # 商品分类
        self.material_category = material_category
        # 商品
        self.material_id = material_id
        # 仓位
        self.sp_id = sp_id
        # 商品品牌
        self.material_brand = material_brand
        # 客户名称
        self.checker_id = checker_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['name'] = self.name
        if self.stock_id is not None:
            result['stockid_id'] = self.stock_id
        if self.stock_name is not None:
            result['stockid_name'] = self.stock_name
        if self.stock_number is not None:
            result['stockid_number'] = self.stock_number
        if self.check_type is not None:
            result['checktype'] = self.check_type
        if self.check_date is not None:
            result['checkdate'] = self.check_date
        if self.check_model is not None:
            result['checkmodel'] = self.check_model
        if self.check_scope is not None:
            result['checkscope'] = self.check_scope
        if self.include_forbidden is not None:
            result['include_forbidden'] = self.include_forbidden
        if self.include_zero is not None:
            result['include_zero'] = self.include_zero
        if self.material_source is not None:
            result['material_source'] = self.material_source
        if self.check_batch_kf_period is not None:
            result['check_batch_kfperiod'] = self.check_batch_kf_period
        if self.check_serial is not None:
            result['check_serial'] = self.check_serial
        if self.create_type is not None:
            result['create_type'] = self.create_type
        if self.remark is not None:
            result['remark'] = self.remark
        if self.material_category is not None:
            result['material_category'] = self.material_category
        if self.material_id is not None:
            result['materialid'] = self.material_id
        if self.sp_id is not None:
            result['spid'] = self.sp_id
        if self.material_brand is not None:
            result['material_brand'] = self.material_brand
        if self.checker_id is not None:
            result['checkerid'] = self.checker_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('name') is not None:
            self.name = m.get('name')
        if m.get('stockid_id') is not None:
            self.stock_id = m.get('stockid_id')
        if m.get('stockid_name') is not None:
            self.stock_name = m.get('stockid_name')
        if m.get('stockid_number') is not None:
            self.stock_number = m.get('stockid_number')
        if m.get('checktype') is not None:
            self.check_type = m.get('checktype')
        if m.get('checkdate') is not None:
            self.check_date = m.get('checkdate')
        if m.get('checkmodel') is not None:
            self.check_model = m.get('checkmodel')
        if m.get('checkscope') is not None:
            self.check_scope = m.get('checkscope')
        if m.get('include_forbidden') is not None:
            self.include_forbidden = m.get('include_forbidden')
        if m.get('include_zero') is not None:
            self.include_zero = m.get('include_zero')
        if m.get('material_source') is not None:
            self.material_source = m.get('material_source')
        if m.get('check_batch_kfperiod') is not None:
            self.check_batch_kf_period = m.get('check_batch_kfperiod')
        if m.get('check_serial') is not None:
            self.check_serial = m.get('check_serial')
        if m.get('create_type') is not None:
            self.create_type = m.get('create_type')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('material_category') is not None:
            self.material_category = m.get('material_category')
        if m.get('materialid') is not None:
            self.material_id = m.get('materialid')
        if m.get('spid') is not None:
            self.sp_id = m.get('spid')
        if m.get('material_brand') is not None:
            self.material_brand = m.get('material_brand')
        if m.get('checkerid') is not None:
            self.checker_id = m.get('checkerid')
        return self


class InvCheckTaskDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: InvCheckTaskDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = InvCheckTaskDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class InvCheckBillMaterialEntity(TeaModel):
    def __init__(
        self,
        id: str = None,
        seq: str = None,
        material_id: str = None,
        sp_id: str = None,
        unit_id: str = None,
        base_unit_id: str = None,
        inv_base_qty: str = None,
        base_qty: str = None,
        inv_qty: str = None,
        qty: str = None,
        aux_unit_id: str = None,
        aux_inv_qty: str = None,
        aux_qty: str = None,
        auxprop_id: str = None,
        aux_id_1: str = None,
        aux_id_2: str = None,
        aux_id_3: str = None,
        aux_id_4: str = None,
        aux_id_5: str = None,
        barcode: str = None,
        batch_no: str = None,
        proplace: str = None,
        proreg_no: str = None,
        prolicense: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_type: str = None,
        kf_period: str = None,
        inv_sn_list: str = None,
        sn_list: str = None,
        comment: str = None,
        src_bill_no: str = None,
        src_bill_type_id: str = None,
        src_inter_id: str = None,
        src_bill_date: str = None,
        src_seq: str = None,
        src_entry_id: str = None,
    ):
        # 分录id，新增不传该字段，修改必传
        self.id = id
        # 分录序号
        self.seq = seq
        # 商品id
        self.material_id = material_id
        # 仓位id
        self.sp_id = sp_id
        # 单位id
        self.unit_id = unit_id
        # 单位id
        self.base_unit_id = base_unit_id
        # 基本账存数量
        self.inv_base_qty = inv_base_qty
        # 基本盘点数量
        self.base_qty = base_qty
        # 账存数量
        self.inv_qty = inv_qty
        # 盘点数量
        self.qty = qty
        # 辅助单位id
        self.aux_unit_id = aux_unit_id
        # 辅助账存数量
        self.aux_inv_qty = aux_inv_qty
        # 辅助盘点数量
        self.aux_qty = aux_qty
        # 辅助属性(辅助属性商品必填)
        self.auxprop_id = auxprop_id
        # 辅助属性分类对应的辅助属性1ID(辅助属性商品必填)
        self.aux_id_1 = aux_id_1
        # 辅助属性分类对应的辅助属性2ID(辅助属性商品必填)
        self.aux_id_2 = aux_id_2
        # 辅助属性分类对应的辅助属性3ID(辅助属性商品必填)
        self.aux_id_3 = aux_id_3
        # 辅助属性分类对应的辅助属性4ID(辅助属性商品必填)
        self.aux_id_4 = aux_id_4
        # 辅助属性分类对应的辅助属性5ID(辅助属性商品必填)
        self.aux_id_5 = aux_id_5
        # 条形码
        self.barcode = barcode
        # 批次号 (批次商品必填)
        self.batch_no = batch_no
        # 产地
        self.proplace = proplace
        # 注册证号
        self.proreg_no = proreg_no
        # 生产许可证号
        self.prolicense = prolicense
        # 生产日期
        self.kf_date = kf_date
        # 有效日期
        self.valid_date = valid_date
        # 保质期类型，1：天，2：月，3：年
        self.kf_type = kf_type
        # 保质期天数
        self.kf_period = kf_period
        # 账存序列号
        self.inv_sn_list = inv_sn_list
        # 序列号 格式：001:备注1;002:备注2 （序列号:序列号备注 多个序列号以英文分号字符;分隔）,序列号商品必填
        self.sn_list = sn_list
        # 行备注
        self.comment = comment
        # 源单编码
        self.src_bill_no = src_bill_no
        # 源单类型
        self.src_bill_type_id = src_bill_type_id
        # 源单内码
        self.src_inter_id = src_inter_id
        # 源单日期
        self.src_bill_date = src_bill_date
        # 源单行号
        self.src_seq = src_seq
        # 源单分录内码
        self.src_entry_id = src_entry_id

    def validate(self):
        self.validate_required(self.material_id, 'material_id')
        self.validate_required(self.unit_id, 'unit_id')
        self.validate_required(self.base_unit_id, 'base_unit_id')
        self.validate_required(self.inv_base_qty, 'inv_base_qty')
        self.validate_required(self.base_qty, 'base_qty')
        self.validate_required(self.inv_qty, 'inv_qty')
        self.validate_required(self.qty, 'qty')
        self.validate_required(self.aux_unit_id, 'aux_unit_id')
        self.validate_required(self.aux_inv_qty, 'aux_inv_qty')
        self.validate_required(self.aux_qty, 'aux_qty')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.seq is not None:
            result['seq'] = self.seq
        if self.material_id is not None:
            result['materialid_id'] = self.material_id
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.unit_id is not None:
            result['unit_id'] = self.unit_id
        if self.base_unit_id is not None:
            result['baseunit_id'] = self.base_unit_id
        if self.inv_base_qty is not None:
            result['inv_baseqty'] = self.inv_base_qty
        if self.base_qty is not None:
            result['baseqty'] = self.base_qty
        if self.inv_qty is not None:
            result['inv_qty'] = self.inv_qty
        if self.qty is not None:
            result['qty'] = self.qty
        if self.aux_unit_id is not None:
            result['auxunitid_id'] = self.aux_unit_id
        if self.aux_inv_qty is not None:
            result['aux_invqty'] = self.aux_inv_qty
        if self.aux_qty is not None:
            result['auxqty'] = self.aux_qty
        if self.auxprop_id is not None:
            result['auxpropid_id'] = self.auxprop_id
        if self.aux_id_1 is not None:
            result['auxid1_id'] = self.aux_id_1
        if self.aux_id_2 is not None:
            result['auxid2_id'] = self.aux_id_2
        if self.aux_id_3 is not None:
            result['auxid3_id'] = self.aux_id_3
        if self.aux_id_4 is not None:
            result['auxid4_id'] = self.aux_id_4
        if self.aux_id_5 is not None:
            result['auxid5_id'] = self.aux_id_5
        if self.barcode is not None:
            result['auxid5_id'] = self.barcode
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.proplace is not None:
            result['proplace'] = self.proplace
        if self.proreg_no is not None:
            result['proregno'] = self.proreg_no
        if self.prolicense is not None:
            result['prolicense'] = self.prolicense
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.inv_sn_list is not None:
            result['inv_sn_list'] = self.inv_sn_list
        if self.sn_list is not None:
            result['sn_list'] = self.sn_list
        if self.comment is not None:
            result['comment'] = self.comment
        if self.src_bill_no is not None:
            result['srcbillno'] = self.src_bill_no
        if self.src_bill_type_id is not None:
            result['srcbilltypeid_id'] = self.src_bill_type_id
        if self.src_inter_id is not None:
            result['srcinterid'] = self.src_inter_id
        if self.src_bill_date is not None:
            result['src_billdate'] = self.src_bill_date
        if self.src_seq is not None:
            result['srcseq'] = self.src_seq
        if self.src_entry_id is not None:
            result['srcentryid'] = self.src_entry_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('seq') is not None:
            self.seq = m.get('seq')
        if m.get('materialid_id') is not None:
            self.material_id = m.get('materialid_id')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('unit_id') is not None:
            self.unit_id = m.get('unit_id')
        if m.get('baseunit_id') is not None:
            self.base_unit_id = m.get('baseunit_id')
        if m.get('inv_baseqty') is not None:
            self.inv_base_qty = m.get('inv_baseqty')
        if m.get('baseqty') is not None:
            self.base_qty = m.get('baseqty')
        if m.get('inv_qty') is not None:
            self.inv_qty = m.get('inv_qty')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('auxunitid_id') is not None:
            self.aux_unit_id = m.get('auxunitid_id')
        if m.get('aux_invqty') is not None:
            self.aux_inv_qty = m.get('aux_invqty')
        if m.get('auxqty') is not None:
            self.aux_qty = m.get('auxqty')
        if m.get('auxpropid_id') is not None:
            self.auxprop_id = m.get('auxpropid_id')
        if m.get('auxid1_id') is not None:
            self.aux_id_1 = m.get('auxid1_id')
        if m.get('auxid2_id') is not None:
            self.aux_id_2 = m.get('auxid2_id')
        if m.get('auxid3_id') is not None:
            self.aux_id_3 = m.get('auxid3_id')
        if m.get('auxid4_id') is not None:
            self.aux_id_4 = m.get('auxid4_id')
        if m.get('auxid5_id') is not None:
            self.aux_id_5 = m.get('auxid5_id')
        if m.get('auxid5_id') is not None:
            self.barcode = m.get('auxid5_id')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.proplace = m.get('proplace')
        if m.get('proregno') is not None:
            self.proreg_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.prolicense = m.get('prolicense')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('inv_sn_list') is not None:
            self.inv_sn_list = m.get('inv_sn_list')
        if m.get('sn_list') is not None:
            self.sn_list = m.get('sn_list')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('srcbillno') is not None:
            self.src_bill_no = m.get('srcbillno')
        if m.get('srcbilltypeid_id') is not None:
            self.src_bill_type_id = m.get('srcbilltypeid_id')
        if m.get('srcinterid') is not None:
            self.src_inter_id = m.get('srcinterid')
        if m.get('src_billdate') is not None:
            self.src_bill_date = m.get('src_billdate')
        if m.get('srcseq') is not None:
            self.src_seq = m.get('srcseq')
        if m.get('srcentryid') is not None:
            self.src_entry_id = m.get('srcentryid')
        return self


class InvCheckBillSaveRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_no: str = None,
        bill_date: str = None,
        check_task_id: str = None,
        emp_id: str = None,
        remark: str = None,
        material_entity: List[InvCheckBillMaterialEntity] = None,
    ):
        # 单据ID，修改单据时必填，新增不传该字段
        self.id = id
        # 单据编码，修改单据时必填，新增不传该字段
        self.bill_no = bill_no
        # 单据日期
        self.bill_date = bill_date
        # 盘点任务
        self.check_task_id = check_task_id
        # 盘点人
        self.emp_id = emp_id
        # 备注
        self.remark = remark
        # 商品分录
        self.material_entity = material_entity

    def validate(self):
        if self.material_entity:
            for k in self.material_entity:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_no is not None:
            result['billno'] = self.bill_no
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.check_task_id is not None:
            result['check_task_id'] = self.check_task_id
        if self.emp_id is not None:
            result['empid_id'] = self.emp_id
        if self.remark is not None:
            result['remark'] = self.remark
        result['material_entity'] = []
        if self.material_entity is not None:
            for k in self.material_entity:
                result['material_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billno') is not None:
            self.bill_no = m.get('billno')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('check_task_id') is not None:
            self.check_task_id = m.get('check_task_id')
        if m.get('empid_id') is not None:
            self.emp_id = m.get('empid_id')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        self.material_entity = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = InvCheckBillMaterialEntity()
                self.material_entity.append(temp_model.from_map(k))
        return self


class InvCheckBillSaveRequest(TeaModel):
    def __init__(
        self,
        body: InvCheckBillSaveRequestBody = None,
    ):
        self.body = body
        # 盘点单商品分录

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvCheckBillSaveRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvMultiCheckBillListRequestBody(TeaModel):
    def __init__(
        self,
        stock_id: List[str] = None,
        bill_status: str = None,
        check_status: str = None,
        check_model: str = None,
        check_task: str = None,
        start_date: str = None,
        end_date: str = None,
        select_fields: str = None,
        emp_id: List[str] = None,
        creator: List[str] = None,
        search: str = None,
        page: int = None,
        page_size: int = None,
    ):
        # 仓库id
        self.stock_id = stock_id
        # 单据状态（所有：“”，已审核：“C”，未审核：“Z”）
        self.bill_status = bill_status
        # 单据状态（所有：“”，未盘点：“D”，盘点中：“E”，未汇总：“F”，已汇总：“G”，待盈亏处理：“A”，盈亏处理中：“Z”，盘点完成：“C”）
        self.check_status = check_status
        # 盘点类型（所有：“”，单人盘点：“1”，多人盘点：“2”）
        self.check_model = check_model
        # 盘点任务id
        self.check_task = check_task
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.start_date = start_date
        # 结束日期（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.end_date = end_date
        # 自定义查询字段，如（"material_entity.materialid.id"）
        self.select_fields = select_fields
        # 盘点人id
        self.emp_id = emp_id
        # 制单人id
        self.creator = creator
        # 模糊搜索，单据编码、商品名称、任务名称、仓库名称
        self.search = search
        # 当前页（默认1）
        self.page = page
        # 每页显示条数，（默认10，最大值100）
        self.page_size = page_size

    def validate(self):
        self.validate_required(self.emp_id, 'emp_id')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.stock_id is not None:
            result['stockid'] = self.stock_id
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.check_status is not None:
            result['checkstatus'] = self.check_status
        if self.check_model is not None:
            result['checkmodel'] = self.check_model
        if self.check_task is not None:
            result['check_task'] = self.check_task
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.select_fields is not None:
            result['selectfields'] = self.select_fields
        if self.emp_id is not None:
            result['empid'] = self.emp_id
        if self.creator is not None:
            result['creator'] = self.creator
        if self.search is not None:
            result['search'] = self.search
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('stockid') is not None:
            self.stock_id = m.get('stockid')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('checkstatus') is not None:
            self.check_status = m.get('checkstatus')
        if m.get('checkmodel') is not None:
            self.check_model = m.get('checkmodel')
        if m.get('check_task') is not None:
            self.check_task = m.get('check_task')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('selectfields') is not None:
            self.select_fields = m.get('selectfields')
        if m.get('empid') is not None:
            self.emp_id = m.get('empid')
        if m.get('creator') is not None:
            self.creator = m.get('creator')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        return self


class InvMultiCheckBillListRequest(TeaModel):
    def __init__(
        self,
        body: InvMultiCheckBillListRequestBody = None,
    ):
        self.body = body
        # 分量盘点单列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvMultiCheckBillListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvMultiCheckBillItemsRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
    ):
        # 盘点任务id
        self.id = id

    def validate(self):
        self.validate_required(self.id, 'id')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['stockid'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('stockid') is not None:
            self.id = m.get('stockid')
        return self


class InvMultiCheckBillItemsRequest(TeaModel):
    def __init__(
        self,
        body: InvMultiCheckBillItemsRequestBody = None,
    ):
        self.body = body
        # 分量盘点单生成分录清单

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvMultiCheckBillItemsRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvMultiBillMaterialDetail(TeaModel):
    def __init__(
        self,
        seq: str = None,
        id: str = None,
        picture: str = None,
        material_id: str = None,
        material_name: str = None,
        material_number: str = None,
        material_is_multi_unit: bool = None,
        material_is_serial: bool = None,
        material_is_asstattr: bool = None,
        material_is_kfperiod: bool = None,
        material_is_batch: bool = None,
        material_model: str = None,
        sp_id: str = None,
        sp_name: str = None,
        sp_number: str = None,
        auxprop_id: str = None,
        auxprop_name: str = None,
        auxprop_number: str = None,
        aux_id_1: str = None,
        aux_id_1name: str = None,
        aux_id_1number: str = None,
        aux_id_2: str = None,
        aux_id_2name: str = None,
        aux_id_2number: str = None,
        aux_id_3: str = None,
        aux_id_3name: str = None,
        aux_id_3number: str = None,
        aux_id_4: str = None,
        aux_id_4name: str = None,
        aux_id_4number: str = None,
        aux_id_5: str = None,
        aux_id_5name: str = None,
        aux_id_5number: str = None,
        barcode: str = None,
        batch_no: str = None,
        proplace: str = None,
        proreg_no: str = None,
        prolicense: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_type: str = None,
        kf_period: str = None,
        conversion_rate: str = None,
        base_unit_id: str = None,
        base_unit_name: str = None,
        base_unit_number: str = None,
        inv_base_qty: str = None,
        base_qty: str = None,
        unit_id: str = None,
        unit_name: str = None,
        unit_number: str = None,
        inv_qty: str = None,
        qty: str = None,
        aux_unit_id: str = None,
        aux_unit_name: str = None,
        aux_unit_number: str = None,
        aux_qty: str = None,
        aux_inv_qty: str = None,
        comment: str = None,
        sn_list: str = None,
        inv_sn_list: str = None,
        src_bill_no: str = None,
        src_bill_type_id: str = None,
        src_bill_type_name: str = None,
        src_bill_type_number: str = None,
        src_inter_id: str = None,
        src_bill_date: str = None,
        src_seq: str = None,
        src_entry_id: str = None,
    ):
        # 分录序号
        self.seq = seq
        # 分录ID
        self.id = id
        # 图片url
        self.picture = picture
        # 商品id
        self.material_id = material_id
        # 商品名称
        self.material_name = material_name
        # 商品编码
        self.material_number = material_number
        # 商品是否多单位
        self.material_is_multi_unit = material_is_multi_unit
        # 商品是否序列号
        self.material_is_serial = material_is_serial
        # 商品是否启用辅助属性
        self.material_is_asstattr = material_is_asstattr
        # 商品是否开启保质期
        self.material_is_kfperiod = material_is_kfperiod
        # 商品是否开启批次
        self.material_is_batch = material_is_batch
        # 商品规格
        self.material_model = material_model
        # 仓位id
        self.sp_id = sp_id
        # 仓位名称
        self.sp_name = sp_name
        # 仓位编码
        self.sp_number = sp_number
        # 辅助属性id
        self.auxprop_id = auxprop_id
        # 辅助属性名称
        self.auxprop_name = auxprop_name
        # 辅助属性编码
        self.auxprop_number = auxprop_number
        # 辅助属性1id
        self.aux_id_1 = aux_id_1
        # 辅助属性1名称
        self.aux_id_1name = aux_id_1name
        # 辅助属性1编码
        self.aux_id_1number = aux_id_1number
        # 辅助属性2id
        self.aux_id_2 = aux_id_2
        # 辅助属性2名称
        self.aux_id_2name = aux_id_2name
        # 辅助属性2编码
        self.aux_id_2number = aux_id_2number
        # 辅助属性3id
        self.aux_id_3 = aux_id_3
        # 辅助属性3名称
        self.aux_id_3name = aux_id_3name
        # 辅助属性3编码
        self.aux_id_3number = aux_id_3number
        # 辅助属性4id
        self.aux_id_4 = aux_id_4
        # 辅助属性4名称
        self.aux_id_4name = aux_id_4name
        # 辅助属性4编码
        self.aux_id_4number = aux_id_4number
        # 辅助属性5id
        self.aux_id_5 = aux_id_5
        # 辅助属性5名称
        self.aux_id_5name = aux_id_5name
        # 辅助属性5编码
        self.aux_id_5number = aux_id_5number
        # 条形码
        self.barcode = barcode
        # 批次号
        self.batch_no = batch_no
        # 产地
        self.proplace = proplace
        # 注册证号
        self.proreg_no = proreg_no
        # 生产许可证号
        self.prolicense = prolicense
        # 生产日期
        self.kf_date = kf_date
        # 有效日期
        self.valid_date = valid_date
        # 保质期类型，1：天，2：月，3：年
        self.kf_type = kf_type
        # 保质期天数
        self.kf_period = kf_period
        # 换算公式
        self.conversion_rate = conversion_rate
        # 基本单位id
        self.base_unit_id = base_unit_id
        # 基本单位名称
        self.base_unit_name = base_unit_name
        # 基本单位编码
        self.base_unit_number = base_unit_number
        # 基本账存数量
        self.inv_base_qty = inv_base_qty
        # 基本盘点数量
        self.base_qty = base_qty
        # 单位id
        self.unit_id = unit_id
        # 单位名称
        self.unit_name = unit_name
        # 单位编码
        self.unit_number = unit_number
        # 账存数量
        self.inv_qty = inv_qty
        # 盘点数量
        self.qty = qty
        # 辅助单位id
        self.aux_unit_id = aux_unit_id
        # 辅助单位名称
        self.aux_unit_name = aux_unit_name
        # 辅助单位编码
        self.aux_unit_number = aux_unit_number
        # 辅助盘点数量
        self.aux_qty = aux_qty
        # 辅助账存数量
        self.aux_inv_qty = aux_inv_qty
        # 行备注
        self.comment = comment
        # 序列号 （以分号分隔，备注可以不填；如：sn_list:0001;0002）
        self.sn_list = sn_list
        # 账存序列号 （以分号分隔，备注可以不填；如：inv_sn_list:0001;0002）
        self.inv_sn_list = inv_sn_list
        # 源单编号
        self.src_bill_no = src_bill_no
        # 源单类型id
        self.src_bill_type_id = src_bill_type_id
        # 源单类型名称
        self.src_bill_type_name = src_bill_type_name
        # 源单类型编码
        self.src_bill_type_number = src_bill_type_number
        # 源单内码
        self.src_inter_id = src_inter_id
        # 源单日期
        self.src_bill_date = src_bill_date
        # 源单行号
        self.src_seq = src_seq
        # 源单分录内码
        self.src_entry_id = src_entry_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.seq is not None:
            result['seq'] = self.seq
        if self.id is not None:
            result['id'] = self.id
        if self.picture is not None:
            result['picture'] = self.picture
        if self.material_id is not None:
            result['materialid_id'] = self.material_id
        if self.material_name is not None:
            result['materialid_name'] = self.material_name
        if self.material_number is not None:
            result['materialid_number'] = self.material_number
        if self.material_is_multi_unit is not None:
            result['materialid_ismulti_unit'] = self.material_is_multi_unit
        if self.material_is_serial is not None:
            result['materialid_isserial'] = self.material_is_serial
        if self.material_is_asstattr is not None:
            result['materialid_isasstattr'] = self.material_is_asstattr
        if self.material_is_kfperiod is not None:
            result['materialid_iskfperiod'] = self.material_is_kfperiod
        if self.material_is_batch is not None:
            result['materialid_isbatch'] = self.material_is_batch
        if self.material_model is not None:
            result['materialid_model'] = self.material_model
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.sp_name is not None:
            result['spid_name'] = self.sp_name
        if self.sp_number is not None:
            result['spid_number'] = self.sp_number
        if self.auxprop_id is not None:
            result['auxpropid_id'] = self.auxprop_id
        if self.auxprop_name is not None:
            result['auxpropid_name'] = self.auxprop_name
        if self.auxprop_number is not None:
            result['auxpropid_number'] = self.auxprop_number
        if self.aux_id_1 is not None:
            result['auxid1_id'] = self.aux_id_1
        if self.aux_id_1name is not None:
            result['auxid1_name'] = self.aux_id_1name
        if self.aux_id_1number is not None:
            result['auxid1_number'] = self.aux_id_1number
        if self.aux_id_2 is not None:
            result['auxid2_id'] = self.aux_id_2
        if self.aux_id_2name is not None:
            result['auxid2_name'] = self.aux_id_2name
        if self.aux_id_2number is not None:
            result['auxid2_number'] = self.aux_id_2number
        if self.aux_id_3 is not None:
            result['auxid3_id'] = self.aux_id_3
        if self.aux_id_3name is not None:
            result['auxid3_name'] = self.aux_id_3name
        if self.aux_id_3number is not None:
            result['auxid3_number'] = self.aux_id_3number
        if self.aux_id_4 is not None:
            result['auxid4_id'] = self.aux_id_4
        if self.aux_id_4name is not None:
            result['auxid4_name'] = self.aux_id_4name
        if self.aux_id_4number is not None:
            result['auxid4_number'] = self.aux_id_4number
        if self.aux_id_5 is not None:
            result['auxid5_id'] = self.aux_id_5
        if self.aux_id_5name is not None:
            result['auxid5_name'] = self.aux_id_5name
        if self.aux_id_5number is not None:
            result['auxid5_number'] = self.aux_id_5number
        if self.barcode is not None:
            result['barcode'] = self.barcode
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.proplace is not None:
            result['proplace'] = self.proplace
        if self.proreg_no is not None:
            result['proregno'] = self.proreg_no
        if self.prolicense is not None:
            result['prolicense'] = self.prolicense
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.conversion_rate is not None:
            result['conversionrate'] = self.conversion_rate
        if self.base_unit_id is not None:
            result['baseunit_id'] = self.base_unit_id
        if self.base_unit_name is not None:
            result['baseunit_name'] = self.base_unit_name
        if self.base_unit_number is not None:
            result['baseunit_number'] = self.base_unit_number
        if self.inv_base_qty is not None:
            result['inv_baseqty'] = self.inv_base_qty
        if self.base_qty is not None:
            result['baseqty'] = self.base_qty
        if self.unit_id is not None:
            result['unit_id'] = self.unit_id
        if self.unit_name is not None:
            result['unit_name'] = self.unit_name
        if self.unit_number is not None:
            result['unit_number'] = self.unit_number
        if self.inv_qty is not None:
            result['inv_qty'] = self.inv_qty
        if self.qty is not None:
            result['qty'] = self.qty
        if self.aux_unit_id is not None:
            result['auxunitid_id'] = self.aux_unit_id
        if self.aux_unit_name is not None:
            result['auxunitid_name'] = self.aux_unit_name
        if self.aux_unit_number is not None:
            result['auxunitid_number'] = self.aux_unit_number
        if self.aux_qty is not None:
            result['auxqty'] = self.aux_qty
        if self.aux_inv_qty is not None:
            result['aux_invqty'] = self.aux_inv_qty
        if self.comment is not None:
            result['comment'] = self.comment
        if self.sn_list is not None:
            result['sn_list'] = self.sn_list
        if self.inv_sn_list is not None:
            result['inv_sn_list'] = self.inv_sn_list
        if self.src_bill_no is not None:
            result['srcbillno'] = self.src_bill_no
        if self.src_bill_type_id is not None:
            result['srcbilltypeid_id'] = self.src_bill_type_id
        if self.src_bill_type_name is not None:
            result['srcbilltypeid_name'] = self.src_bill_type_name
        if self.src_bill_type_number is not None:
            result['srcbilltypeid_number'] = self.src_bill_type_number
        if self.src_inter_id is not None:
            result['srcinterid'] = self.src_inter_id
        if self.src_bill_date is not None:
            result['src_billdate'] = self.src_bill_date
        if self.src_seq is not None:
            result['srcseq'] = self.src_seq
        if self.src_entry_id is not None:
            result['srcentryid'] = self.src_entry_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('seq') is not None:
            self.seq = m.get('seq')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('picture') is not None:
            self.picture = m.get('picture')
        if m.get('materialid_id') is not None:
            self.material_id = m.get('materialid_id')
        if m.get('materialid_name') is not None:
            self.material_name = m.get('materialid_name')
        if m.get('materialid_number') is not None:
            self.material_number = m.get('materialid_number')
        if m.get('materialid_ismulti_unit') is not None:
            self.material_is_multi_unit = m.get('materialid_ismulti_unit')
        if m.get('materialid_isserial') is not None:
            self.material_is_serial = m.get('materialid_isserial')
        if m.get('materialid_isasstattr') is not None:
            self.material_is_asstattr = m.get('materialid_isasstattr')
        if m.get('materialid_iskfperiod') is not None:
            self.material_is_kfperiod = m.get('materialid_iskfperiod')
        if m.get('materialid_isbatch') is not None:
            self.material_is_batch = m.get('materialid_isbatch')
        if m.get('materialid_model') is not None:
            self.material_model = m.get('materialid_model')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('spid_name') is not None:
            self.sp_name = m.get('spid_name')
        if m.get('spid_number') is not None:
            self.sp_number = m.get('spid_number')
        if m.get('auxpropid_id') is not None:
            self.auxprop_id = m.get('auxpropid_id')
        if m.get('auxpropid_name') is not None:
            self.auxprop_name = m.get('auxpropid_name')
        if m.get('auxpropid_number') is not None:
            self.auxprop_number = m.get('auxpropid_number')
        if m.get('auxid1_id') is not None:
            self.aux_id_1 = m.get('auxid1_id')
        if m.get('auxid1_name') is not None:
            self.aux_id_1name = m.get('auxid1_name')
        if m.get('auxid1_number') is not None:
            self.aux_id_1number = m.get('auxid1_number')
        if m.get('auxid2_id') is not None:
            self.aux_id_2 = m.get('auxid2_id')
        if m.get('auxid2_name') is not None:
            self.aux_id_2name = m.get('auxid2_name')
        if m.get('auxid2_number') is not None:
            self.aux_id_2number = m.get('auxid2_number')
        if m.get('auxid3_id') is not None:
            self.aux_id_3 = m.get('auxid3_id')
        if m.get('auxid3_name') is not None:
            self.aux_id_3name = m.get('auxid3_name')
        if m.get('auxid3_number') is not None:
            self.aux_id_3number = m.get('auxid3_number')
        if m.get('auxid4_id') is not None:
            self.aux_id_4 = m.get('auxid4_id')
        if m.get('auxid4_name') is not None:
            self.aux_id_4name = m.get('auxid4_name')
        if m.get('auxid4_number') is not None:
            self.aux_id_4number = m.get('auxid4_number')
        if m.get('auxid5_id') is not None:
            self.aux_id_5 = m.get('auxid5_id')
        if m.get('auxid5_name') is not None:
            self.aux_id_5name = m.get('auxid5_name')
        if m.get('auxid5_number') is not None:
            self.aux_id_5number = m.get('auxid5_number')
        if m.get('barcode') is not None:
            self.barcode = m.get('barcode')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.proplace = m.get('proplace')
        if m.get('proregno') is not None:
            self.proreg_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.prolicense = m.get('prolicense')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('conversionrate') is not None:
            self.conversion_rate = m.get('conversionrate')
        if m.get('baseunit_id') is not None:
            self.base_unit_id = m.get('baseunit_id')
        if m.get('baseunit_name') is not None:
            self.base_unit_name = m.get('baseunit_name')
        if m.get('baseunit_number') is not None:
            self.base_unit_number = m.get('baseunit_number')
        if m.get('inv_baseqty') is not None:
            self.inv_base_qty = m.get('inv_baseqty')
        if m.get('baseqty') is not None:
            self.base_qty = m.get('baseqty')
        if m.get('unit_id') is not None:
            self.unit_id = m.get('unit_id')
        if m.get('unit_name') is not None:
            self.unit_name = m.get('unit_name')
        if m.get('unit_number') is not None:
            self.unit_number = m.get('unit_number')
        if m.get('inv_qty') is not None:
            self.inv_qty = m.get('inv_qty')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('auxunitid_id') is not None:
            self.aux_unit_id = m.get('auxunitid_id')
        if m.get('auxunitid_name') is not None:
            self.aux_unit_name = m.get('auxunitid_name')
        if m.get('auxunitid_number') is not None:
            self.aux_unit_number = m.get('auxunitid_number')
        if m.get('auxqty') is not None:
            self.aux_qty = m.get('auxqty')
        if m.get('aux_invqty') is not None:
            self.aux_inv_qty = m.get('aux_invqty')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('sn_list') is not None:
            self.sn_list = m.get('sn_list')
        if m.get('inv_sn_list') is not None:
            self.inv_sn_list = m.get('inv_sn_list')
        if m.get('srcbillno') is not None:
            self.src_bill_no = m.get('srcbillno')
        if m.get('srcbilltypeid_id') is not None:
            self.src_bill_type_id = m.get('srcbilltypeid_id')
        if m.get('srcbilltypeid_name') is not None:
            self.src_bill_type_name = m.get('srcbilltypeid_name')
        if m.get('srcbilltypeid_number') is not None:
            self.src_bill_type_number = m.get('srcbilltypeid_number')
        if m.get('srcinterid') is not None:
            self.src_inter_id = m.get('srcinterid')
        if m.get('src_billdate') is not None:
            self.src_bill_date = m.get('src_billdate')
        if m.get('srcseq') is not None:
            self.src_seq = m.get('srcseq')
        if m.get('srcentryid') is not None:
            self.src_entry_id = m.get('srcentryid')
        return self


class InvMultiBillDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_no: str = None,
        bill_date: str = None,
        bill_status: str = None,
        create_time: str = None,
        modify_time: str = None,
        emp_id: str = None,
        emp_name: str = None,
        emp_number: str = None,
        creator_id: str = None,
        creatorid_name: str = None,
        creatorid_number: str = None,
        modifier_id: str = None,
        modifier_name: str = None,
        modifier_number: str = None,
        remark: str = None,
        check_task_stock_id: str = None,
        check_task_stock_name: str = None,
        check_task_stock_number: str = None,
        material_entity: List[InvMultiBillMaterialDetail] = None,
    ):
        # 单据ID
        self.id = id
        # 单据编码
        self.bill_no = bill_no
        # 单据日期
        self.bill_date = bill_date
        # 单据状态，Z：未审核，C：已审核
        self.bill_status = bill_status
        # 创建时间
        self.create_time = create_time
        # 修改时间
        self.modify_time = modify_time
        # 盘点人id
        self.emp_id = emp_id
        # 盘点人名称
        self.emp_name = emp_name
        # 盘点人编码
        self.emp_number = emp_number
        # 创建人id
        self.creator_id = creator_id
        # 创建人名称
        self.creatorid_name = creatorid_name
        # 创建人编码
        self.creatorid_number = creatorid_number
        # 修改人id
        self.modifier_id = modifier_id
        # 修改人名称
        self.modifier_name = modifier_name
        # 修改人编码
        self.modifier_number = modifier_number
        # 备注
        self.remark = remark
        # 仓库id
        self.check_task_stock_id = check_task_stock_id
        # 仓库名称
        self.check_task_stock_name = check_task_stock_name
        # 仓库编码
        self.check_task_stock_number = check_task_stock_number
        # 商品分录
        self.material_entity = material_entity

    def validate(self):
        if self.material_entity:
            for k in self.material_entity:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_no is not None:
            result['billno'] = self.bill_no
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.create_time is not None:
            result['createtime'] = self.create_time
        if self.modify_time is not None:
            result['modifytime'] = self.modify_time
        if self.emp_id is not None:
            result['empid_id'] = self.emp_id
        if self.emp_name is not None:
            result['empid_name'] = self.emp_name
        if self.emp_number is not None:
            result['empid_number'] = self.emp_number
        if self.creator_id is not None:
            result['creatorid_id'] = self.creator_id
        if self.creatorid_name is not None:
            result['creatorid_name'] = self.creatorid_name
        if self.creatorid_number is not None:
            result['creatorid_number'] = self.creatorid_number
        if self.modifier_id is not None:
            result['modifierid_id'] = self.modifier_id
        if self.modifier_name is not None:
            result['modifierid_name'] = self.modifier_name
        if self.modifier_number is not None:
            result['modifierid_number'] = self.modifier_number
        if self.remark is not None:
            result['remark'] = self.remark
        if self.check_task_stock_id is not None:
            result['check_task_stockid_id'] = self.check_task_stock_id
        if self.check_task_stock_name is not None:
            result['check_task_stockid_name'] = self.check_task_stock_name
        if self.check_task_stock_number is not None:
            result['check_task_stockid_number'] = self.check_task_stock_number
        result['material_entity'] = []
        if self.material_entity is not None:
            for k in self.material_entity:
                result['material_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billno') is not None:
            self.bill_no = m.get('billno')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('createtime') is not None:
            self.create_time = m.get('createtime')
        if m.get('modifytime') is not None:
            self.modify_time = m.get('modifytime')
        if m.get('empid_id') is not None:
            self.emp_id = m.get('empid_id')
        if m.get('empid_name') is not None:
            self.emp_name = m.get('empid_name')
        if m.get('empid_number') is not None:
            self.emp_number = m.get('empid_number')
        if m.get('creatorid_id') is not None:
            self.creator_id = m.get('creatorid_id')
        if m.get('creatorid_name') is not None:
            self.creatorid_name = m.get('creatorid_name')
        if m.get('creatorid_number') is not None:
            self.creatorid_number = m.get('creatorid_number')
        if m.get('modifierid_id') is not None:
            self.modifier_id = m.get('modifierid_id')
        if m.get('modifierid_name') is not None:
            self.modifier_name = m.get('modifierid_name')
        if m.get('modifierid_number') is not None:
            self.modifier_number = m.get('modifierid_number')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('check_task_stockid_id') is not None:
            self.check_task_stock_id = m.get('check_task_stockid_id')
        if m.get('check_task_stockid_name') is not None:
            self.check_task_stock_name = m.get('check_task_stockid_name')
        if m.get('check_task_stockid_number') is not None:
            self.check_task_stock_number = m.get('check_task_stockid_number')
        self.material_entity = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = InvMultiBillMaterialDetail()
                self.material_entity.append(temp_model.from_map(k))
        return self


class InvMultiBillDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: InvMultiBillDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = InvMultiBillDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class InvBillDetailMaterialDetail(TeaModel):
    def __init__(
        self,
        seq: str = None,
        id: str = None,
        picture: str = None,
        material_id: str = None,
        material_name: str = None,
        material_number: str = None,
        material_is_multi_unit: bool = None,
        material_is_serial: bool = None,
        material_is_asstattr: bool = None,
        material_is_kfperiod: bool = None,
        material_is_batch: bool = None,
        material_model: str = None,
        sp_id: str = None,
        sp_name: str = None,
        sp_number: str = None,
        auxprop_id: str = None,
        auxprop_name: str = None,
        auxprop_number: str = None,
        aux_id_1: str = None,
        aux_id_1name: str = None,
        aux_id_1number: str = None,
        aux_id_2: str = None,
        aux_id_2name: str = None,
        aux_id_2number: str = None,
        aux_id_3: str = None,
        aux_id_3name: str = None,
        aux_id_3number: str = None,
        aux_id_4: str = None,
        aux_id_4name: str = None,
        aux_id_4number: str = None,
        aux_id_5: str = None,
        aux_id_5name: str = None,
        aux_id_5number: str = None,
        barcode: str = None,
        batch_no: str = None,
        proplace: str = None,
        proreg_no: str = None,
        prolicense: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_type: str = None,
        kf_period: str = None,
        conversion_rate: str = None,
        base_unit_id: str = None,
        base_unit_name: str = None,
        base_unit_number: str = None,
        inv_base_qty: str = None,
        base_qty: str = None,
        unit_id: str = None,
        unit_name: str = None,
        unit_number: str = None,
        inv_qty: str = None,
        qty: str = None,
        aux_unit_id: str = None,
        aux_unit_name: str = None,
        aux_unit_number: str = None,
        aux_qty: str = None,
        aux_inv_qty: str = None,
        comment: str = None,
        sn_list: str = None,
        inv_sn_list: str = None,
        src_bill_no: str = None,
        src_bill_type_id: str = None,
        src_bill_type_name: str = None,
        src_bill_type_number: str = None,
        src_inter_id: str = None,
        src_bill_date: str = None,
        src_seq: str = None,
        src_entry_id: str = None,
    ):
        # 分录序号
        self.seq = seq
        # 分录ID
        self.id = id
        # 图片url
        self.picture = picture
        # 商品id
        self.material_id = material_id
        # 商品名称
        self.material_name = material_name
        # 商品编码
        self.material_number = material_number
        # 商品是否多单位
        self.material_is_multi_unit = material_is_multi_unit
        # 商品是否序列号
        self.material_is_serial = material_is_serial
        # 商品是否启用辅助属性
        self.material_is_asstattr = material_is_asstattr
        # 商品是否开启保质期
        self.material_is_kfperiod = material_is_kfperiod
        # 商品是否开启批次
        self.material_is_batch = material_is_batch
        # 商品规格
        self.material_model = material_model
        # 仓位id
        self.sp_id = sp_id
        # 仓位名称
        self.sp_name = sp_name
        # 仓位编码
        self.sp_number = sp_number
        # 辅助属性id
        self.auxprop_id = auxprop_id
        # 辅助属性名称
        self.auxprop_name = auxprop_name
        # 辅助属性编码
        self.auxprop_number = auxprop_number
        # 辅助属性1id
        self.aux_id_1 = aux_id_1
        # 辅助属性1名称
        self.aux_id_1name = aux_id_1name
        # 辅助属性1编码
        self.aux_id_1number = aux_id_1number
        # 辅助属性2id
        self.aux_id_2 = aux_id_2
        # 辅助属性2名称
        self.aux_id_2name = aux_id_2name
        # 辅助属性2编码
        self.aux_id_2number = aux_id_2number
        # 辅助属性3id
        self.aux_id_3 = aux_id_3
        # 辅助属性3名称
        self.aux_id_3name = aux_id_3name
        # 辅助属性3编码
        self.aux_id_3number = aux_id_3number
        # 辅助属性4id
        self.aux_id_4 = aux_id_4
        # 辅助属性4名称
        self.aux_id_4name = aux_id_4name
        # 辅助属性4编码
        self.aux_id_4number = aux_id_4number
        # 辅助属性5id
        self.aux_id_5 = aux_id_5
        # 辅助属性5名称
        self.aux_id_5name = aux_id_5name
        # 辅助属性5编码
        self.aux_id_5number = aux_id_5number
        # 条形码
        self.barcode = barcode
        # 批次号
        self.batch_no = batch_no
        # 产地
        self.proplace = proplace
        # 注册证号
        self.proreg_no = proreg_no
        # 生产许可证号
        self.prolicense = prolicense
        # 生产日期
        self.kf_date = kf_date
        # 有效日期
        self.valid_date = valid_date
        # 保质期类型，1：天，2：月，3：年
        self.kf_type = kf_type
        # 保质期天数
        self.kf_period = kf_period
        # 换算公式
        self.conversion_rate = conversion_rate
        # 基本单位id
        self.base_unit_id = base_unit_id
        # 基本单位名称
        self.base_unit_name = base_unit_name
        # 基本单位编码
        self.base_unit_number = base_unit_number
        # 基本账存数量
        self.inv_base_qty = inv_base_qty
        # 基本盘点数量
        self.base_qty = base_qty
        # 单位id
        self.unit_id = unit_id
        # 单位名称
        self.unit_name = unit_name
        # 单位编码
        self.unit_number = unit_number
        # 账存数量
        self.inv_qty = inv_qty
        # 盘点数量
        self.qty = qty
        # 辅助单位id
        self.aux_unit_id = aux_unit_id
        # 辅助单位名称
        self.aux_unit_name = aux_unit_name
        # 辅助单位编码
        self.aux_unit_number = aux_unit_number
        # 辅助盘点数量
        self.aux_qty = aux_qty
        # 辅助账存数量
        self.aux_inv_qty = aux_inv_qty
        # 行备注
        self.comment = comment
        # 序列号 （以分号分隔，备注可以不填；如：sn_list:0001;0002）
        self.sn_list = sn_list
        # 账存序列号 （以分号分隔，备注可以不填；如：inv_sn_list:0001;0002）
        self.inv_sn_list = inv_sn_list
        # 源单编号
        self.src_bill_no = src_bill_no
        # 源单类型id
        self.src_bill_type_id = src_bill_type_id
        # 源单类型名称
        self.src_bill_type_name = src_bill_type_name
        # 源单类型编码
        self.src_bill_type_number = src_bill_type_number
        # 源单内码
        self.src_inter_id = src_inter_id
        # 源单日期
        self.src_bill_date = src_bill_date
        # 源单行号
        self.src_seq = src_seq
        # 源单分录内码
        self.src_entry_id = src_entry_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.seq is not None:
            result['seq'] = self.seq
        if self.id is not None:
            result['id'] = self.id
        if self.picture is not None:
            result['picture'] = self.picture
        if self.material_id is not None:
            result['materialid_id'] = self.material_id
        if self.material_name is not None:
            result['materialid_name'] = self.material_name
        if self.material_number is not None:
            result['materialid_number'] = self.material_number
        if self.material_is_multi_unit is not None:
            result['materialid_ismulti_unit'] = self.material_is_multi_unit
        if self.material_is_serial is not None:
            result['materialid_isserial'] = self.material_is_serial
        if self.material_is_asstattr is not None:
            result['materialid_isasstattr'] = self.material_is_asstattr
        if self.material_is_kfperiod is not None:
            result['materialid_iskfperiod'] = self.material_is_kfperiod
        if self.material_is_batch is not None:
            result['materialid_isbatch'] = self.material_is_batch
        if self.material_model is not None:
            result['materialid_model'] = self.material_model
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.sp_name is not None:
            result['spid_name'] = self.sp_name
        if self.sp_number is not None:
            result['spid_number'] = self.sp_number
        if self.auxprop_id is not None:
            result['auxpropid_id'] = self.auxprop_id
        if self.auxprop_name is not None:
            result['auxpropid_name'] = self.auxprop_name
        if self.auxprop_number is not None:
            result['auxpropid_number'] = self.auxprop_number
        if self.aux_id_1 is not None:
            result['auxid1_id'] = self.aux_id_1
        if self.aux_id_1name is not None:
            result['auxid1_name'] = self.aux_id_1name
        if self.aux_id_1number is not None:
            result['auxid1_number'] = self.aux_id_1number
        if self.aux_id_2 is not None:
            result['auxid2_id'] = self.aux_id_2
        if self.aux_id_2name is not None:
            result['auxid2_name'] = self.aux_id_2name
        if self.aux_id_2number is not None:
            result['auxid2_number'] = self.aux_id_2number
        if self.aux_id_3 is not None:
            result['auxid3_id'] = self.aux_id_3
        if self.aux_id_3name is not None:
            result['auxid3_name'] = self.aux_id_3name
        if self.aux_id_3number is not None:
            result['auxid3_number'] = self.aux_id_3number
        if self.aux_id_4 is not None:
            result['auxid4_id'] = self.aux_id_4
        if self.aux_id_4name is not None:
            result['auxid4_name'] = self.aux_id_4name
        if self.aux_id_4number is not None:
            result['auxid4_number'] = self.aux_id_4number
        if self.aux_id_5 is not None:
            result['auxid5_id'] = self.aux_id_5
        if self.aux_id_5name is not None:
            result['auxid5_name'] = self.aux_id_5name
        if self.aux_id_5number is not None:
            result['auxid5_number'] = self.aux_id_5number
        if self.barcode is not None:
            result['barcode'] = self.barcode
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.proplace is not None:
            result['proplace'] = self.proplace
        if self.proreg_no is not None:
            result['proregno'] = self.proreg_no
        if self.prolicense is not None:
            result['prolicense'] = self.prolicense
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.conversion_rate is not None:
            result['conversionrate'] = self.conversion_rate
        if self.base_unit_id is not None:
            result['baseunit_id'] = self.base_unit_id
        if self.base_unit_name is not None:
            result['baseunit_name'] = self.base_unit_name
        if self.base_unit_number is not None:
            result['baseunit_number'] = self.base_unit_number
        if self.inv_base_qty is not None:
            result['inv_baseqty'] = self.inv_base_qty
        if self.base_qty is not None:
            result['baseqty'] = self.base_qty
        if self.unit_id is not None:
            result['unit_id'] = self.unit_id
        if self.unit_name is not None:
            result['unit_name'] = self.unit_name
        if self.unit_number is not None:
            result['unit_number'] = self.unit_number
        if self.inv_qty is not None:
            result['inv_qty'] = self.inv_qty
        if self.qty is not None:
            result['qty'] = self.qty
        if self.aux_unit_id is not None:
            result['auxunitid_id'] = self.aux_unit_id
        if self.aux_unit_name is not None:
            result['auxunitid_name'] = self.aux_unit_name
        if self.aux_unit_number is not None:
            result['auxunitid_number'] = self.aux_unit_number
        if self.aux_qty is not None:
            result['auxqty'] = self.aux_qty
        if self.aux_inv_qty is not None:
            result['aux_invqty'] = self.aux_inv_qty
        if self.comment is not None:
            result['comment'] = self.comment
        if self.sn_list is not None:
            result['sn_list'] = self.sn_list
        if self.inv_sn_list is not None:
            result['inv_sn_list'] = self.inv_sn_list
        if self.src_bill_no is not None:
            result['srcbillno'] = self.src_bill_no
        if self.src_bill_type_id is not None:
            result['srcbilltypeid_id'] = self.src_bill_type_id
        if self.src_bill_type_name is not None:
            result['srcbilltypeid_name'] = self.src_bill_type_name
        if self.src_bill_type_number is not None:
            result['srcbilltypeid_number'] = self.src_bill_type_number
        if self.src_inter_id is not None:
            result['srcinterid'] = self.src_inter_id
        if self.src_bill_date is not None:
            result['src_billdate'] = self.src_bill_date
        if self.src_seq is not None:
            result['srcseq'] = self.src_seq
        if self.src_entry_id is not None:
            result['srcentryid'] = self.src_entry_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('seq') is not None:
            self.seq = m.get('seq')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('picture') is not None:
            self.picture = m.get('picture')
        if m.get('materialid_id') is not None:
            self.material_id = m.get('materialid_id')
        if m.get('materialid_name') is not None:
            self.material_name = m.get('materialid_name')
        if m.get('materialid_number') is not None:
            self.material_number = m.get('materialid_number')
        if m.get('materialid_ismulti_unit') is not None:
            self.material_is_multi_unit = m.get('materialid_ismulti_unit')
        if m.get('materialid_isserial') is not None:
            self.material_is_serial = m.get('materialid_isserial')
        if m.get('materialid_isasstattr') is not None:
            self.material_is_asstattr = m.get('materialid_isasstattr')
        if m.get('materialid_iskfperiod') is not None:
            self.material_is_kfperiod = m.get('materialid_iskfperiod')
        if m.get('materialid_isbatch') is not None:
            self.material_is_batch = m.get('materialid_isbatch')
        if m.get('materialid_model') is not None:
            self.material_model = m.get('materialid_model')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('spid_name') is not None:
            self.sp_name = m.get('spid_name')
        if m.get('spid_number') is not None:
            self.sp_number = m.get('spid_number')
        if m.get('auxpropid_id') is not None:
            self.auxprop_id = m.get('auxpropid_id')
        if m.get('auxpropid_name') is not None:
            self.auxprop_name = m.get('auxpropid_name')
        if m.get('auxpropid_number') is not None:
            self.auxprop_number = m.get('auxpropid_number')
        if m.get('auxid1_id') is not None:
            self.aux_id_1 = m.get('auxid1_id')
        if m.get('auxid1_name') is not None:
            self.aux_id_1name = m.get('auxid1_name')
        if m.get('auxid1_number') is not None:
            self.aux_id_1number = m.get('auxid1_number')
        if m.get('auxid2_id') is not None:
            self.aux_id_2 = m.get('auxid2_id')
        if m.get('auxid2_name') is not None:
            self.aux_id_2name = m.get('auxid2_name')
        if m.get('auxid2_number') is not None:
            self.aux_id_2number = m.get('auxid2_number')
        if m.get('auxid3_id') is not None:
            self.aux_id_3 = m.get('auxid3_id')
        if m.get('auxid3_name') is not None:
            self.aux_id_3name = m.get('auxid3_name')
        if m.get('auxid3_number') is not None:
            self.aux_id_3number = m.get('auxid3_number')
        if m.get('auxid4_id') is not None:
            self.aux_id_4 = m.get('auxid4_id')
        if m.get('auxid4_name') is not None:
            self.aux_id_4name = m.get('auxid4_name')
        if m.get('auxid4_number') is not None:
            self.aux_id_4number = m.get('auxid4_number')
        if m.get('auxid5_id') is not None:
            self.aux_id_5 = m.get('auxid5_id')
        if m.get('auxid5_name') is not None:
            self.aux_id_5name = m.get('auxid5_name')
        if m.get('auxid5_number') is not None:
            self.aux_id_5number = m.get('auxid5_number')
        if m.get('barcode') is not None:
            self.barcode = m.get('barcode')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.proplace = m.get('proplace')
        if m.get('proregno') is not None:
            self.proreg_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.prolicense = m.get('prolicense')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('conversionrate') is not None:
            self.conversion_rate = m.get('conversionrate')
        if m.get('baseunit_id') is not None:
            self.base_unit_id = m.get('baseunit_id')
        if m.get('baseunit_name') is not None:
            self.base_unit_name = m.get('baseunit_name')
        if m.get('baseunit_number') is not None:
            self.base_unit_number = m.get('baseunit_number')
        if m.get('inv_baseqty') is not None:
            self.inv_base_qty = m.get('inv_baseqty')
        if m.get('baseqty') is not None:
            self.base_qty = m.get('baseqty')
        if m.get('unit_id') is not None:
            self.unit_id = m.get('unit_id')
        if m.get('unit_name') is not None:
            self.unit_name = m.get('unit_name')
        if m.get('unit_number') is not None:
            self.unit_number = m.get('unit_number')
        if m.get('inv_qty') is not None:
            self.inv_qty = m.get('inv_qty')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('auxunitid_id') is not None:
            self.aux_unit_id = m.get('auxunitid_id')
        if m.get('auxunitid_name') is not None:
            self.aux_unit_name = m.get('auxunitid_name')
        if m.get('auxunitid_number') is not None:
            self.aux_unit_number = m.get('auxunitid_number')
        if m.get('auxqty') is not None:
            self.aux_qty = m.get('auxqty')
        if m.get('aux_invqty') is not None:
            self.aux_inv_qty = m.get('aux_invqty')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('sn_list') is not None:
            self.sn_list = m.get('sn_list')
        if m.get('inv_sn_list') is not None:
            self.inv_sn_list = m.get('inv_sn_list')
        if m.get('srcbillno') is not None:
            self.src_bill_no = m.get('srcbillno')
        if m.get('srcbilltypeid_id') is not None:
            self.src_bill_type_id = m.get('srcbilltypeid_id')
        if m.get('srcbilltypeid_name') is not None:
            self.src_bill_type_name = m.get('srcbilltypeid_name')
        if m.get('srcbilltypeid_number') is not None:
            self.src_bill_type_number = m.get('srcbilltypeid_number')
        if m.get('srcinterid') is not None:
            self.src_inter_id = m.get('srcinterid')
        if m.get('src_billdate') is not None:
            self.src_bill_date = m.get('src_billdate')
        if m.get('srcseq') is not None:
            self.src_seq = m.get('srcseq')
        if m.get('srcentryid') is not None:
            self.src_entry_id = m.get('srcentryid')
        return self


class InvBillDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_no: str = None,
        bill_date: str = None,
        bill_status: str = None,
        create_time: str = None,
        modify_time: str = None,
        check_time: str = None,
        emp_id: str = None,
        emp_name: str = None,
        emp_number: str = None,
        creator_id: str = None,
        creatorid_name: str = None,
        creatorid_number: str = None,
        modifier_id: str = None,
        modifier_name: str = None,
        modifier_number: str = None,
        check_id: str = None,
        check_name: str = None,
        check_number: str = None,
        remark: str = None,
        check_task_stock_id: str = None,
        check_task_stock_name: str = None,
        check_task_stock_number: str = None,
        check_task_stockid_is_allow_freight: bool = None,
        gain_id: str = None,
        gain_bill_no: str = None,
        loss_id: str = None,
        loss_bill_no: str = None,
        material_entity: List[InvBillDetailMaterialDetail] = None,
    ):
        # 单据ID
        self.id = id
        # 单据编码
        self.bill_no = bill_no
        # 单据日期
        self.bill_date = bill_date
        # 单据状态，Z：未审核，C：已审核
        self.bill_status = bill_status
        # 创建时间
        self.create_time = create_time
        # 修改时间
        self.modify_time = modify_time
        # 盈亏处理时间
        self.check_time = check_time
        # 盘点人id
        self.emp_id = emp_id
        # 盘点人名称
        self.emp_name = emp_name
        # 盘点人编码
        self.emp_number = emp_number
        # 创建人id
        self.creator_id = creator_id
        # 创建人名称
        self.creatorid_name = creatorid_name
        # 创建人编码
        self.creatorid_number = creatorid_number
        # 修改人id
        self.modifier_id = modifier_id
        # 修改人名称
        self.modifier_name = modifier_name
        # 修改人编码
        self.modifier_number = modifier_number
        # 盈亏处理人id
        self.check_id = check_id
        # 盈亏处理人名称
        self.check_name = check_name
        # 盈亏处理人编码
        self.check_number = check_number
        # 备注
        self.remark = remark
        # 仓库id
        self.check_task_stock_id = check_task_stock_id
        # 仓库名称
        self.check_task_stock_name = check_task_stock_name
        # 仓库编码
        self.check_task_stock_number = check_task_stock_number
        # 仓库启用仓位管理
        self.check_task_stockid_is_allow_freight = check_task_stockid_is_allow_freight
        # 盘盈单id
        self.gain_id = gain_id
        # 盘盈单编码
        self.gain_bill_no = gain_bill_no
        # 盘亏单id
        self.loss_id = loss_id
        # 盘亏单编码
        self.loss_bill_no = loss_bill_no
        # 商品分录
        self.material_entity = material_entity

    def validate(self):
        if self.material_entity:
            for k in self.material_entity:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_no is not None:
            result['billno'] = self.bill_no
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.create_time is not None:
            result['createtime'] = self.create_time
        if self.modify_time is not None:
            result['modifytime'] = self.modify_time
        if self.check_time is not None:
            result['checktime'] = self.check_time
        if self.emp_id is not None:
            result['empid_id'] = self.emp_id
        if self.emp_name is not None:
            result['empid_name'] = self.emp_name
        if self.emp_number is not None:
            result['empid_number'] = self.emp_number
        if self.creator_id is not None:
            result['creatorid_id'] = self.creator_id
        if self.creatorid_name is not None:
            result['creatorid_name'] = self.creatorid_name
        if self.creatorid_number is not None:
            result['creatorid_number'] = self.creatorid_number
        if self.modifier_id is not None:
            result['modifierid_id'] = self.modifier_id
        if self.modifier_name is not None:
            result['modifierid_name'] = self.modifier_name
        if self.modifier_number is not None:
            result['modifierid_number'] = self.modifier_number
        if self.check_id is not None:
            result['checkid_id'] = self.check_id
        if self.check_name is not None:
            result['checkid_name'] = self.check_name
        if self.check_number is not None:
            result['checkid_number'] = self.check_number
        if self.remark is not None:
            result['remark'] = self.remark
        if self.check_task_stock_id is not None:
            result['check_task_stockid_id'] = self.check_task_stock_id
        if self.check_task_stock_name is not None:
            result['check_task_stockid_name'] = self.check_task_stock_name
        if self.check_task_stock_number is not None:
            result['check_task_stockid_number'] = self.check_task_stock_number
        if self.check_task_stockid_is_allow_freight is not None:
            result['check_task_stockid_isallowfreight'] = self.check_task_stockid_is_allow_freight
        if self.gain_id is not None:
            result['gainid'] = self.gain_id
        if self.gain_bill_no is not None:
            result['gainbillno'] = self.gain_bill_no
        if self.loss_id is not None:
            result['lossid'] = self.loss_id
        if self.loss_bill_no is not None:
            result['lossbillno'] = self.loss_bill_no
        result['material_entity'] = []
        if self.material_entity is not None:
            for k in self.material_entity:
                result['material_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billno') is not None:
            self.bill_no = m.get('billno')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('createtime') is not None:
            self.create_time = m.get('createtime')
        if m.get('modifytime') is not None:
            self.modify_time = m.get('modifytime')
        if m.get('checktime') is not None:
            self.check_time = m.get('checktime')
        if m.get('empid_id') is not None:
            self.emp_id = m.get('empid_id')
        if m.get('empid_name') is not None:
            self.emp_name = m.get('empid_name')
        if m.get('empid_number') is not None:
            self.emp_number = m.get('empid_number')
        if m.get('creatorid_id') is not None:
            self.creator_id = m.get('creatorid_id')
        if m.get('creatorid_name') is not None:
            self.creatorid_name = m.get('creatorid_name')
        if m.get('creatorid_number') is not None:
            self.creatorid_number = m.get('creatorid_number')
        if m.get('modifierid_id') is not None:
            self.modifier_id = m.get('modifierid_id')
        if m.get('modifierid_name') is not None:
            self.modifier_name = m.get('modifierid_name')
        if m.get('modifierid_number') is not None:
            self.modifier_number = m.get('modifierid_number')
        if m.get('checkid_id') is not None:
            self.check_id = m.get('checkid_id')
        if m.get('checkid_name') is not None:
            self.check_name = m.get('checkid_name')
        if m.get('checkid_number') is not None:
            self.check_number = m.get('checkid_number')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('check_task_stockid_id') is not None:
            self.check_task_stock_id = m.get('check_task_stockid_id')
        if m.get('check_task_stockid_name') is not None:
            self.check_task_stock_name = m.get('check_task_stockid_name')
        if m.get('check_task_stockid_number') is not None:
            self.check_task_stock_number = m.get('check_task_stockid_number')
        if m.get('check_task_stockid_isallowfreight') is not None:
            self.check_task_stockid_is_allow_freight = m.get('check_task_stockid_isallowfreight')
        if m.get('gainid') is not None:
            self.gain_id = m.get('gainid')
        if m.get('gainbillno') is not None:
            self.gain_bill_no = m.get('gainbillno')
        if m.get('lossid') is not None:
            self.loss_id = m.get('lossid')
        if m.get('lossbillno') is not None:
            self.loss_bill_no = m.get('lossbillno')
        self.material_entity = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = InvBillDetailMaterialDetail()
                self.material_entity.append(temp_model.from_map(k))
        return self


class InvBillDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: InvBillDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = InvBillDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class InvCheckBillListRequestBody(TeaModel):
    def __init__(
        self,
        stock_id: List[str] = None,
        bill_status: str = None,
        check_status: str = None,
        check_model: str = None,
        check_task: str = None,
        start_date: str = None,
        end_date: str = None,
        begin_date: str = None,
        expire_date: str = None,
        start_time: int = None,
        end_time: int = None,
        begin_time: int = None,
        expire_time: int = None,
        start_bill_date: str = None,
        end_bill_date: str = None,
        select_fields: str = None,
        emp_id: List[str] = None,
        creator: List[str] = None,
        search: str = None,
        page: int = None,
        page_size: int = None,
    ):
        # 仓库id
        self.stock_id = stock_id
        # 单据状态（所有：“”，已审核：“C”，未审核：“Z”）
        self.bill_status = bill_status
        # 单据状态（所有：“”，未盘点：“D”，盘点中：“E”，未汇总：“F”，已汇总：“G”，待盈亏处理：“A”，盈亏处理中：“Z”，盘点完成：“C”）
        self.check_status = check_status
        # 盘点类型（所有：“”，单人盘点：“1”，多人盘点：“2”）
        self.check_model = check_model
        # 盘点任务id
        self.check_task = check_task
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.start_date = start_date
        # 结束日期（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.end_date = end_date
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），修改日期
        self.begin_date = begin_date
        # 结束日期（格式：“yyyy-MM-dd”，为空表示不过滤），修改日期
        self.expire_date = expire_date
        # 开始时间（格式：“时间戳”，-1表示不过滤），创建时间
        self.start_time = start_time
        # 结束时间（格式：“时间戳”，-1表示不过滤），创建时间
        self.end_time = end_time
        # 开始时间（格式：“时间戳”，-1表示不过滤），修改时间
        self.begin_time = begin_time
        # 结束时间（格式：“时间戳”，-1表示不过滤），修改时间
        self.expire_time = expire_time
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），单据日期
        self.start_bill_date = start_bill_date
        # 结束日期（格式：“yyyy-MM-dd”，为空表示不过滤），单据日期
        self.end_bill_date = end_bill_date
        # 自定义查询字段，如（"material_entity.materialid.id"）
        self.select_fields = select_fields
        # 盘点人id
        self.emp_id = emp_id
        # 制单人id
        self.creator = creator
        # 模糊搜索，单据编码、商品名称、任务名称、仓库名称
        self.search = search
        # 当前页（默认1）
        self.page = page
        # 每页显示条数，（默认10，最大值100）
        self.page_size = page_size

    def validate(self):
        self.validate_required(self.emp_id, 'emp_id')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.stock_id is not None:
            result['stockid'] = self.stock_id
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.check_status is not None:
            result['checkstatus'] = self.check_status
        if self.check_model is not None:
            result['checkmodel'] = self.check_model
        if self.check_task is not None:
            result['check_task'] = self.check_task
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.begin_date is not None:
            result['begindate'] = self.begin_date
        if self.expire_date is not None:
            result['expiredate'] = self.expire_date
        if self.start_time is not None:
            result['starttime'] = self.start_time
        if self.end_time is not None:
            result['endtime'] = self.end_time
        if self.begin_time is not None:
            result['begintime'] = self.begin_time
        if self.expire_time is not None:
            result['expiretime'] = self.expire_time
        if self.start_bill_date is not None:
            result['startbilldate'] = self.start_bill_date
        if self.end_bill_date is not None:
            result['endbilldate'] = self.end_bill_date
        if self.select_fields is not None:
            result['selectfields'] = self.select_fields
        if self.emp_id is not None:
            result['empid'] = self.emp_id
        if self.creator is not None:
            result['creator'] = self.creator
        if self.search is not None:
            result['search'] = self.search
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('stockid') is not None:
            self.stock_id = m.get('stockid')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('checkstatus') is not None:
            self.check_status = m.get('checkstatus')
        if m.get('checkmodel') is not None:
            self.check_model = m.get('checkmodel')
        if m.get('check_task') is not None:
            self.check_task = m.get('check_task')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('begindate') is not None:
            self.begin_date = m.get('begindate')
        if m.get('expiredate') is not None:
            self.expire_date = m.get('expiredate')
        if m.get('starttime') is not None:
            self.start_time = m.get('starttime')
        if m.get('endtime') is not None:
            self.end_time = m.get('endtime')
        if m.get('begintime') is not None:
            self.begin_time = m.get('begintime')
        if m.get('expiretime') is not None:
            self.expire_time = m.get('expiretime')
        if m.get('startbilldate') is not None:
            self.start_bill_date = m.get('startbilldate')
        if m.get('endbilldate') is not None:
            self.end_bill_date = m.get('endbilldate')
        if m.get('selectfields') is not None:
            self.select_fields = m.get('selectfields')
        if m.get('empid') is not None:
            self.emp_id = m.get('empid')
        if m.get('creator') is not None:
            self.creator = m.get('creator')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        return self


class InvCheckBillListRequest(TeaModel):
    def __init__(
        self,
        body: InvCheckBillListRequestBody = None,
    ):
        self.body = body
        # 盘点单列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvCheckBillListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvCheckBillSummaryRequestBody(TeaModel):
    def __init__(
        self,
        bill_ids: List[str] = None,
    ):
        # 盘点单id
        self.bill_ids = bill_ids

    def validate(self):
        self.validate_required(self.bill_ids, 'bill_ids')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_ids is not None:
            result['billIds'] = self.bill_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('billIds') is not None:
            self.bill_ids = m.get('billIds')
        return self


class InvCheckBillSummaryRequest(TeaModel):
    def __init__(
        self,
        body: InvCheckBillSummaryRequestBody = None,
    ):
        self.body = body
        # 盘点单汇总

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvCheckBillSummaryRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvCheckBillGainLossDealRequestBody(TeaModel):
    def __init__(
        self,
        ids: List[str] = None,
    ):
        # 盘点单id
        self.ids = ids

    def validate(self):
        self.validate_required(self.ids, 'ids')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids is not None:
            result['ids'] = self.ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        return self


class InvCheckBillGainLossDealRequest(TeaModel):
    def __init__(
        self,
        body: InvCheckBillGainLossDealRequestBody = None,
    ):
        self.body = body
        # 盘点单盈亏处理

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvCheckBillGainLossDealRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvSerialBaselistRequestBody(TeaModel):
    def __init__(
        self,
        serial_num: str = None,
        sn_list_id: str = None,
        status: str = None,
        material_id: str = None,
        stock_id: str = None,
        sp_id: str = None,
        batch_no: str = None,
        auxprop_id: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_type: str = None,
        kf_period: str = None,
        page: int = None,
        page_size: int = None,
    ):
        # 序列号，多个用分号分隔 如serialnum=md001,md9923
        self.serial_num = serial_num
        # snlistid, 多个用分号分隔 snlistid=944718030393330688,925442961607546880
        self.sn_list_id = sn_list_id
        # 是否在库,在库：1，不在库：0  (要检查序列号是否存在时，不传该字段)
        self.status = status
        # 商品id
        self.material_id = material_id
        # 仓库id
        self.stock_id = stock_id
        # 仓位id
        self.sp_id = sp_id
        # 批次
        self.batch_no = batch_no
        # 辅助属性id
        self.auxprop_id = auxprop_id
        # 生产日期 如需按保质期查询，保质期类型、 保质期天数、生产日期、到期日都不能为空）
        self.kf_date = kf_date
        # 有效日期 如需按保质期查询，保质期类型、 保质期天数、生产日期、到期日都不能为空）
        self.valid_date = valid_date
        # 保质期类型，1：天，2：月，3：年 如需按保质期查询，保质期类型、 保质期天数、生产日期、到期日都不能为空）
        self.kf_type = kf_type
        # 保质期天数 如需按保质期查询，保质期类型、 保质期天数、生产日期、到期日都不能为空）
        self.kf_period = kf_period
        # 当前页（默认1）
        self.page = page
        # 每页显示条数，（默认10，最大值100）
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.serial_num is not None:
            result['serialnum'] = self.serial_num
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.status is not None:
            result['status'] = self.status
        if self.material_id is not None:
            result['materialid'] = self.material_id
        if self.stock_id is not None:
            result['stockid'] = self.stock_id
        if self.sp_id is not None:
            result['spid'] = self.sp_id
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.auxprop_id is not None:
            result['auxpropid'] = self.auxprop_id
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('serialnum') is not None:
            self.serial_num = m.get('serialnum')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('materialid') is not None:
            self.material_id = m.get('materialid')
        if m.get('stockid') is not None:
            self.stock_id = m.get('stockid')
        if m.get('spid') is not None:
            self.sp_id = m.get('spid')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('auxpropid') is not None:
            self.auxprop_id = m.get('auxpropid')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        return self


class InvSerialBaselistRequest(TeaModel):
    def __init__(
        self,
        body: InvSerialBaselistRequestBody = None,
    ):
        self.body = body
        # 序列号基本信息列表查询

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvSerialBaselistRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvFuzzyQuerySnListBySnPrefixRequestBody(TeaModel):
    def __init__(
        self,
        serial_num: str = None,
        status: str = None,
        material_id: str = None,
        stock_id: str = None,
        sp_id: str = None,
        batch_no: str = None,
        auxprop_id: str = None,
        page: int = None,
        page_size: int = None,
    ):
        # 序列号，多个用分号分隔 如serialnum=md001,md9923
        self.serial_num = serial_num
        # 是否在库,在库：1，不在库：0  (要检查序列号是否存在时，不传该字段)
        self.status = status
        # 商品id
        self.material_id = material_id
        # 仓库id
        self.stock_id = stock_id
        # 仓位id
        self.sp_id = sp_id
        # 批次
        self.batch_no = batch_no
        # 辅助属性id
        self.auxprop_id = auxprop_id
        # 当前页（默认1）
        self.page = page
        # 每页显示条数，（默认10，最大值100）
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.serial_num is not None:
            result['serialnum'] = self.serial_num
        if self.status is not None:
            result['status'] = self.status
        if self.material_id is not None:
            result['materialid'] = self.material_id
        if self.stock_id is not None:
            result['stockid'] = self.stock_id
        if self.sp_id is not None:
            result['spid'] = self.sp_id
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.auxprop_id is not None:
            result['auxpropid'] = self.auxprop_id
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('serialnum') is not None:
            self.serial_num = m.get('serialnum')
        if m.get('status') is not None:
            self.status = m.get('status')
        if m.get('materialid') is not None:
            self.material_id = m.get('materialid')
        if m.get('stockid') is not None:
            self.stock_id = m.get('stockid')
        if m.get('spid') is not None:
            self.sp_id = m.get('spid')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('auxpropid') is not None:
            self.auxprop_id = m.get('auxpropid')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        return self


class InvFuzzyQuerySnListBySnPrefixRequest(TeaModel):
    def __init__(
        self,
        body: InvFuzzyQuerySnListBySnPrefixRequestBody = None,
    ):
        self.body = body
        # 序列号模糊查询（只匹配更新了库存的序列号）

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvFuzzyQuerySnListBySnPrefixRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvListV2RequestBody(TeaModel):
    def __init__(
        self,
        point_date: str = None,
        material_ids: List[str] = None,
        auxprop_ids: List[str] = None,
        stock_ids: List[str] = None,
        sp_ids: List[str] = None,
        include_batch_kfperiod: bool = None,
        begin_time: int = None,
        expire_time: int = None,
        page: int = None,
        page_size: int = None,
        total_fields: str = None,
    ):
        # 是否按指定日期查库存，传入正确的日期即为按指定日期查，如：2020-08-20
        self.point_date = point_date
        # 商品id集合，需要返回整件散包需要传入
        self.material_ids = material_ids
        # 商品辅助属性id集合
        self.auxprop_ids = auxprop_ids
        # 仓库id集合
        self.stock_ids = stock_ids
        # 仓位id集合
        self.sp_ids = sp_ids
        # 是否包含批次、保质期；true-是，false-否
        self.include_batch_kfperiod = include_batch_kfperiod
        # 开始时间（格式：“时间戳”，-1表示不过滤），修改时间
        self.begin_time = begin_time
        # 结束时间（格式：“时间戳”，-1表示不过滤），修改时间
        self.expire_time = expire_time
        # 当前页（默认1）
        self.page = page
        # 每页显示条数，（默认10，最大值100）
        self.page_size = page_size
        # 拓展合计字段（备用），决定哪些合计维度。支持商品：materialid、仓库stockid、仓位spid、辅助属性auxpropid
        self.total_fields = total_fields

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.point_date is not None:
            result['pointdate'] = self.point_date
        if self.material_ids is not None:
            result['materialids'] = self.material_ids
        if self.auxprop_ids is not None:
            result['auxpropids'] = self.auxprop_ids
        if self.stock_ids is not None:
            result['stockids'] = self.stock_ids
        if self.sp_ids is not None:
            result['spids'] = self.sp_ids
        if self.include_batch_kfperiod is not None:
            result['include_batch_kfperiod'] = self.include_batch_kfperiod
        if self.begin_time is not None:
            result['begintime'] = self.begin_time
        if self.expire_time is not None:
            result['expiretime'] = self.expire_time
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        if self.total_fields is not None:
            result['totalfields'] = self.total_fields
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('pointdate') is not None:
            self.point_date = m.get('pointdate')
        if m.get('materialids') is not None:
            self.material_ids = m.get('materialids')
        if m.get('auxpropids') is not None:
            self.auxprop_ids = m.get('auxpropids')
        if m.get('stockids') is not None:
            self.stock_ids = m.get('stockids')
        if m.get('spids') is not None:
            self.sp_ids = m.get('spids')
        if m.get('include_batch_kfperiod') is not None:
            self.include_batch_kfperiod = m.get('include_batch_kfperiod')
        if m.get('begintime') is not None:
            self.begin_time = m.get('begintime')
        if m.get('expiretime') is not None:
            self.expire_time = m.get('expiretime')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        if m.get('totalfields') is not None:
            self.total_fields = m.get('totalfields')
        return self


class InvListV2Request(TeaModel):
    def __init__(
        self,
        body: InvListV2RequestBody = None,
    ):
        self.body = body
        # 查询即时库存中库存列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvListV2RequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvOccupyMaterialEntity(TeaModel):
    def __init__(
        self,
        bill_entry_id: str = None,
        material_name: str = None,
        material_number: str = None,
        material_id: str = None,
        aux_prop_name: str = None,
        auxprop_id: str = None,
        stock_name: str = None,
        stock_id: str = None,
        space_name: str = None,
        sp_id: str = None,
        batch_no: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_type: str = None,
        kf_period: str = None,
        qty: str = None,
        unit: str = None,
        aux_qty: str = None,
        aux_unit_id: str = None,
        base_qty: str = None,
        base_unit: str = None,
        sn_list_id: str = None,
        sn_list: str = None,
    ):
        # 分录id
        self.bill_entry_id = bill_entry_id
        # 商品名称
        self.material_name = material_name
        # 商品编码
        self.material_number = material_number
        # 商品id
        self.material_id = material_id
        # 辅助属性名称
        self.aux_prop_name = aux_prop_name
        # 辅助属性id(辅助属性商品必填)
        self.auxprop_id = auxprop_id
        # 仓库名称
        self.stock_name = stock_name
        # 仓库id
        self.stock_id = stock_id
        # 仓位名称
        self.space_name = space_name
        # 仓位id
        self.sp_id = sp_id
        # 批次号 (批次商品必填)
        self.batch_no = batch_no
        # 生产日期
        self.kf_date = kf_date
        # 有效日期
        self.valid_date = valid_date
        # 保质期类型，1：天，2：月，3：年
        self.kf_type = kf_type
        # 保质期天数
        self.kf_period = kf_period
        # 数量
        self.qty = qty
        # 单位id
        self.unit = unit
        # 辅助数量（多单位必传
        self.aux_qty = aux_qty
        # 辅助单位id（多单位必传）
        self.aux_unit_id = aux_unit_id
        # 基本数量
        self.base_qty = base_qty
        # 基本单位id
        self.base_unit = base_unit
        # 序列号流转ID（序列号商品必传）
        self.sn_list_id = sn_list_id
        # 序列号（序列号商品必传，多个序列号使用英文分号（;）分隔）
        self.sn_list = sn_list

    def validate(self):
        self.validate_required(self.bill_entry_id, 'bill_entry_id')
        self.validate_required(self.material_name, 'material_name')
        self.validate_required(self.material_number, 'material_number')
        self.validate_required(self.material_id, 'material_id')
        self.validate_required(self.stock_name, 'stock_name')
        self.validate_required(self.stock_id, 'stock_id')
        self.validate_required(self.qty, 'qty')
        self.validate_required(self.unit, 'unit')
        self.validate_required(self.base_qty, 'base_qty')
        self.validate_required(self.base_unit, 'base_unit')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_entry_id is not None:
            result['billEntryId'] = self.bill_entry_id
        if self.material_name is not None:
            result['materialName'] = self.material_name
        if self.material_number is not None:
            result['materialNumber'] = self.material_number
        if self.material_id is not None:
            result['materialid'] = self.material_id
        if self.aux_prop_name is not None:
            result['auxPropName'] = self.aux_prop_name
        if self.auxprop_id is not None:
            result['auxpropid'] = self.auxprop_id
        if self.stock_name is not None:
            result['stockName'] = self.stock_name
        if self.stock_id is not None:
            result['stockid'] = self.stock_id
        if self.space_name is not None:
            result['spaceName'] = self.space_name
        if self.sp_id is not None:
            result['spid'] = self.sp_id
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.qty is not None:
            result['qty'] = self.qty
        if self.unit is not None:
            result['unit'] = self.unit
        if self.aux_qty is not None:
            result['auxqty'] = self.aux_qty
        if self.aux_unit_id is not None:
            result['auxunitid'] = self.aux_unit_id
        if self.base_qty is not None:
            result['baseqty'] = self.base_qty
        if self.base_unit is not None:
            result['baseunit'] = self.base_unit
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.sn_list is not None:
            result['sn_list'] = self.sn_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('billEntryId') is not None:
            self.bill_entry_id = m.get('billEntryId')
        if m.get('materialName') is not None:
            self.material_name = m.get('materialName')
        if m.get('materialNumber') is not None:
            self.material_number = m.get('materialNumber')
        if m.get('materialid') is not None:
            self.material_id = m.get('materialid')
        if m.get('auxPropName') is not None:
            self.aux_prop_name = m.get('auxPropName')
        if m.get('auxpropid') is not None:
            self.auxprop_id = m.get('auxpropid')
        if m.get('stockName') is not None:
            self.stock_name = m.get('stockName')
        if m.get('stockid') is not None:
            self.stock_id = m.get('stockid')
        if m.get('spaceName') is not None:
            self.space_name = m.get('spaceName')
        if m.get('spid') is not None:
            self.sp_id = m.get('spid')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('unit') is not None:
            self.unit = m.get('unit')
        if m.get('auxqty') is not None:
            self.aux_qty = m.get('auxqty')
        if m.get('auxunitid') is not None:
            self.aux_unit_id = m.get('auxunitid')
        if m.get('baseqty') is not None:
            self.base_qty = m.get('baseqty')
        if m.get('baseunit') is not None:
            self.base_unit = m.get('baseunit')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('sn_list') is not None:
            self.sn_list = m.get('sn_list')
        return self


class InvOccupyRequestBody(TeaModel):
    def __init__(
        self,
        bill_source: str = None,
        bill_type_id: str = None,
        bill_id: str = None,
        bill_no: str = None,
        bill_date: str = None,
        material_entity: List[InvOccupyMaterialEntity] = None,
    ):
        # 单据来源；零售：LS，第三方：ISV
        self.bill_source = bill_source
        # 单据类型；第三方单据传：isv_bill
        self.bill_type_id = bill_type_id
        # 单据id
        self.bill_id = bill_id
        # 单据编号
        self.bill_no = bill_no
        # 单据日期
        self.bill_date = bill_date
        # 是否包含批次、保质期；true-是，false-否
        self.material_entity = material_entity

    def validate(self):
        self.validate_required(self.bill_source, 'bill_source')
        self.validate_required(self.bill_type_id, 'bill_type_id')
        self.validate_required(self.bill_id, 'bill_id')
        self.validate_required(self.bill_no, 'bill_no')
        self.validate_required(self.bill_date, 'bill_date')
        self.validate_required(self.material_entity, 'material_entity')
        if self.material_entity:
            for k in self.material_entity:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_source is not None:
            result['billsource'] = self.bill_source
        if self.bill_type_id is not None:
            result['billtypeid'] = self.bill_type_id
        if self.bill_id is not None:
            result['billId'] = self.bill_id
        if self.bill_no is not None:
            result['billno'] = self.bill_no
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        result['material_entity'] = []
        if self.material_entity is not None:
            for k in self.material_entity:
                result['material_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('billsource') is not None:
            self.bill_source = m.get('billsource')
        if m.get('billtypeid') is not None:
            self.bill_type_id = m.get('billtypeid')
        if m.get('billId') is not None:
            self.bill_id = m.get('billId')
        if m.get('billno') is not None:
            self.bill_no = m.get('billno')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        self.material_entity = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = InvOccupyMaterialEntity()
                self.material_entity.append(temp_model.from_map(k))
        return self


class InvOccupyRequest(TeaModel):
    def __init__(
        self,
        body: InvOccupyRequestBody = None,
    ):
        self.body = body
        # 库存占用

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvOccupyRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvReleaseOccupyMaterialEntity(TeaModel):
    def __init__(
        self,
        src_entry_id: str = None,
        material_name: str = None,
        material_number: str = None,
        material_id: str = None,
        aux_prop_name: str = None,
        auxprop_id: str = None,
        stock_name: str = None,
        stock_id: str = None,
        space_name: str = None,
        sp_id: str = None,
        batch_no: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_type: str = None,
        kf_period: str = None,
        inputcoefficient: str = None,
        qty: str = None,
        unit: str = None,
        aux_qty: str = None,
        aux_unit_id: str = None,
        base_qty: str = None,
        base_unit: str = None,
        deffloat_qty: str = None,
        sn_list_id: str = None,
        sn_list: str = None,
    ):
        # 源单分录id
        self.src_entry_id = src_entry_id
        # 商品名称
        self.material_name = material_name
        # 商品编码
        self.material_number = material_number
        # 商品id
        self.material_id = material_id
        # 辅助属性名称
        self.aux_prop_name = aux_prop_name
        # 辅助属性id(辅助属性商品必填)
        self.auxprop_id = auxprop_id
        # 仓库名称
        self.stock_name = stock_name
        # 仓库id
        self.stock_id = stock_id
        # 仓位名称
        self.space_name = space_name
        # 仓位id
        self.sp_id = sp_id
        # 批次号 (批次商品必填)
        self.batch_no = batch_no
        # 生产日期
        self.kf_date = kf_date
        # 有效日期
        self.valid_date = valid_date
        # 保质期类型，1：天，2：月，3：年
        self.kf_type = kf_type
        # 保质期天数
        self.kf_period = kf_period
        # 换算率
        self.inputcoefficient = inputcoefficient
        # 数量
        self.qty = qty
        # 单位id
        self.unit = unit
        # 辅助数量（多单位必传
        self.aux_qty = aux_qty
        # 辅助单位id（多单位必传）
        self.aux_unit_id = aux_unit_id
        # 基本数量
        self.base_qty = base_qty
        # 基本单位id
        self.base_unit = base_unit
        # 浮动基本单位数量（传0，后台计算）
        self.deffloat_qty = deffloat_qty
        # 序列号流转ID（序列号商品必传）
        self.sn_list_id = sn_list_id
        # 序列号（序列号商品必传，多个序列号使用英文分号（;）分隔）
        self.sn_list = sn_list

    def validate(self):
        self.validate_required(self.src_entry_id, 'src_entry_id')
        self.validate_required(self.material_name, 'material_name')
        self.validate_required(self.material_number, 'material_number')
        self.validate_required(self.material_id, 'material_id')
        self.validate_required(self.stock_name, 'stock_name')
        self.validate_required(self.stock_id, 'stock_id')
        self.validate_required(self.inputcoefficient, 'inputcoefficient')
        self.validate_required(self.qty, 'qty')
        self.validate_required(self.unit, 'unit')
        self.validate_required(self.base_qty, 'base_qty')
        self.validate_required(self.base_unit, 'base_unit')
        self.validate_required(self.deffloat_qty, 'deffloat_qty')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.src_entry_id is not None:
            result['srcentryid'] = self.src_entry_id
        if self.material_name is not None:
            result['materialName'] = self.material_name
        if self.material_number is not None:
            result['materialNumber'] = self.material_number
        if self.material_id is not None:
            result['materialid'] = self.material_id
        if self.aux_prop_name is not None:
            result['auxPropName'] = self.aux_prop_name
        if self.auxprop_id is not None:
            result['auxpropid'] = self.auxprop_id
        if self.stock_name is not None:
            result['stockName'] = self.stock_name
        if self.stock_id is not None:
            result['stockid'] = self.stock_id
        if self.space_name is not None:
            result['spaceName'] = self.space_name
        if self.sp_id is not None:
            result['spid'] = self.sp_id
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.inputcoefficient is not None:
            result['inputcoefficient'] = self.inputcoefficient
        if self.qty is not None:
            result['qty'] = self.qty
        if self.unit is not None:
            result['unit'] = self.unit
        if self.aux_qty is not None:
            result['auxqty'] = self.aux_qty
        if self.aux_unit_id is not None:
            result['auxunitid'] = self.aux_unit_id
        if self.base_qty is not None:
            result['baseqty'] = self.base_qty
        if self.base_unit is not None:
            result['baseunit'] = self.base_unit
        if self.deffloat_qty is not None:
            result['deffloatqty'] = self.deffloat_qty
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.sn_list is not None:
            result['sn_list'] = self.sn_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('srcentryid') is not None:
            self.src_entry_id = m.get('srcentryid')
        if m.get('materialName') is not None:
            self.material_name = m.get('materialName')
        if m.get('materialNumber') is not None:
            self.material_number = m.get('materialNumber')
        if m.get('materialid') is not None:
            self.material_id = m.get('materialid')
        if m.get('auxPropName') is not None:
            self.aux_prop_name = m.get('auxPropName')
        if m.get('auxpropid') is not None:
            self.auxprop_id = m.get('auxpropid')
        if m.get('stockName') is not None:
            self.stock_name = m.get('stockName')
        if m.get('stockid') is not None:
            self.stock_id = m.get('stockid')
        if m.get('spaceName') is not None:
            self.space_name = m.get('spaceName')
        if m.get('spid') is not None:
            self.sp_id = m.get('spid')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('inputcoefficient') is not None:
            self.inputcoefficient = m.get('inputcoefficient')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('unit') is not None:
            self.unit = m.get('unit')
        if m.get('auxqty') is not None:
            self.aux_qty = m.get('auxqty')
        if m.get('auxunitid') is not None:
            self.aux_unit_id = m.get('auxunitid')
        if m.get('baseqty') is not None:
            self.base_qty = m.get('baseqty')
        if m.get('baseunit') is not None:
            self.base_unit = m.get('baseunit')
        if m.get('deffloatqty') is not None:
            self.deffloat_qty = m.get('deffloatqty')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('sn_list') is not None:
            self.sn_list = m.get('sn_list')
        return self


class InvReleaseOccupyRequestBody(TeaModel):
    def __init__(
        self,
        src_bill_resource: str = None,
        srcbill_type_id: str = None,
        src_inter_id: str = None,
        bill_no: str = None,
        bill_date: str = None,
        material_entity: List[InvReleaseOccupyMaterialEntity] = None,
    ):
        # 源单单据来源；零售：LS，第三方：ISV
        self.src_bill_resource = src_bill_resource
        # 源单单据类型；第三方单据传：isv_bill
        self.srcbill_type_id = srcbill_type_id
        # 源单单据id
        self.src_inter_id = src_inter_id
        # 单据编号
        self.bill_no = bill_no
        # 单据日期
        self.bill_date = bill_date
        # 是否包含批次、保质期；true-是，false-否
        self.material_entity = material_entity

    def validate(self):
        self.validate_required(self.src_bill_resource, 'src_bill_resource')
        self.validate_required(self.srcbill_type_id, 'srcbill_type_id')
        self.validate_required(self.src_inter_id, 'src_inter_id')
        self.validate_required(self.bill_no, 'bill_no')
        self.validate_required(self.bill_date, 'bill_date')
        self.validate_required(self.material_entity, 'material_entity')
        if self.material_entity:
            for k in self.material_entity:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.src_bill_resource is not None:
            result['srcBillResource'] = self.src_bill_resource
        if self.srcbill_type_id is not None:
            result['srcbilltypeid'] = self.srcbill_type_id
        if self.src_inter_id is not None:
            result['srcinterid'] = self.src_inter_id
        if self.bill_no is not None:
            result['billno'] = self.bill_no
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        result['material_entity'] = []
        if self.material_entity is not None:
            for k in self.material_entity:
                result['material_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('srcBillResource') is not None:
            self.src_bill_resource = m.get('srcBillResource')
        if m.get('srcbilltypeid') is not None:
            self.srcbill_type_id = m.get('srcbilltypeid')
        if m.get('srcinterid') is not None:
            self.src_inter_id = m.get('srcinterid')
        if m.get('billno') is not None:
            self.bill_no = m.get('billno')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        self.material_entity = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = InvReleaseOccupyMaterialEntity()
                self.material_entity.append(temp_model.from_map(k))
        return self


class InvReleaseOccupyRequest(TeaModel):
    def __init__(
        self,
        body: InvReleaseOccupyRequestBody = None,
    ):
        self.body = body
        # 库存占用释放

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvReleaseOccupyRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvSynchronousListRequestBody(TeaModel):
    def __init__(
        self,
        ids: List[str] = None,
    ):
        # 库存id集合，最大不能超过100条
        self.ids = ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids is not None:
            result['ids'] = self.ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        return self


class InvSynchronousListRequest(TeaModel):
    def __init__(
        self,
        body: InvSynchronousListRequestBody = None,
    ):
        self.body = body
        # 库存同步列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvSynchronousListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BatchKfperiodInvListRequestBody(TeaModel):
    def __init__(
        self,
        material_ids: str = None,
        auxprop_ids: str = None,
        stock_ids: str = None,
        sp_ids: str = None,
        begin_date: str = None,
        expire_date: str = None,
        page: int = None,
        page_size: int = None,
    ):
        # 商品ID集合，多个ID用英文逗号隔开
        self.material_ids = material_ids
        # 商品辅助属性ID集合，多个ID用英文逗号隔开
        self.auxprop_ids = auxprop_ids
        # 仓库ID集合，多个ID用英文逗号隔开
        self.stock_ids = stock_ids
        # 仓位ID集合，多个ID用英文逗号隔开
        self.sp_ids = sp_ids
        # 开始时间（修改时间），格式yyyy-MM-dd
        self.begin_date = begin_date
        # 结束时间（修改时间），格式yyyy-MM-dd
        self.expire_date = expire_date
        # 页码 默认1
        self.page = page
        # 每页大小，默认10，不传表示不分页
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.material_ids is not None:
            result['materialids'] = self.material_ids
        if self.auxprop_ids is not None:
            result['auxpropids'] = self.auxprop_ids
        if self.stock_ids is not None:
            result['stockids'] = self.stock_ids
        if self.sp_ids is not None:
            result['spids'] = self.sp_ids
        if self.begin_date is not None:
            result['begindate'] = self.begin_date
        if self.expire_date is not None:
            result['expiredate'] = self.expire_date
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('materialids') is not None:
            self.material_ids = m.get('materialids')
        if m.get('auxpropids') is not None:
            self.auxprop_ids = m.get('auxpropids')
        if m.get('stockids') is not None:
            self.stock_ids = m.get('stockids')
        if m.get('spids') is not None:
            self.sp_ids = m.get('spids')
        if m.get('begindate') is not None:
            self.begin_date = m.get('begindate')
        if m.get('expiredate') is not None:
            self.expire_date = m.get('expiredate')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        return self


class BatchKfperiodInvListRequest(TeaModel):
    def __init__(
        self,
        body: BatchKfperiodInvListRequestBody = None,
    ):
        self.body = body
        # 批次保质期及库存列表查询

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = BatchKfperiodInvListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class Serial(TeaModel):
    def __init__(
        self,
        serial_num: str = None,
        comment: str = None,
    ):
        # 序列号 序列号录入必传字段
        self.serial_num = serial_num
        # 备注
        self.comment = comment

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.serial_num is not None:
            result['serialnum'] = self.serial_num
        if self.comment is not None:
            result['comment'] = self.comment
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('serialnum') is not None:
            self.serial_num = m.get('serialnum')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        return self


class InvInitSaveRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        material_id: str = None,
        stock_id: str = None,
        sp_id: str = None,
        unit_id: str = None,
        qty: str = None,
        auxprop_id: str = None,
        aux_id_1: str = None,
        aux_id_2: str = None,
        aux_id_3: str = None,
        aux_id_4: str = None,
        aux_id_5: str = None,
        barcode: str = None,
        batch_no: str = None,
        proplace: str = None,
        proreg_no: str = None,
        prolicense: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_type: str = None,
        kf_period: str = None,
        unit_cost: str = None,
        amount: str = None,
        sn: str = None,
        serial_entry_entity: List[Serial] = None,
    ):
        # 单据ID，修改单据时必填，新增不传该字段
        self.id = id
        # 商品id
        self.material_id = material_id
        # 仓库id
        self.stock_id = stock_id
        # 仓位id(有仓位时必填)
        self.sp_id = sp_id
        # 单位id
        self.unit_id = unit_id
        # 数量
        self.qty = qty
        # 辅助属性分录id(辅助属性商品必填)
        self.auxprop_id = auxprop_id
        # 辅助属性分类对应的辅助属性id(辅助属性商品必填)
        self.aux_id_1 = aux_id_1
        # 辅助属性分类对应的辅助属性2id(辅助属性商品必填)
        self.aux_id_2 = aux_id_2
        # 辅助属性分类对应的辅助属性3id(辅助属性商品必填)
        self.aux_id_3 = aux_id_3
        # 辅助属性分类对应的辅助属性4id(辅助属性商品必填)
        self.aux_id_4 = aux_id_4
        # 辅助属性分类对应的辅助属性5id(辅助属性商品必填)
        self.aux_id_5 = aux_id_5
        # 条形码
        self.barcode = barcode
        # 批次号 (批次商品必填)
        self.batch_no = batch_no
        # 产地
        self.proplace = proplace
        # 注册证号
        self.proreg_no = proreg_no
        # 生产许可证号
        self.prolicense = prolicense
        # 生产日期
        self.kf_date = kf_date
        # 有效日期
        self.valid_date = valid_date
        # 保质期类型，1：天，2：月，3：年
        self.kf_type = kf_type
        # 保质期天数
        self.kf_period = kf_period
        # 基本单位成本
        self.unit_cost = unit_cost
        # 期初总价
        self.amount = amount
        # 序列号
        self.sn = sn
        # 序列号录入单据体 序列号商品必录
        self.serial_entry_entity = serial_entry_entity

    def validate(self):
        if self.serial_entry_entity:
            for k in self.serial_entry_entity:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.material_id is not None:
            result['materialid_id'] = self.material_id
        if self.stock_id is not None:
            result['stockid_id'] = self.stock_id
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.unit_id is not None:
            result['unit_id'] = self.unit_id
        if self.qty is not None:
            result['qty'] = self.qty
        if self.auxprop_id is not None:
            result['auxpropid_id'] = self.auxprop_id
        if self.aux_id_1 is not None:
            result['auxid1_id'] = self.aux_id_1
        if self.aux_id_2 is not None:
            result['auxid2_id'] = self.aux_id_2
        if self.aux_id_3 is not None:
            result['auxid3_id'] = self.aux_id_3
        if self.aux_id_4 is not None:
            result['auxid4_id'] = self.aux_id_4
        if self.aux_id_5 is not None:
            result['auxid5_id'] = self.aux_id_5
        if self.barcode is not None:
            result['barcode'] = self.barcode
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.proplace is not None:
            result['proplace'] = self.proplace
        if self.proreg_no is not None:
            result['proregno'] = self.proreg_no
        if self.prolicense is not None:
            result['prolicense'] = self.prolicense
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.unit_cost is not None:
            result['unitcost'] = self.unit_cost
        if self.amount is not None:
            result['amount'] = self.amount
        if self.sn is not None:
            result['sn'] = self.sn
        result['serialentryentity'] = []
        if self.serial_entry_entity is not None:
            for k in self.serial_entry_entity:
                result['serialentryentity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('materialid_id') is not None:
            self.material_id = m.get('materialid_id')
        if m.get('stockid_id') is not None:
            self.stock_id = m.get('stockid_id')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('unit_id') is not None:
            self.unit_id = m.get('unit_id')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('auxpropid_id') is not None:
            self.auxprop_id = m.get('auxpropid_id')
        if m.get('auxid1_id') is not None:
            self.aux_id_1 = m.get('auxid1_id')
        if m.get('auxid2_id') is not None:
            self.aux_id_2 = m.get('auxid2_id')
        if m.get('auxid3_id') is not None:
            self.aux_id_3 = m.get('auxid3_id')
        if m.get('auxid4_id') is not None:
            self.aux_id_4 = m.get('auxid4_id')
        if m.get('auxid5_id') is not None:
            self.aux_id_5 = m.get('auxid5_id')
        if m.get('barcode') is not None:
            self.barcode = m.get('barcode')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.proplace = m.get('proplace')
        if m.get('proregno') is not None:
            self.proreg_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.prolicense = m.get('prolicense')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('unitcost') is not None:
            self.unit_cost = m.get('unitcost')
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('sn') is not None:
            self.sn = m.get('sn')
        self.serial_entry_entity = []
        if m.get('serialentryentity') is not None:
            for k in m.get('serialentryentity'):
                temp_model = Serial()
                self.serial_entry_entity.append(temp_model.from_map(k))
        return self


class InvInitSaveRequest(TeaModel):
    def __init__(
        self,
        body: InvInitSaveRequestBody = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvInitSaveRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvInitListRequestBody(TeaModel):
    def __init__(
        self,
        start_date: str = None,
        end_date: str = None,
        search: str = None,
        page: int = None,
        pagesize: int = None,
        qty: str = None,
        order_by: str = None,
    ):
        # 开始日期（“yyyy-MM-dd”）
        self.start_date = start_date
        # 结束日期（“yyyy-MM-dd”）
        self.end_date = end_date
        # 模糊搜索，支持商品名称
        self.search = search
        # 当前页（默认1）
        self.page = page
        # 每页显示条数，（默认10，最大值100）
        self.pagesize = pagesize
        # 数量
        self.qty = qty
        # 排序字段 createtime asc
        self.order_by = order_by

    def validate(self):
        self.validate_required(self.qty, 'qty')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.search is not None:
            result['search'] = self.search
        if self.page is not None:
            result['page'] = self.page
        if self.pagesize is not None:
            result['unit_id'] = self.pagesize
        if self.qty is not None:
            result['pagesize'] = self.qty
        if self.order_by is not None:
            result['orderby'] = self.order_by
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('unit_id') is not None:
            self.pagesize = m.get('unit_id')
        if m.get('pagesize') is not None:
            self.qty = m.get('pagesize')
        if m.get('orderby') is not None:
            self.order_by = m.get('orderby')
        return self


class InvInitListRequest(TeaModel):
    def __init__(
        self,
        body: InvInitListRequestBody = None,
    ):
        self.body = body
        # 期初列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvInitListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvQuerySnListByIdsRequestBody(TeaModel):
    def __init__(
        self,
        sn_list_id: str = None,
    ):
        # snlistid 序列号保存后生成的id值
        self.sn_list_id = sn_list_id

    def validate(self):
        self.validate_required(self.sn_list_id, 'sn_list_id')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        return self


class InvQuerySnListByIdsRequest(TeaModel):
    def __init__(
        self,
        body: InvQuerySnListByIdsRequestBody = None,
    ):
        self.body = body
        # 期初列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvQuerySnListByIdsRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvCheckGainLossBillMaterialEntity(TeaModel):
    def __init__(
        self,
        id: str = None,
        material_id: str = None,
        stock_id: str = None,
        sp_id: str = None,
        qty: str = None,
        unit_id: str = None,
        auxprop_id: str = None,
        aux_id_1: str = None,
        aux_id_2: str = None,
        aux_id_3: str = None,
        aux_id_4: str = None,
        aux_id_5: str = None,
        barcode: str = None,
        batch_no: str = None,
        proplace: str = None,
        proreg_no: str = None,
        prolicense: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_type: str = None,
        kf_period: str = None,
        sn: str = None,
        sn_list_id: str = None,
        cost: str = None,
        unit_cost: str = None,
        comment: str = None,
        src_bill_no: str = None,
        src_bill_type_id: str = None,
        src_inter_id: str = None,
        src_bill_date: str = None,
        src_seq: str = None,
        src_entry_id: str = None,
    ):
        # 分录id，新增不传该字段，修改必传
        self.id = id
        # 商品id
        self.material_id = material_id
        # 仓库id
        self.stock_id = stock_id
        # 仓位id
        self.sp_id = sp_id
        # 盘亏数量
        self.qty = qty
        # 单位id
        self.unit_id = unit_id
        # 辅助属性(辅助属性商品必填)
        self.auxprop_id = auxprop_id
        # 辅助属性分类对应的辅助属性1ID(辅助属性商品必填)
        self.aux_id_1 = aux_id_1
        # 辅助属性分类对应的辅助属性2ID(辅助属性商品必填)
        self.aux_id_2 = aux_id_2
        # 辅助属性分类对应的辅助属性3ID(辅助属性商品必填)
        self.aux_id_3 = aux_id_3
        # 辅助属性分类对应的辅助属性4ID(辅助属性商品必填)
        self.aux_id_4 = aux_id_4
        # 辅助属性分类对应的辅助属性5ID(辅助属性商品必填)
        self.aux_id_5 = aux_id_5
        # 条形码
        self.barcode = barcode
        # 批次号 (批次商品必填)
        self.batch_no = batch_no
        # 产地
        self.proplace = proplace
        # 注册证号
        self.proreg_no = proreg_no
        # 生产许可证号
        self.prolicense = prolicense
        # 生产日期
        self.kf_date = kf_date
        # 有效日期
        self.valid_date = valid_date
        # 保质期类型，1：天，2：月，3：年
        self.kf_type = kf_type
        # 保质期天数
        self.kf_period = kf_period
        # 序列号
        self.sn = sn
        # 序列号流转ID
        self.sn_list_id = sn_list_id
        # 入库成本
        self.cost = cost
        # 入库单位成本
        self.unit_cost = unit_cost
        # 行备注
        self.comment = comment
        # 源单编码
        self.src_bill_no = src_bill_no
        # 源单类型
        self.src_bill_type_id = src_bill_type_id
        # 源单内码
        self.src_inter_id = src_inter_id
        # 源单日期
        self.src_bill_date = src_bill_date
        # 源单行号
        self.src_seq = src_seq
        # 源单分录内码
        self.src_entry_id = src_entry_id

    def validate(self):
        self.validate_required(self.material_id, 'material_id')
        self.validate_required(self.qty, 'qty')
        self.validate_required(self.unit_id, 'unit_id')
        self.validate_required(self.cost, 'cost')
        self.validate_required(self.unit_cost, 'unit_cost')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.material_id is not None:
            result['materialid_id'] = self.material_id
        if self.stock_id is not None:
            result['stockid_id'] = self.stock_id
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.qty is not None:
            result['qty'] = self.qty
        if self.unit_id is not None:
            result['unit_id'] = self.unit_id
        if self.auxprop_id is not None:
            result['auxpropid_id'] = self.auxprop_id
        if self.aux_id_1 is not None:
            result['auxid1_id'] = self.aux_id_1
        if self.aux_id_2 is not None:
            result['auxid2_id'] = self.aux_id_2
        if self.aux_id_3 is not None:
            result['auxid3_id'] = self.aux_id_3
        if self.aux_id_4 is not None:
            result['auxid4_id'] = self.aux_id_4
        if self.aux_id_5 is not None:
            result['auxid5_id'] = self.aux_id_5
        if self.barcode is not None:
            result['auxid5_id'] = self.barcode
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.proplace is not None:
            result['proplace'] = self.proplace
        if self.proreg_no is not None:
            result['proregno'] = self.proreg_no
        if self.prolicense is not None:
            result['prolicense'] = self.prolicense
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.sn is not None:
            result['sn'] = self.sn
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.cost is not None:
            result['cost'] = self.cost
        if self.unit_cost is not None:
            result['unitcost'] = self.unit_cost
        if self.comment is not None:
            result['comment'] = self.comment
        if self.src_bill_no is not None:
            result['srcbillno'] = self.src_bill_no
        if self.src_bill_type_id is not None:
            result['srcbilltypeid_id'] = self.src_bill_type_id
        if self.src_inter_id is not None:
            result['srcinterid'] = self.src_inter_id
        if self.src_bill_date is not None:
            result['src_billdate'] = self.src_bill_date
        if self.src_seq is not None:
            result['srcseq'] = self.src_seq
        if self.src_entry_id is not None:
            result['srcentryid'] = self.src_entry_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('materialid_id') is not None:
            self.material_id = m.get('materialid_id')
        if m.get('stockid_id') is not None:
            self.stock_id = m.get('stockid_id')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('unit_id') is not None:
            self.unit_id = m.get('unit_id')
        if m.get('auxpropid_id') is not None:
            self.auxprop_id = m.get('auxpropid_id')
        if m.get('auxid1_id') is not None:
            self.aux_id_1 = m.get('auxid1_id')
        if m.get('auxid2_id') is not None:
            self.aux_id_2 = m.get('auxid2_id')
        if m.get('auxid3_id') is not None:
            self.aux_id_3 = m.get('auxid3_id')
        if m.get('auxid4_id') is not None:
            self.aux_id_4 = m.get('auxid4_id')
        if m.get('auxid5_id') is not None:
            self.aux_id_5 = m.get('auxid5_id')
        if m.get('auxid5_id') is not None:
            self.barcode = m.get('auxid5_id')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.proplace = m.get('proplace')
        if m.get('proregno') is not None:
            self.proreg_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.prolicense = m.get('prolicense')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('sn') is not None:
            self.sn = m.get('sn')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('unitcost') is not None:
            self.unit_cost = m.get('unitcost')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('srcbillno') is not None:
            self.src_bill_no = m.get('srcbillno')
        if m.get('srcbilltypeid_id') is not None:
            self.src_bill_type_id = m.get('srcbilltypeid_id')
        if m.get('srcinterid') is not None:
            self.src_inter_id = m.get('srcinterid')
        if m.get('src_billdate') is not None:
            self.src_bill_date = m.get('src_billdate')
        if m.get('srcseq') is not None:
            self.src_seq = m.get('srcseq')
        if m.get('srcentryid') is not None:
            self.src_entry_id = m.get('srcentryid')
        return self


class InvCheckGainLossBillSaveRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_no: str = None,
        bill_date: str = None,
        remark: str = None,
        material_entity: List[InvCheckGainLossBillMaterialEntity] = None,
    ):
        # 单据ID，修改单据时必填，新增不传该字段
        self.id = id
        # 单据编码，修改单据时必填，新增不传该字段
        self.bill_no = bill_no
        # 单据日期
        self.bill_date = bill_date
        # 备注
        self.remark = remark
        # 商品分录
        self.material_entity = material_entity

    def validate(self):
        if self.material_entity:
            for k in self.material_entity:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_no is not None:
            result['billno'] = self.bill_no
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.remark is not None:
            result['remark'] = self.remark
        result['material_entity'] = []
        if self.material_entity is not None:
            for k in self.material_entity:
                result['material_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billno') is not None:
            self.bill_no = m.get('billno')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        self.material_entity = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = InvCheckGainLossBillMaterialEntity()
                self.material_entity.append(temp_model.from_map(k))
        return self


class InvCheckGainLossBillSaveRequest(TeaModel):
    def __init__(
        self,
        body: InvCheckGainLossBillSaveRequestBody = None,
    ):
        self.body = body
        # 盘盈单、盘亏单商品分录

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvCheckGainLossBillSaveRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvCheckGainLossBillListRequestBody(TeaModel):
    def __init__(
        self,
        bill_status: str = None,
        start_date: str = None,
        end_date: str = None,
        start_bill_date: str = None,
        end_bill_date: str = None,
        select_fields: str = None,
        search: str = None,
        page: int = None,
        page_size: int = None,
    ):
        # 单据状态（所有：“”，已审核：“C”，未审核：“Z”）
        self.bill_status = bill_status
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.start_date = start_date
        # 结束日期（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.end_date = end_date
        # 单据日期-开始日期（“yyyy-MM-dd”）
        self.start_bill_date = start_bill_date
        # 单据日期-结束日期（“yyyy-MM-dd”）
        self.end_bill_date = end_bill_date
        # 自定义查询字段，如（"material_entity.materialid.id"）
        self.select_fields = select_fields
        # 模糊搜索，单据编码、商品名称、任务名称、仓库名称
        self.search = search
        # 当前页（默认1）
        self.page = page
        # 每页显示条数，（默认10，最大值100）
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.start_bill_date is not None:
            result['startbilldate'] = self.start_bill_date
        if self.end_bill_date is not None:
            result['endbilldate'] = self.end_bill_date
        if self.select_fields is not None:
            result['selectfields'] = self.select_fields
        if self.search is not None:
            result['search'] = self.search
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('startbilldate') is not None:
            self.start_bill_date = m.get('startbilldate')
        if m.get('endbilldate') is not None:
            self.end_bill_date = m.get('endbilldate')
        if m.get('selectfields') is not None:
            self.select_fields = m.get('selectfields')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        return self


class InvCheckGainLossBillListRequest(TeaModel):
    def __init__(
        self,
        body: InvCheckGainLossBillListRequestBody = None,
    ):
        self.body = body
        # 盘亏单列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvCheckGainLossBillListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvCheckLossBillMaterialDetail(TeaModel):
    def __init__(
        self,
        seq: str = None,
        id: str = None,
        picture: str = None,
        material_id: str = None,
        material_name: str = None,
        material_number: str = None,
        material_is_multi_unit: bool = None,
        material_is_serial: bool = None,
        material_is_asstattr: bool = None,
        material_is_kfperiod: bool = None,
        material_is_batch: bool = None,
        material_model: str = None,
        stock_id: str = None,
        stock_name: str = None,
        stock_number: str = None,
        stock_is_allow_freight: str = None,
        sp_id: str = None,
        sp_name: str = None,
        sp_number: str = None,
        auxprop_id: str = None,
        auxprop_name: str = None,
        auxprop_number: str = None,
        aux_id_1: str = None,
        aux_id_1name: str = None,
        aux_id_1number: str = None,
        aux_id_2: str = None,
        aux_id_2name: str = None,
        aux_id_2number: str = None,
        aux_id_3: str = None,
        aux_id_3name: str = None,
        aux_id_3number: str = None,
        aux_id_4: str = None,
        aux_id_4name: str = None,
        aux_id_4number: str = None,
        aux_id_5: str = None,
        aux_id_5name: str = None,
        aux_id_5number: str = None,
        barcode: str = None,
        batch_no: str = None,
        proplace: str = None,
        proreg_no: str = None,
        prolicense: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_type: str = None,
        kf_period: str = None,
        sn: str = None,
        sn_list_id: str = None,
        base_unit_id: str = None,
        base_unit_name: str = None,
        base_unit_number: str = None,
        unit_id: str = None,
        unit_name: str = None,
        unit_number: str = None,
        aux_unit_id: str = None,
        aux_unit_name: str = None,
        aux_unit_number: str = None,
        conversion_rate: str = None,
        qty: str = None,
        inv_qty: str = None,
        base_qty: str = None,
        inv_base_qty: str = None,
        aux_qty: str = None,
        deffloat_qty: str = None,
        aux_coefficient: str = None,
        coefficient: str = None,
        price: str = None,
        cost: str = None,
        unit_cost: str = None,
        comment: str = None,
        src_bill_no: str = None,
        src_bill_type_id: str = None,
        src_bill_type_name: str = None,
        src_bill_type_number: str = None,
        src_inter_id: str = None,
        src_bill_date: str = None,
        src_seq: str = None,
        src_entry_id: str = None,
    ):
        # 分录序号
        self.seq = seq
        # 分录ID
        self.id = id
        # 图片url
        self.picture = picture
        # 商品id
        self.material_id = material_id
        # 商品名称
        self.material_name = material_name
        # 商品编码
        self.material_number = material_number
        # 商品是否多单位
        self.material_is_multi_unit = material_is_multi_unit
        # 商品是否序列号
        self.material_is_serial = material_is_serial
        # 商品是否启用辅助属性
        self.material_is_asstattr = material_is_asstattr
        # 商品是否开启保质期
        self.material_is_kfperiod = material_is_kfperiod
        # 商品是否开启批次
        self.material_is_batch = material_is_batch
        # 商品规格
        self.material_model = material_model
        # 仓库id
        self.stock_id = stock_id
        # 仓库名称
        self.stock_name = stock_name
        # 仓库编码
        self.stock_number = stock_number
        # 仓库启用仓位管理
        self.stock_is_allow_freight = stock_is_allow_freight
        # 仓位id
        self.sp_id = sp_id
        # 仓位名称
        self.sp_name = sp_name
        # 仓位编码
        self.sp_number = sp_number
        # 辅助属性id
        self.auxprop_id = auxprop_id
        # 辅助属性名称
        self.auxprop_name = auxprop_name
        # 辅助属性编码
        self.auxprop_number = auxprop_number
        # 辅助属性1id
        self.aux_id_1 = aux_id_1
        # 辅助属性1名称
        self.aux_id_1name = aux_id_1name
        # 辅助属性1编码
        self.aux_id_1number = aux_id_1number
        # 辅助属性2id
        self.aux_id_2 = aux_id_2
        # 辅助属性2名称
        self.aux_id_2name = aux_id_2name
        # 辅助属性2编码
        self.aux_id_2number = aux_id_2number
        # 辅助属性3id
        self.aux_id_3 = aux_id_3
        # 辅助属性3名称
        self.aux_id_3name = aux_id_3name
        # 辅助属性3编码
        self.aux_id_3number = aux_id_3number
        # 辅助属性4id
        self.aux_id_4 = aux_id_4
        # 辅助属性4名称
        self.aux_id_4name = aux_id_4name
        # 辅助属性4编码
        self.aux_id_4number = aux_id_4number
        # 辅助属性5id
        self.aux_id_5 = aux_id_5
        # 辅助属性5名称
        self.aux_id_5name = aux_id_5name
        # 辅助属性5编码
        self.aux_id_5number = aux_id_5number
        # 条形码
        self.barcode = barcode
        # 批次号
        self.batch_no = batch_no
        # 产地
        self.proplace = proplace
        # 注册证号
        self.proreg_no = proreg_no
        # 生产许可证号
        self.prolicense = prolicense
        # 生产日期
        self.kf_date = kf_date
        # 有效日期
        self.valid_date = valid_date
        # 保质期类型，1：天，2：月，3：年
        self.kf_type = kf_type
        # 保质期天数
        self.kf_period = kf_period
        # 序列号
        self.sn = sn
        # 序列号流转ID
        self.sn_list_id = sn_list_id
        # 基本单位id
        self.base_unit_id = base_unit_id
        # 基本单位名称
        self.base_unit_name = base_unit_name
        # 基本单位编码
        self.base_unit_number = base_unit_number
        # 单位id
        self.unit_id = unit_id
        # 单位名称
        self.unit_name = unit_name
        # 单位编码
        self.unit_number = unit_number
        # 辅助单位id
        self.aux_unit_id = aux_unit_id
        # 辅助单位名称
        self.aux_unit_name = aux_unit_name
        # 辅助单位编码
        self.aux_unit_number = aux_unit_number
        # 换算公式
        self.conversion_rate = conversion_rate
        # 盘亏数量
        self.qty = qty
        # 库存数量
        self.inv_qty = inv_qty
        # 基本数量
        self.base_qty = base_qty
        # 基本库存数量
        self.inv_base_qty = inv_base_qty
        # 辅助单位数量
        self.aux_qty = aux_qty
        # 辅助基本数量
        self.deffloat_qty = deffloat_qty
        # 辅助换算率
        self.aux_coefficient = aux_coefficient
        # 换算率
        self.coefficient = coefficient
        # 单价
        self.price = price
        # 入库成本
        self.cost = cost
        # 入库单位成本
        self.unit_cost = unit_cost
        # 行备注
        self.comment = comment
        # 源单编号
        self.src_bill_no = src_bill_no
        # 源单类型id
        self.src_bill_type_id = src_bill_type_id
        # 源单类型名称
        self.src_bill_type_name = src_bill_type_name
        # 源单类型编码
        self.src_bill_type_number = src_bill_type_number
        # 源单内码
        self.src_inter_id = src_inter_id
        # 源单日期
        self.src_bill_date = src_bill_date
        # 源单行号
        self.src_seq = src_seq
        # 源单分录内码
        self.src_entry_id = src_entry_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.seq is not None:
            result['seq'] = self.seq
        if self.id is not None:
            result['id'] = self.id
        if self.picture is not None:
            result['picture'] = self.picture
        if self.material_id is not None:
            result['materialid_id'] = self.material_id
        if self.material_name is not None:
            result['materialid_name'] = self.material_name
        if self.material_number is not None:
            result['materialid_number'] = self.material_number
        if self.material_is_multi_unit is not None:
            result['materialid_ismulti_unit'] = self.material_is_multi_unit
        if self.material_is_serial is not None:
            result['materialid_isserial'] = self.material_is_serial
        if self.material_is_asstattr is not None:
            result['materialid_isasstattr'] = self.material_is_asstattr
        if self.material_is_kfperiod is not None:
            result['materialid_iskfperiod'] = self.material_is_kfperiod
        if self.material_is_batch is not None:
            result['materialid_isbatch'] = self.material_is_batch
        if self.material_model is not None:
            result['materialid_model'] = self.material_model
        if self.stock_id is not None:
            result['stockid_id'] = self.stock_id
        if self.stock_name is not None:
            result['stockid_name'] = self.stock_name
        if self.stock_number is not None:
            result['stockid_number'] = self.stock_number
        if self.stock_is_allow_freight is not None:
            result['stockid_isallowfreight'] = self.stock_is_allow_freight
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.sp_name is not None:
            result['spid_name'] = self.sp_name
        if self.sp_number is not None:
            result['spid_number'] = self.sp_number
        if self.auxprop_id is not None:
            result['auxpropid_id'] = self.auxprop_id
        if self.auxprop_name is not None:
            result['auxpropid_name'] = self.auxprop_name
        if self.auxprop_number is not None:
            result['auxpropid_number'] = self.auxprop_number
        if self.aux_id_1 is not None:
            result['auxid1_id'] = self.aux_id_1
        if self.aux_id_1name is not None:
            result['auxid1_name'] = self.aux_id_1name
        if self.aux_id_1number is not None:
            result['auxid1_number'] = self.aux_id_1number
        if self.aux_id_2 is not None:
            result['auxid2_id'] = self.aux_id_2
        if self.aux_id_2name is not None:
            result['auxid2_name'] = self.aux_id_2name
        if self.aux_id_2number is not None:
            result['auxid2_number'] = self.aux_id_2number
        if self.aux_id_3 is not None:
            result['auxid3_id'] = self.aux_id_3
        if self.aux_id_3name is not None:
            result['auxid3_name'] = self.aux_id_3name
        if self.aux_id_3number is not None:
            result['auxid3_number'] = self.aux_id_3number
        if self.aux_id_4 is not None:
            result['auxid4_id'] = self.aux_id_4
        if self.aux_id_4name is not None:
            result['auxid4_name'] = self.aux_id_4name
        if self.aux_id_4number is not None:
            result['auxid4_number'] = self.aux_id_4number
        if self.aux_id_5 is not None:
            result['auxid5_id'] = self.aux_id_5
        if self.aux_id_5name is not None:
            result['auxid5_name'] = self.aux_id_5name
        if self.aux_id_5number is not None:
            result['auxid5_number'] = self.aux_id_5number
        if self.barcode is not None:
            result['barcode'] = self.barcode
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.proplace is not None:
            result['proplace'] = self.proplace
        if self.proreg_no is not None:
            result['proregno'] = self.proreg_no
        if self.prolicense is not None:
            result['prolicense'] = self.prolicense
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.sn is not None:
            result['sn'] = self.sn
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.base_unit_id is not None:
            result['baseunit_id'] = self.base_unit_id
        if self.base_unit_name is not None:
            result['baseunit_name'] = self.base_unit_name
        if self.base_unit_number is not None:
            result['baseunit_number'] = self.base_unit_number
        if self.unit_id is not None:
            result['unit_id'] = self.unit_id
        if self.unit_name is not None:
            result['unit_name'] = self.unit_name
        if self.unit_number is not None:
            result['unit_number'] = self.unit_number
        if self.aux_unit_id is not None:
            result['auxunitid_id'] = self.aux_unit_id
        if self.aux_unit_name is not None:
            result['auxunitid_name'] = self.aux_unit_name
        if self.aux_unit_number is not None:
            result['auxunitid_number'] = self.aux_unit_number
        if self.conversion_rate is not None:
            result['conversionrate'] = self.conversion_rate
        if self.qty is not None:
            result['qty'] = self.qty
        if self.inv_qty is not None:
            result['inv_qty'] = self.inv_qty
        if self.base_qty is not None:
            result['baseqty'] = self.base_qty
        if self.inv_base_qty is not None:
            result['inv_baseqty'] = self.inv_base_qty
        if self.aux_qty is not None:
            result['auxqty'] = self.aux_qty
        if self.deffloat_qty is not None:
            result['deffloatqty'] = self.deffloat_qty
        if self.aux_coefficient is not None:
            result['auxcoefficient'] = self.aux_coefficient
        if self.coefficient is not None:
            result['coefficient'] = self.coefficient
        if self.price is not None:
            result['price'] = self.price
        if self.cost is not None:
            result['cost'] = self.cost
        if self.unit_cost is not None:
            result['unitcost'] = self.unit_cost
        if self.comment is not None:
            result['comment'] = self.comment
        if self.src_bill_no is not None:
            result['srcbillno'] = self.src_bill_no
        if self.src_bill_type_id is not None:
            result['srcbilltypeid_id'] = self.src_bill_type_id
        if self.src_bill_type_name is not None:
            result['srcbilltypeid_name'] = self.src_bill_type_name
        if self.src_bill_type_number is not None:
            result['srcbilltypeid_number'] = self.src_bill_type_number
        if self.src_inter_id is not None:
            result['srcinterid'] = self.src_inter_id
        if self.src_bill_date is not None:
            result['src_billdate'] = self.src_bill_date
        if self.src_seq is not None:
            result['srcseq'] = self.src_seq
        if self.src_entry_id is not None:
            result['srcentryid'] = self.src_entry_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('seq') is not None:
            self.seq = m.get('seq')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('picture') is not None:
            self.picture = m.get('picture')
        if m.get('materialid_id') is not None:
            self.material_id = m.get('materialid_id')
        if m.get('materialid_name') is not None:
            self.material_name = m.get('materialid_name')
        if m.get('materialid_number') is not None:
            self.material_number = m.get('materialid_number')
        if m.get('materialid_ismulti_unit') is not None:
            self.material_is_multi_unit = m.get('materialid_ismulti_unit')
        if m.get('materialid_isserial') is not None:
            self.material_is_serial = m.get('materialid_isserial')
        if m.get('materialid_isasstattr') is not None:
            self.material_is_asstattr = m.get('materialid_isasstattr')
        if m.get('materialid_iskfperiod') is not None:
            self.material_is_kfperiod = m.get('materialid_iskfperiod')
        if m.get('materialid_isbatch') is not None:
            self.material_is_batch = m.get('materialid_isbatch')
        if m.get('materialid_model') is not None:
            self.material_model = m.get('materialid_model')
        if m.get('stockid_id') is not None:
            self.stock_id = m.get('stockid_id')
        if m.get('stockid_name') is not None:
            self.stock_name = m.get('stockid_name')
        if m.get('stockid_number') is not None:
            self.stock_number = m.get('stockid_number')
        if m.get('stockid_isallowfreight') is not None:
            self.stock_is_allow_freight = m.get('stockid_isallowfreight')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('spid_name') is not None:
            self.sp_name = m.get('spid_name')
        if m.get('spid_number') is not None:
            self.sp_number = m.get('spid_number')
        if m.get('auxpropid_id') is not None:
            self.auxprop_id = m.get('auxpropid_id')
        if m.get('auxpropid_name') is not None:
            self.auxprop_name = m.get('auxpropid_name')
        if m.get('auxpropid_number') is not None:
            self.auxprop_number = m.get('auxpropid_number')
        if m.get('auxid1_id') is not None:
            self.aux_id_1 = m.get('auxid1_id')
        if m.get('auxid1_name') is not None:
            self.aux_id_1name = m.get('auxid1_name')
        if m.get('auxid1_number') is not None:
            self.aux_id_1number = m.get('auxid1_number')
        if m.get('auxid2_id') is not None:
            self.aux_id_2 = m.get('auxid2_id')
        if m.get('auxid2_name') is not None:
            self.aux_id_2name = m.get('auxid2_name')
        if m.get('auxid2_number') is not None:
            self.aux_id_2number = m.get('auxid2_number')
        if m.get('auxid3_id') is not None:
            self.aux_id_3 = m.get('auxid3_id')
        if m.get('auxid3_name') is not None:
            self.aux_id_3name = m.get('auxid3_name')
        if m.get('auxid3_number') is not None:
            self.aux_id_3number = m.get('auxid3_number')
        if m.get('auxid4_id') is not None:
            self.aux_id_4 = m.get('auxid4_id')
        if m.get('auxid4_name') is not None:
            self.aux_id_4name = m.get('auxid4_name')
        if m.get('auxid4_number') is not None:
            self.aux_id_4number = m.get('auxid4_number')
        if m.get('auxid5_id') is not None:
            self.aux_id_5 = m.get('auxid5_id')
        if m.get('auxid5_name') is not None:
            self.aux_id_5name = m.get('auxid5_name')
        if m.get('auxid5_number') is not None:
            self.aux_id_5number = m.get('auxid5_number')
        if m.get('barcode') is not None:
            self.barcode = m.get('barcode')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.proplace = m.get('proplace')
        if m.get('proregno') is not None:
            self.proreg_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.prolicense = m.get('prolicense')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('sn') is not None:
            self.sn = m.get('sn')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('baseunit_id') is not None:
            self.base_unit_id = m.get('baseunit_id')
        if m.get('baseunit_name') is not None:
            self.base_unit_name = m.get('baseunit_name')
        if m.get('baseunit_number') is not None:
            self.base_unit_number = m.get('baseunit_number')
        if m.get('unit_id') is not None:
            self.unit_id = m.get('unit_id')
        if m.get('unit_name') is not None:
            self.unit_name = m.get('unit_name')
        if m.get('unit_number') is not None:
            self.unit_number = m.get('unit_number')
        if m.get('auxunitid_id') is not None:
            self.aux_unit_id = m.get('auxunitid_id')
        if m.get('auxunitid_name') is not None:
            self.aux_unit_name = m.get('auxunitid_name')
        if m.get('auxunitid_number') is not None:
            self.aux_unit_number = m.get('auxunitid_number')
        if m.get('conversionrate') is not None:
            self.conversion_rate = m.get('conversionrate')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('inv_qty') is not None:
            self.inv_qty = m.get('inv_qty')
        if m.get('baseqty') is not None:
            self.base_qty = m.get('baseqty')
        if m.get('inv_baseqty') is not None:
            self.inv_base_qty = m.get('inv_baseqty')
        if m.get('auxqty') is not None:
            self.aux_qty = m.get('auxqty')
        if m.get('deffloatqty') is not None:
            self.deffloat_qty = m.get('deffloatqty')
        if m.get('auxcoefficient') is not None:
            self.aux_coefficient = m.get('auxcoefficient')
        if m.get('coefficient') is not None:
            self.coefficient = m.get('coefficient')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('unitcost') is not None:
            self.unit_cost = m.get('unitcost')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('srcbillno') is not None:
            self.src_bill_no = m.get('srcbillno')
        if m.get('srcbilltypeid_id') is not None:
            self.src_bill_type_id = m.get('srcbilltypeid_id')
        if m.get('srcbilltypeid_name') is not None:
            self.src_bill_type_name = m.get('srcbilltypeid_name')
        if m.get('srcbilltypeid_number') is not None:
            self.src_bill_type_number = m.get('srcbilltypeid_number')
        if m.get('srcinterid') is not None:
            self.src_inter_id = m.get('srcinterid')
        if m.get('src_billdate') is not None:
            self.src_bill_date = m.get('src_billdate')
        if m.get('srcseq') is not None:
            self.src_seq = m.get('srcseq')
        if m.get('srcentryid') is not None:
            self.src_entry_id = m.get('srcentryid')
        return self


class InvCheckLossBillDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_no: str = None,
        bill_date: str = None,
        bill_status: str = None,
        create_time: str = None,
        modify_time: str = None,
        audit_time: str = None,
        creator_id: str = None,
        creatorid_name: str = None,
        creatorid_number: str = None,
        modifier_id: str = None,
        modifier_name: str = None,
        modifier_number: str = None,
        auditor_id: str = None,
        auditor_name: str = None,
        auditor_number: str = None,
        voucher_no: str = None,
        voucher_period: str = None,
        voucher_id: str = None,
        material_entity: List[InvCheckLossBillMaterialDetail] = None,
    ):
        # 单据ID
        self.id = id
        # 单据编码
        self.bill_no = bill_no
        # 单据日期
        self.bill_date = bill_date
        # 单据状态，Z：未审核，C：已审核
        self.bill_status = bill_status
        # 创建时间
        self.create_time = create_time
        # 修改时间
        self.modify_time = modify_time
        # 审核时间
        self.audit_time = audit_time
        # 创建人id
        self.creator_id = creator_id
        # 创建人名称
        self.creatorid_name = creatorid_name
        # 创建人编码
        self.creatorid_number = creatorid_number
        # 修改人id
        self.modifier_id = modifier_id
        # 修改人名称
        self.modifier_name = modifier_name
        # 修改人编码
        self.modifier_number = modifier_number
        # 审核人id
        self.auditor_id = auditor_id
        # 审核人名称
        self.auditor_name = auditor_name
        # 审核人编码
        self.auditor_number = auditor_number
        # 凭证字号
        self.voucher_no = voucher_no
        # 期间
        self.voucher_period = voucher_period
        # 凭证内码
        self.voucher_id = voucher_id
        # 商品分录
        self.material_entity = material_entity

    def validate(self):
        if self.material_entity:
            for k in self.material_entity:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_no is not None:
            result['billno'] = self.bill_no
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.create_time is not None:
            result['createtime'] = self.create_time
        if self.modify_time is not None:
            result['modifytime'] = self.modify_time
        if self.audit_time is not None:
            result['audittime'] = self.audit_time
        if self.creator_id is not None:
            result['creatorid_id'] = self.creator_id
        if self.creatorid_name is not None:
            result['creatorid_name'] = self.creatorid_name
        if self.creatorid_number is not None:
            result['creatorid_number'] = self.creatorid_number
        if self.modifier_id is not None:
            result['modifierid_id'] = self.modifier_id
        if self.modifier_name is not None:
            result['modifierid_name'] = self.modifier_name
        if self.modifier_number is not None:
            result['modifierid_number'] = self.modifier_number
        if self.auditor_id is not None:
            result['auditorid_id'] = self.auditor_id
        if self.auditor_name is not None:
            result['auditorid_name'] = self.auditor_name
        if self.auditor_number is not None:
            result['auditorid_number'] = self.auditor_number
        if self.voucher_no is not None:
            result['voucherno'] = self.voucher_no
        if self.voucher_period is not None:
            result['voucher_period'] = self.voucher_period
        if self.voucher_id is not None:
            result['voucherid'] = self.voucher_id
        result['material_entity'] = []
        if self.material_entity is not None:
            for k in self.material_entity:
                result['material_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billno') is not None:
            self.bill_no = m.get('billno')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('createtime') is not None:
            self.create_time = m.get('createtime')
        if m.get('modifytime') is not None:
            self.modify_time = m.get('modifytime')
        if m.get('audittime') is not None:
            self.audit_time = m.get('audittime')
        if m.get('creatorid_id') is not None:
            self.creator_id = m.get('creatorid_id')
        if m.get('creatorid_name') is not None:
            self.creatorid_name = m.get('creatorid_name')
        if m.get('creatorid_number') is not None:
            self.creatorid_number = m.get('creatorid_number')
        if m.get('modifierid_id') is not None:
            self.modifier_id = m.get('modifierid_id')
        if m.get('modifierid_name') is not None:
            self.modifier_name = m.get('modifierid_name')
        if m.get('modifierid_number') is not None:
            self.modifier_number = m.get('modifierid_number')
        if m.get('auditorid_id') is not None:
            self.auditor_id = m.get('auditorid_id')
        if m.get('auditorid_name') is not None:
            self.auditor_name = m.get('auditorid_name')
        if m.get('auditorid_number') is not None:
            self.auditor_number = m.get('auditorid_number')
        if m.get('voucherno') is not None:
            self.voucher_no = m.get('voucherno')
        if m.get('voucher_period') is not None:
            self.voucher_period = m.get('voucher_period')
        if m.get('voucherid') is not None:
            self.voucher_id = m.get('voucherid')
        self.material_entity = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = InvCheckLossBillMaterialDetail()
                self.material_entity.append(temp_model.from_map(k))
        return self


class InvCheckLossBillDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: InvCheckLossBillDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = InvCheckLossBillDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class InvCheckGainBillMaterialDetail(TeaModel):
    def __init__(
        self,
        seq: str = None,
        id: str = None,
        picture: str = None,
        material_id: str = None,
        material_name: str = None,
        material_number: str = None,
        material_is_multi_unit: bool = None,
        material_is_serial: bool = None,
        material_is_asstattr: bool = None,
        material_is_kfperiod: bool = None,
        material_is_batch: bool = None,
        material_model: str = None,
        stock_id: str = None,
        stock_name: str = None,
        stock_number: str = None,
        stock_is_allow_freight: str = None,
        sp_id: str = None,
        sp_name: str = None,
        sp_number: str = None,
        auxprop_id: str = None,
        auxprop_name: str = None,
        auxprop_number: str = None,
        aux_id_1: str = None,
        aux_id_1name: str = None,
        aux_id_1number: str = None,
        aux_id_2: str = None,
        aux_id_2name: str = None,
        aux_id_2number: str = None,
        aux_id_3: str = None,
        aux_id_3name: str = None,
        aux_id_3number: str = None,
        aux_id_4: str = None,
        aux_id_4name: str = None,
        aux_id_4number: str = None,
        aux_id_5: str = None,
        aux_id_5name: str = None,
        aux_id_5number: str = None,
        barcode: str = None,
        batch_no: str = None,
        proplace: str = None,
        proreg_no: str = None,
        prolicense: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_type: str = None,
        kf_period: str = None,
        sn: str = None,
        sn_list_id: str = None,
        base_unit_id: str = None,
        base_unit_name: str = None,
        base_unit_number: str = None,
        unit_id: str = None,
        unit_name: str = None,
        unit_number: str = None,
        aux_unit_id: str = None,
        aux_unit_name: str = None,
        aux_unit_number: str = None,
        conversion_rate: str = None,
        qty: str = None,
        inv_qty: str = None,
        base_qty: str = None,
        inv_base_qty: str = None,
        aux_qty: str = None,
        deffloat_qty: str = None,
        aux_coefficient: str = None,
        coefficient: str = None,
        price: str = None,
        cost: str = None,
        unit_cost: str = None,
        comment: str = None,
        src_bill_no: str = None,
        src_bill_type_id: str = None,
        src_bill_type_name: str = None,
        src_bill_type_number: str = None,
        src_inter_id: str = None,
        src_bill_date: str = None,
        src_seq: str = None,
        src_entry_id: str = None,
    ):
        # 分录序号
        self.seq = seq
        # 分录ID
        self.id = id
        # 图片url
        self.picture = picture
        # 商品id
        self.material_id = material_id
        # 商品名称
        self.material_name = material_name
        # 商品编码
        self.material_number = material_number
        # 商品是否多单位
        self.material_is_multi_unit = material_is_multi_unit
        # 商品是否序列号
        self.material_is_serial = material_is_serial
        # 商品是否启用辅助属性
        self.material_is_asstattr = material_is_asstattr
        # 商品是否开启保质期
        self.material_is_kfperiod = material_is_kfperiod
        # 商品是否开启批次
        self.material_is_batch = material_is_batch
        # 商品规格
        self.material_model = material_model
        # 仓库id
        self.stock_id = stock_id
        # 仓库名称
        self.stock_name = stock_name
        # 仓库编码
        self.stock_number = stock_number
        # 仓库启用仓位管理
        self.stock_is_allow_freight = stock_is_allow_freight
        # 仓位id
        self.sp_id = sp_id
        # 仓位名称
        self.sp_name = sp_name
        # 仓位编码
        self.sp_number = sp_number
        # 辅助属性id
        self.auxprop_id = auxprop_id
        # 辅助属性名称
        self.auxprop_name = auxprop_name
        # 辅助属性编码
        self.auxprop_number = auxprop_number
        # 辅助属性1id
        self.aux_id_1 = aux_id_1
        # 辅助属性1名称
        self.aux_id_1name = aux_id_1name
        # 辅助属性1编码
        self.aux_id_1number = aux_id_1number
        # 辅助属性2id
        self.aux_id_2 = aux_id_2
        # 辅助属性2名称
        self.aux_id_2name = aux_id_2name
        # 辅助属性2编码
        self.aux_id_2number = aux_id_2number
        # 辅助属性3id
        self.aux_id_3 = aux_id_3
        # 辅助属性3名称
        self.aux_id_3name = aux_id_3name
        # 辅助属性3编码
        self.aux_id_3number = aux_id_3number
        # 辅助属性4id
        self.aux_id_4 = aux_id_4
        # 辅助属性4名称
        self.aux_id_4name = aux_id_4name
        # 辅助属性4编码
        self.aux_id_4number = aux_id_4number
        # 辅助属性5id
        self.aux_id_5 = aux_id_5
        # 辅助属性5名称
        self.aux_id_5name = aux_id_5name
        # 辅助属性5编码
        self.aux_id_5number = aux_id_5number
        # 条形码
        self.barcode = barcode
        # 批次号
        self.batch_no = batch_no
        # 产地
        self.proplace = proplace
        # 注册证号
        self.proreg_no = proreg_no
        # 生产许可证号
        self.prolicense = prolicense
        # 生产日期
        self.kf_date = kf_date
        # 有效日期
        self.valid_date = valid_date
        # 保质期类型，1：天，2：月，3：年
        self.kf_type = kf_type
        # 保质期天数
        self.kf_period = kf_period
        # 序列号
        self.sn = sn
        # 序列号流转ID
        self.sn_list_id = sn_list_id
        # 基本单位id
        self.base_unit_id = base_unit_id
        # 基本单位名称
        self.base_unit_name = base_unit_name
        # 基本单位编码
        self.base_unit_number = base_unit_number
        # 单位id
        self.unit_id = unit_id
        # 单位名称
        self.unit_name = unit_name
        # 单位编码
        self.unit_number = unit_number
        # 辅助单位id
        self.aux_unit_id = aux_unit_id
        # 辅助单位名称
        self.aux_unit_name = aux_unit_name
        # 辅助单位编码
        self.aux_unit_number = aux_unit_number
        # 换算公式
        self.conversion_rate = conversion_rate
        # 盘盈数量
        self.qty = qty
        # 库存数量
        self.inv_qty = inv_qty
        # 基本数量
        self.base_qty = base_qty
        # 基本库存数量
        self.inv_base_qty = inv_base_qty
        # 辅助单位数量
        self.aux_qty = aux_qty
        # 辅助基本数量
        self.deffloat_qty = deffloat_qty
        # 辅助换算率
        self.aux_coefficient = aux_coefficient
        # 换算率
        self.coefficient = coefficient
        # 单价
        self.price = price
        # 入库成本
        self.cost = cost
        # 入库单位成本
        self.unit_cost = unit_cost
        # 行备注
        self.comment = comment
        # 源单编号
        self.src_bill_no = src_bill_no
        # 源单类型id
        self.src_bill_type_id = src_bill_type_id
        # 源单类型名称
        self.src_bill_type_name = src_bill_type_name
        # 源单类型编码
        self.src_bill_type_number = src_bill_type_number
        # 源单内码
        self.src_inter_id = src_inter_id
        # 源单日期
        self.src_bill_date = src_bill_date
        # 源单行号
        self.src_seq = src_seq
        # 源单分录内码
        self.src_entry_id = src_entry_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.seq is not None:
            result['seq'] = self.seq
        if self.id is not None:
            result['id'] = self.id
        if self.picture is not None:
            result['picture'] = self.picture
        if self.material_id is not None:
            result['materialid_id'] = self.material_id
        if self.material_name is not None:
            result['materialid_name'] = self.material_name
        if self.material_number is not None:
            result['materialid_number'] = self.material_number
        if self.material_is_multi_unit is not None:
            result['materialid_ismulti_unit'] = self.material_is_multi_unit
        if self.material_is_serial is not None:
            result['materialid_isserial'] = self.material_is_serial
        if self.material_is_asstattr is not None:
            result['materialid_isasstattr'] = self.material_is_asstattr
        if self.material_is_kfperiod is not None:
            result['materialid_iskfperiod'] = self.material_is_kfperiod
        if self.material_is_batch is not None:
            result['materialid_isbatch'] = self.material_is_batch
        if self.material_model is not None:
            result['materialid_model'] = self.material_model
        if self.stock_id is not None:
            result['stockid_id'] = self.stock_id
        if self.stock_name is not None:
            result['stockid_name'] = self.stock_name
        if self.stock_number is not None:
            result['stockid_number'] = self.stock_number
        if self.stock_is_allow_freight is not None:
            result['stockid_isallowfreight'] = self.stock_is_allow_freight
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.sp_name is not None:
            result['spid_name'] = self.sp_name
        if self.sp_number is not None:
            result['spid_number'] = self.sp_number
        if self.auxprop_id is not None:
            result['auxpropid_id'] = self.auxprop_id
        if self.auxprop_name is not None:
            result['auxpropid_name'] = self.auxprop_name
        if self.auxprop_number is not None:
            result['auxpropid_number'] = self.auxprop_number
        if self.aux_id_1 is not None:
            result['auxid1_id'] = self.aux_id_1
        if self.aux_id_1name is not None:
            result['auxid1_name'] = self.aux_id_1name
        if self.aux_id_1number is not None:
            result['auxid1_number'] = self.aux_id_1number
        if self.aux_id_2 is not None:
            result['auxid2_id'] = self.aux_id_2
        if self.aux_id_2name is not None:
            result['auxid2_name'] = self.aux_id_2name
        if self.aux_id_2number is not None:
            result['auxid2_number'] = self.aux_id_2number
        if self.aux_id_3 is not None:
            result['auxid3_id'] = self.aux_id_3
        if self.aux_id_3name is not None:
            result['auxid3_name'] = self.aux_id_3name
        if self.aux_id_3number is not None:
            result['auxid3_number'] = self.aux_id_3number
        if self.aux_id_4 is not None:
            result['auxid4_id'] = self.aux_id_4
        if self.aux_id_4name is not None:
            result['auxid4_name'] = self.aux_id_4name
        if self.aux_id_4number is not None:
            result['auxid4_number'] = self.aux_id_4number
        if self.aux_id_5 is not None:
            result['auxid5_id'] = self.aux_id_5
        if self.aux_id_5name is not None:
            result['auxid5_name'] = self.aux_id_5name
        if self.aux_id_5number is not None:
            result['auxid5_number'] = self.aux_id_5number
        if self.barcode is not None:
            result['barcode'] = self.barcode
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.proplace is not None:
            result['proplace'] = self.proplace
        if self.proreg_no is not None:
            result['proregno'] = self.proreg_no
        if self.prolicense is not None:
            result['prolicense'] = self.prolicense
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.sn is not None:
            result['sn'] = self.sn
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.base_unit_id is not None:
            result['baseunit_id'] = self.base_unit_id
        if self.base_unit_name is not None:
            result['baseunit_name'] = self.base_unit_name
        if self.base_unit_number is not None:
            result['baseunit_number'] = self.base_unit_number
        if self.unit_id is not None:
            result['unit_id'] = self.unit_id
        if self.unit_name is not None:
            result['unit_name'] = self.unit_name
        if self.unit_number is not None:
            result['unit_number'] = self.unit_number
        if self.aux_unit_id is not None:
            result['auxunitid_id'] = self.aux_unit_id
        if self.aux_unit_name is not None:
            result['auxunitid_name'] = self.aux_unit_name
        if self.aux_unit_number is not None:
            result['auxunitid_number'] = self.aux_unit_number
        if self.conversion_rate is not None:
            result['conversionrate'] = self.conversion_rate
        if self.qty is not None:
            result['qty'] = self.qty
        if self.inv_qty is not None:
            result['inv_qty'] = self.inv_qty
        if self.base_qty is not None:
            result['baseqty'] = self.base_qty
        if self.inv_base_qty is not None:
            result['inv_baseqty'] = self.inv_base_qty
        if self.aux_qty is not None:
            result['auxqty'] = self.aux_qty
        if self.deffloat_qty is not None:
            result['deffloatqty'] = self.deffloat_qty
        if self.aux_coefficient is not None:
            result['auxcoefficient'] = self.aux_coefficient
        if self.coefficient is not None:
            result['coefficient'] = self.coefficient
        if self.price is not None:
            result['price'] = self.price
        if self.cost is not None:
            result['cost'] = self.cost
        if self.unit_cost is not None:
            result['unitcost'] = self.unit_cost
        if self.comment is not None:
            result['comment'] = self.comment
        if self.src_bill_no is not None:
            result['srcbillno'] = self.src_bill_no
        if self.src_bill_type_id is not None:
            result['srcbilltypeid_id'] = self.src_bill_type_id
        if self.src_bill_type_name is not None:
            result['srcbilltypeid_name'] = self.src_bill_type_name
        if self.src_bill_type_number is not None:
            result['srcbilltypeid_number'] = self.src_bill_type_number
        if self.src_inter_id is not None:
            result['srcinterid'] = self.src_inter_id
        if self.src_bill_date is not None:
            result['src_billdate'] = self.src_bill_date
        if self.src_seq is not None:
            result['srcseq'] = self.src_seq
        if self.src_entry_id is not None:
            result['srcentryid'] = self.src_entry_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('seq') is not None:
            self.seq = m.get('seq')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('picture') is not None:
            self.picture = m.get('picture')
        if m.get('materialid_id') is not None:
            self.material_id = m.get('materialid_id')
        if m.get('materialid_name') is not None:
            self.material_name = m.get('materialid_name')
        if m.get('materialid_number') is not None:
            self.material_number = m.get('materialid_number')
        if m.get('materialid_ismulti_unit') is not None:
            self.material_is_multi_unit = m.get('materialid_ismulti_unit')
        if m.get('materialid_isserial') is not None:
            self.material_is_serial = m.get('materialid_isserial')
        if m.get('materialid_isasstattr') is not None:
            self.material_is_asstattr = m.get('materialid_isasstattr')
        if m.get('materialid_iskfperiod') is not None:
            self.material_is_kfperiod = m.get('materialid_iskfperiod')
        if m.get('materialid_isbatch') is not None:
            self.material_is_batch = m.get('materialid_isbatch')
        if m.get('materialid_model') is not None:
            self.material_model = m.get('materialid_model')
        if m.get('stockid_id') is not None:
            self.stock_id = m.get('stockid_id')
        if m.get('stockid_name') is not None:
            self.stock_name = m.get('stockid_name')
        if m.get('stockid_number') is not None:
            self.stock_number = m.get('stockid_number')
        if m.get('stockid_isallowfreight') is not None:
            self.stock_is_allow_freight = m.get('stockid_isallowfreight')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('spid_name') is not None:
            self.sp_name = m.get('spid_name')
        if m.get('spid_number') is not None:
            self.sp_number = m.get('spid_number')
        if m.get('auxpropid_id') is not None:
            self.auxprop_id = m.get('auxpropid_id')
        if m.get('auxpropid_name') is not None:
            self.auxprop_name = m.get('auxpropid_name')
        if m.get('auxpropid_number') is not None:
            self.auxprop_number = m.get('auxpropid_number')
        if m.get('auxid1_id') is not None:
            self.aux_id_1 = m.get('auxid1_id')
        if m.get('auxid1_name') is not None:
            self.aux_id_1name = m.get('auxid1_name')
        if m.get('auxid1_number') is not None:
            self.aux_id_1number = m.get('auxid1_number')
        if m.get('auxid2_id') is not None:
            self.aux_id_2 = m.get('auxid2_id')
        if m.get('auxid2_name') is not None:
            self.aux_id_2name = m.get('auxid2_name')
        if m.get('auxid2_number') is not None:
            self.aux_id_2number = m.get('auxid2_number')
        if m.get('auxid3_id') is not None:
            self.aux_id_3 = m.get('auxid3_id')
        if m.get('auxid3_name') is not None:
            self.aux_id_3name = m.get('auxid3_name')
        if m.get('auxid3_number') is not None:
            self.aux_id_3number = m.get('auxid3_number')
        if m.get('auxid4_id') is not None:
            self.aux_id_4 = m.get('auxid4_id')
        if m.get('auxid4_name') is not None:
            self.aux_id_4name = m.get('auxid4_name')
        if m.get('auxid4_number') is not None:
            self.aux_id_4number = m.get('auxid4_number')
        if m.get('auxid5_id') is not None:
            self.aux_id_5 = m.get('auxid5_id')
        if m.get('auxid5_name') is not None:
            self.aux_id_5name = m.get('auxid5_name')
        if m.get('auxid5_number') is not None:
            self.aux_id_5number = m.get('auxid5_number')
        if m.get('barcode') is not None:
            self.barcode = m.get('barcode')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.proplace = m.get('proplace')
        if m.get('proregno') is not None:
            self.proreg_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.prolicense = m.get('prolicense')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('sn') is not None:
            self.sn = m.get('sn')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('baseunit_id') is not None:
            self.base_unit_id = m.get('baseunit_id')
        if m.get('baseunit_name') is not None:
            self.base_unit_name = m.get('baseunit_name')
        if m.get('baseunit_number') is not None:
            self.base_unit_number = m.get('baseunit_number')
        if m.get('unit_id') is not None:
            self.unit_id = m.get('unit_id')
        if m.get('unit_name') is not None:
            self.unit_name = m.get('unit_name')
        if m.get('unit_number') is not None:
            self.unit_number = m.get('unit_number')
        if m.get('auxunitid_id') is not None:
            self.aux_unit_id = m.get('auxunitid_id')
        if m.get('auxunitid_name') is not None:
            self.aux_unit_name = m.get('auxunitid_name')
        if m.get('auxunitid_number') is not None:
            self.aux_unit_number = m.get('auxunitid_number')
        if m.get('conversionrate') is not None:
            self.conversion_rate = m.get('conversionrate')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('inv_qty') is not None:
            self.inv_qty = m.get('inv_qty')
        if m.get('baseqty') is not None:
            self.base_qty = m.get('baseqty')
        if m.get('inv_baseqty') is not None:
            self.inv_base_qty = m.get('inv_baseqty')
        if m.get('auxqty') is not None:
            self.aux_qty = m.get('auxqty')
        if m.get('deffloatqty') is not None:
            self.deffloat_qty = m.get('deffloatqty')
        if m.get('auxcoefficient') is not None:
            self.aux_coefficient = m.get('auxcoefficient')
        if m.get('coefficient') is not None:
            self.coefficient = m.get('coefficient')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('unitcost') is not None:
            self.unit_cost = m.get('unitcost')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('srcbillno') is not None:
            self.src_bill_no = m.get('srcbillno')
        if m.get('srcbilltypeid_id') is not None:
            self.src_bill_type_id = m.get('srcbilltypeid_id')
        if m.get('srcbilltypeid_name') is not None:
            self.src_bill_type_name = m.get('srcbilltypeid_name')
        if m.get('srcbilltypeid_number') is not None:
            self.src_bill_type_number = m.get('srcbilltypeid_number')
        if m.get('srcinterid') is not None:
            self.src_inter_id = m.get('srcinterid')
        if m.get('src_billdate') is not None:
            self.src_bill_date = m.get('src_billdate')
        if m.get('srcseq') is not None:
            self.src_seq = m.get('srcseq')
        if m.get('srcentryid') is not None:
            self.src_entry_id = m.get('srcentryid')
        return self


class InvCheckGainBillDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_no: str = None,
        bill_date: str = None,
        bill_status: str = None,
        create_time: str = None,
        modify_time: str = None,
        audit_time: str = None,
        creator_id: str = None,
        creatorid_name: str = None,
        creatorid_number: str = None,
        modifier_id: str = None,
        modifier_name: str = None,
        modifier_number: str = None,
        auditor_id: str = None,
        auditor_name: str = None,
        auditor_number: str = None,
        voucher_no: str = None,
        voucher_period: str = None,
        voucher_id: str = None,
        material_entity: List[InvCheckGainBillMaterialDetail] = None,
    ):
        # 单据ID
        self.id = id
        # 单据编码
        self.bill_no = bill_no
        # 单据日期
        self.bill_date = bill_date
        # 单据状态，Z：未审核，C：已审核
        self.bill_status = bill_status
        # 创建时间
        self.create_time = create_time
        # 修改时间
        self.modify_time = modify_time
        # 审核时间
        self.audit_time = audit_time
        # 创建人id
        self.creator_id = creator_id
        # 创建人名称
        self.creatorid_name = creatorid_name
        # 创建人编码
        self.creatorid_number = creatorid_number
        # 修改人id
        self.modifier_id = modifier_id
        # 修改人名称
        self.modifier_name = modifier_name
        # 修改人编码
        self.modifier_number = modifier_number
        # 审核人id
        self.auditor_id = auditor_id
        # 审核人名称
        self.auditor_name = auditor_name
        # 审核人编码
        self.auditor_number = auditor_number
        # 凭证字号
        self.voucher_no = voucher_no
        # 期间
        self.voucher_period = voucher_period
        # 凭证内码
        self.voucher_id = voucher_id
        # 商品分录
        self.material_entity = material_entity

    def validate(self):
        if self.material_entity:
            for k in self.material_entity:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_no is not None:
            result['billno'] = self.bill_no
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.create_time is not None:
            result['createtime'] = self.create_time
        if self.modify_time is not None:
            result['modifytime'] = self.modify_time
        if self.audit_time is not None:
            result['audittime'] = self.audit_time
        if self.creator_id is not None:
            result['creatorid_id'] = self.creator_id
        if self.creatorid_name is not None:
            result['creatorid_name'] = self.creatorid_name
        if self.creatorid_number is not None:
            result['creatorid_number'] = self.creatorid_number
        if self.modifier_id is not None:
            result['modifierid_id'] = self.modifier_id
        if self.modifier_name is not None:
            result['modifierid_name'] = self.modifier_name
        if self.modifier_number is not None:
            result['modifierid_number'] = self.modifier_number
        if self.auditor_id is not None:
            result['auditorid_id'] = self.auditor_id
        if self.auditor_name is not None:
            result['auditorid_name'] = self.auditor_name
        if self.auditor_number is not None:
            result['auditorid_number'] = self.auditor_number
        if self.voucher_no is not None:
            result['voucherno'] = self.voucher_no
        if self.voucher_period is not None:
            result['voucher_period'] = self.voucher_period
        if self.voucher_id is not None:
            result['voucherid'] = self.voucher_id
        result['material_entity'] = []
        if self.material_entity is not None:
            for k in self.material_entity:
                result['material_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billno') is not None:
            self.bill_no = m.get('billno')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('createtime') is not None:
            self.create_time = m.get('createtime')
        if m.get('modifytime') is not None:
            self.modify_time = m.get('modifytime')
        if m.get('audittime') is not None:
            self.audit_time = m.get('audittime')
        if m.get('creatorid_id') is not None:
            self.creator_id = m.get('creatorid_id')
        if m.get('creatorid_name') is not None:
            self.creatorid_name = m.get('creatorid_name')
        if m.get('creatorid_number') is not None:
            self.creatorid_number = m.get('creatorid_number')
        if m.get('modifierid_id') is not None:
            self.modifier_id = m.get('modifierid_id')
        if m.get('modifierid_name') is not None:
            self.modifier_name = m.get('modifierid_name')
        if m.get('modifierid_number') is not None:
            self.modifier_number = m.get('modifierid_number')
        if m.get('auditorid_id') is not None:
            self.auditor_id = m.get('auditorid_id')
        if m.get('auditorid_name') is not None:
            self.auditor_name = m.get('auditorid_name')
        if m.get('auditorid_number') is not None:
            self.auditor_number = m.get('auditorid_number')
        if m.get('voucherno') is not None:
            self.voucher_no = m.get('voucherno')
        if m.get('voucher_period') is not None:
            self.voucher_period = m.get('voucher_period')
        if m.get('voucherid') is not None:
            self.voucher_id = m.get('voucherid')
        self.material_entity = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = InvCheckGainBillMaterialDetail()
                self.material_entity.append(temp_model.from_map(k))
        return self


class InvCheckGainBillDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: InvCheckGainBillDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = InvCheckGainBillDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class InvTfMoveMaterialEntity(TeaModel):
    def __init__(
        self,
        id: str = None,
        material_id: str = None,
        in_stock_id: str = None,
        in_sp_id: str = None,
        out_stock_id: str = None,
        out_sp_id: str = None,
        auxprop_id: str = None,
        batch_no: str = None,
        proplace: str = None,
        proreg_no: str = None,
        prolicense: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_period: str = None,
        kf_type: str = None,
        inv_qty: str = None,
        qty: str = None,
        unit_id: str = None,
        discount: str = None,
        comment: str = None,
    ):
        # 分录id，新增不传该字段，修改必传
        self.id = id
        # 商品id
        self.material_id = material_id
        # 调入仓库id
        self.in_stock_id = in_stock_id
        # 调入仓位，启用了仓位管理则必填
        self.in_sp_id = in_sp_id
        # 调出仓库id
        self.out_stock_id = out_stock_id
        # 调出仓位id，启用了仓位管理则必填
        self.out_sp_id = out_sp_id
        # 辅助属性；辅助属性商品必填
        self.auxprop_id = auxprop_id
        # 批次号，批次商品必填
        self.batch_no = batch_no
        # 产地
        self.proplace = proplace
        # 生产许可证号
        self.proreg_no = proreg_no
        # 注册许可证号
        self.prolicense = prolicense
        # 生产日期
        self.kf_date = kf_date
        # 有效日期
        self.valid_date = valid_date
        # 保质期
        self.kf_period = kf_period
        # 保质期单位
        self.kf_type = kf_type
        # 可用库存
        self.inv_qty = inv_qty
        # 数量
        self.qty = qty
        # 单位id
        self.unit_id = unit_id
        # 折扣（折），异价调拨必填
        self.discount = discount
        # 商品行备注
        self.comment = comment

    def validate(self):
        self.validate_required(self.material_id, 'material_id')
        self.validate_required(self.in_stock_id, 'in_stock_id')
        self.validate_required(self.out_stock_id, 'out_stock_id')
        self.validate_required(self.qty, 'qty')
        self.validate_required(self.unit_id, 'unit_id')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.material_id is not None:
            result['materialid_id'] = self.material_id
        if self.in_stock_id is not None:
            result['instockid_id'] = self.in_stock_id
        if self.in_sp_id is not None:
            result['inspid_id'] = self.in_sp_id
        if self.out_stock_id is not None:
            result['outstockid_id'] = self.out_stock_id
        if self.out_sp_id is not None:
            result['outspid_id'] = self.out_sp_id
        if self.auxprop_id is not None:
            result['auxpropid_id'] = self.auxprop_id
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.proplace is not None:
            result['proplace'] = self.proplace
        if self.proreg_no is not None:
            result['proregno'] = self.proreg_no
        if self.prolicense is not None:
            result['prolicense'] = self.prolicense
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.inv_qty is not None:
            result['inv_qty'] = self.inv_qty
        if self.qty is not None:
            result['qty'] = self.qty
        if self.unit_id is not None:
            result['unit_id'] = self.unit_id
        if self.discount is not None:
            result['unit_id'] = self.discount
        if self.comment is not None:
            result['comment'] = self.comment
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('materialid_id') is not None:
            self.material_id = m.get('materialid_id')
        if m.get('instockid_id') is not None:
            self.in_stock_id = m.get('instockid_id')
        if m.get('inspid_id') is not None:
            self.in_sp_id = m.get('inspid_id')
        if m.get('outstockid_id') is not None:
            self.out_stock_id = m.get('outstockid_id')
        if m.get('outspid_id') is not None:
            self.out_sp_id = m.get('outspid_id')
        if m.get('auxpropid_id') is not None:
            self.auxprop_id = m.get('auxpropid_id')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.proplace = m.get('proplace')
        if m.get('proregno') is not None:
            self.proreg_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.prolicense = m.get('prolicense')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('inv_qty') is not None:
            self.inv_qty = m.get('inv_qty')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('unit_id') is not None:
            self.unit_id = m.get('unit_id')
        if m.get('unit_id') is not None:
            self.discount = m.get('unit_id')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        return self


class InvTfMoveSaveRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_date: str = None,
        dept_id: str = None,
        out_dept_id: str = None,
        bill_out_stock_id: str = None,
        bill_out_sp_id: str = None,
        bill_in_stock_id: str = None,
        bill_in_sp_id: str = None,
        remark: str = None,
        transfer_status: str = None,
        trans_type: str = None,
        carsale_type: str = None,
        auto_move: bool = None,
        material_entity: List[InvTfMoveMaterialEntity] = None,
    ):
        # 单据ID，修改单据时必填，新增不传该字段
        self.id = id
        # 单据日期
        self.bill_date = bill_date
        # 调入部门id
        self.dept_id = dept_id
        # 调出部门id
        self.out_dept_id = out_dept_id
        # 单据头调出仓库id
        self.bill_out_stock_id = bill_out_stock_id
        # 单据头调出仓位id
        self.bill_out_sp_id = bill_out_sp_id
        # 单据头调入仓库id
        self.bill_in_stock_id = bill_in_stock_id
        # 单据头调入仓位id
        self.bill_in_sp_id = bill_in_sp_id
        # 单据备注
        self.remark = remark
        # 调拨状态，0：未出库（默认），1：未入库，2：部分入库，3：全部入库
        self.transfer_status = transfer_status
        # 业务类型，1：同价调拨（默认），2：异价调拨
        self.trans_type = trans_type
        # 车销类型，1：通用，2：提货，3：退货
        self.carsale_type = carsale_type
        # 是否一键移仓，true：是
        self.auto_move = auto_move
        # 商品分录，一键移仓时不需要改参数
        self.material_entity = material_entity

    def validate(self):
        if self.material_entity:
            for k in self.material_entity:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.dept_id is not None:
            result['deptid_id'] = self.dept_id
        if self.out_dept_id is not None:
            result['outdeptid_id'] = self.out_dept_id
        if self.bill_out_stock_id is not None:
            result['billoutstockid_id'] = self.bill_out_stock_id
        if self.bill_out_sp_id is not None:
            result['billoutspid_id'] = self.bill_out_sp_id
        if self.bill_in_stock_id is not None:
            result['billinstockid_id'] = self.bill_in_stock_id
        if self.bill_in_sp_id is not None:
            result['billinspid_id'] = self.bill_in_sp_id
        if self.remark is not None:
            result['remark'] = self.remark
        if self.transfer_status is not None:
            result['transferstatus'] = self.transfer_status
        if self.trans_type is not None:
            result['transtype'] = self.trans_type
        if self.carsale_type is not None:
            result['carsaletype'] = self.carsale_type
        if self.auto_move is not None:
            result['automove'] = self.auto_move
        result['material_entity'] = []
        if self.material_entity is not None:
            for k in self.material_entity:
                result['material_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('deptid_id') is not None:
            self.dept_id = m.get('deptid_id')
        if m.get('outdeptid_id') is not None:
            self.out_dept_id = m.get('outdeptid_id')
        if m.get('billoutstockid_id') is not None:
            self.bill_out_stock_id = m.get('billoutstockid_id')
        if m.get('billoutspid_id') is not None:
            self.bill_out_sp_id = m.get('billoutspid_id')
        if m.get('billinstockid_id') is not None:
            self.bill_in_stock_id = m.get('billinstockid_id')
        if m.get('billinspid_id') is not None:
            self.bill_in_sp_id = m.get('billinspid_id')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('transferstatus') is not None:
            self.transfer_status = m.get('transferstatus')
        if m.get('transtype') is not None:
            self.trans_type = m.get('transtype')
        if m.get('carsaletype') is not None:
            self.carsale_type = m.get('carsaletype')
        if m.get('automove') is not None:
            self.auto_move = m.get('automove')
        self.material_entity = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = InvTfMoveMaterialEntity()
                self.material_entity.append(temp_model.from_map(k))
        return self


class InvTfMoveSaveRequest(TeaModel):
    def __init__(
        self,
        body: InvTfMoveSaveRequestBody = None,
    ):
        self.body = body
        # 移仓单商品分录

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvTfMoveSaveRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvTfMoveListRequestBody(TeaModel):
    def __init__(
        self,
        out_dept_id: List[str] = None,
        dept_id: List[str] = None,
        out_stock_id: List[str] = None,
        in_stock_id: List[str] = None,
        creator_id: str = None,
        bill_status: str = None,
        start_date: str = None,
        end_date: str = None,
        search: str = None,
        carsale_type: str = None,
        show_entry_total: bool = None,
        page: int = None,
        page_size: int = None,
    ):
        # 调出部门id
        self.out_dept_id = out_dept_id
        # 调入部门
        self.dept_id = dept_id
        # 调出仓库id
        self.out_stock_id = out_stock_id
        # 调入仓库id
        self.in_stock_id = in_stock_id
        # 制单人id
        self.creator_id = creator_id
        # 单据状态（所有：“”，已审核：“C”，未审核：“Z”）
        self.bill_status = bill_status
        # 开始日期（“yyyy-MM-dd”）
        self.start_date = start_date
        # 结束日期（“yyyy-MM-dd”）
        self.end_date = end_date
        # 模糊搜索
        self.search = search
        # 车销类型，1：通用，2：提货，3：退货
        self.carsale_type = carsale_type
        # 是否返回分录数据合计到单据，true:返回，目前支持数量
        self.show_entry_total = show_entry_total
        # 当前页（默认1）
        self.page = page
        # 每页显示条数，（默认10，最大值100）
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.out_dept_id is not None:
            result['outdeptid'] = self.out_dept_id
        if self.dept_id is not None:
            result['deptid'] = self.dept_id
        if self.out_stock_id is not None:
            result['outstockid'] = self.out_stock_id
        if self.in_stock_id is not None:
            result['instockid'] = self.in_stock_id
        if self.creator_id is not None:
            result['creatorid'] = self.creator_id
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.search is not None:
            result['search'] = self.search
        if self.carsale_type is not None:
            result['carsaletype'] = self.carsale_type
        if self.show_entry_total is not None:
            result['showentrytotal'] = self.show_entry_total
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('outdeptid') is not None:
            self.out_dept_id = m.get('outdeptid')
        if m.get('deptid') is not None:
            self.dept_id = m.get('deptid')
        if m.get('outstockid') is not None:
            self.out_stock_id = m.get('outstockid')
        if m.get('instockid') is not None:
            self.in_stock_id = m.get('instockid')
        if m.get('creatorid') is not None:
            self.creator_id = m.get('creatorid')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('carsaletype') is not None:
            self.carsale_type = m.get('carsaletype')
        if m.get('showentrytotal') is not None:
            self.show_entry_total = m.get('showentrytotal')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        return self


class InvTfMoveListRequest(TeaModel):
    def __init__(
        self,
        body: InvTfMoveListRequestBody = None,
    ):
        self.body = body
        # 移仓单列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvTfMoveListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvTfMoveMaterialDetail(TeaModel):
    def __init__(
        self,
        seq: str = None,
        id: str = None,
        picture: str = None,
        material_id: str = None,
        material_name: str = None,
        material_number: str = None,
        material_is_multi_unit: bool = None,
        material_is_serial: bool = None,
        material_is_asstattr: bool = None,
        material_is_kfperiod: bool = None,
        material_is_batch: bool = None,
        material_model: str = None,
        in_stock_id: str = None,
        in_stock_name: str = None,
        in_stock_number: str = None,
        in_sp_id: str = None,
        in_sp_name: str = None,
        in_sp_number: str = None,
        out_stock_id: str = None,
        out_stock_name: str = None,
        out_stock_number: str = None,
        out_sp_id: str = None,
        out_sp_name: str = None,
        out_sp_number: str = None,
        auxprop_id: str = None,
        auxprop_name: str = None,
        auxprop_number: str = None,
        aux_id_1: str = None,
        aux_id_1name: str = None,
        aux_id_1number: str = None,
        aux_id_2: str = None,
        aux_id_2name: str = None,
        aux_id_2number: str = None,
        aux_id_3: str = None,
        aux_id_3name: str = None,
        aux_id_3number: str = None,
        aux_id_4: str = None,
        aux_id_4name: str = None,
        aux_id_4number: str = None,
        aux_id_5: str = None,
        aux_id_5name: str = None,
        aux_id_5number: str = None,
        barcode: str = None,
        batch_no: str = None,
        proplace: str = None,
        proreg_no: str = None,
        prolicense: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_type: str = None,
        kf_period: str = None,
        sn: str = None,
        sn_list_id: str = None,
        base_unit_id: str = None,
        base_unit_name: str = None,
        base_unit_number: str = None,
        unit_id: str = None,
        unit_name: str = None,
        unit_number: str = None,
        aux_unit_id: str = None,
        aux_unit_name: str = None,
        aux_unit_number: str = None,
        retail_price: str = None,
        conversion_rate: str = None,
        qty: str = None,
        inv_qty: str = None,
        base_qty: str = None,
        inv_base_qty: str = None,
        aux_qty: str = None,
        deffloat_qty: str = None,
        aux_coefficient: str = None,
        coefficient: str = None,
        discount: str = None,
        cost: str = None,
        comment: str = None,
        src_bill_no: str = None,
        src_bill_type_id: str = None,
        src_bill_type_name: str = None,
        src_bill_type_number: str = None,
        src_inter_id: str = None,
        src_bill_date: str = None,
        src_seq: str = None,
        src_entry_id: str = None,
    ):
        # 分录序号
        self.seq = seq
        # 分录ID
        self.id = id
        # 图片url
        self.picture = picture
        # 商品id
        self.material_id = material_id
        # 商品名称
        self.material_name = material_name
        # 商品编码
        self.material_number = material_number
        # 商品是否多单位
        self.material_is_multi_unit = material_is_multi_unit
        # 商品是否序列号
        self.material_is_serial = material_is_serial
        # 商品是否启用辅助属性
        self.material_is_asstattr = material_is_asstattr
        # 商品是否开启保质期
        self.material_is_kfperiod = material_is_kfperiod
        # 商品是否开启批次
        self.material_is_batch = material_is_batch
        # 商品规格
        self.material_model = material_model
        # 调入仓库id
        self.in_stock_id = in_stock_id
        # 调入仓库名称
        self.in_stock_name = in_stock_name
        # 调入仓库编码
        self.in_stock_number = in_stock_number
        # 调入仓位id
        self.in_sp_id = in_sp_id
        # 调入仓位名称
        self.in_sp_name = in_sp_name
        # 调入仓位编码
        self.in_sp_number = in_sp_number
        # 调出仓库id
        self.out_stock_id = out_stock_id
        # 调出仓库名称
        self.out_stock_name = out_stock_name
        # 调出仓库编码
        self.out_stock_number = out_stock_number
        # 调出仓位id
        self.out_sp_id = out_sp_id
        # 调出仓位名称
        self.out_sp_name = out_sp_name
        # 调出仓位编码
        self.out_sp_number = out_sp_number
        # 辅助属性id
        self.auxprop_id = auxprop_id
        # 辅助属性名称
        self.auxprop_name = auxprop_name
        # 辅助属性编码
        self.auxprop_number = auxprop_number
        # 辅助属性1id
        self.aux_id_1 = aux_id_1
        # 辅助属性1名称
        self.aux_id_1name = aux_id_1name
        # 辅助属性1编码
        self.aux_id_1number = aux_id_1number
        # 辅助属性2id
        self.aux_id_2 = aux_id_2
        # 辅助属性2名称
        self.aux_id_2name = aux_id_2name
        # 辅助属性2编码
        self.aux_id_2number = aux_id_2number
        # 辅助属性3id
        self.aux_id_3 = aux_id_3
        # 辅助属性3名称
        self.aux_id_3name = aux_id_3name
        # 辅助属性3编码
        self.aux_id_3number = aux_id_3number
        # 辅助属性4id
        self.aux_id_4 = aux_id_4
        # 辅助属性4名称
        self.aux_id_4name = aux_id_4name
        # 辅助属性4编码
        self.aux_id_4number = aux_id_4number
        # 辅助属性5id
        self.aux_id_5 = aux_id_5
        # 辅助属性5名称
        self.aux_id_5name = aux_id_5name
        # 辅助属性5编码
        self.aux_id_5number = aux_id_5number
        # 条形码
        self.barcode = barcode
        # 批次号
        self.batch_no = batch_no
        # 产地
        self.proplace = proplace
        # 注册证号
        self.proreg_no = proreg_no
        # 生产许可证号
        self.prolicense = prolicense
        # 生产日期
        self.kf_date = kf_date
        # 有效日期
        self.valid_date = valid_date
        # 保质期类型，1：天，2：月，3：年
        self.kf_type = kf_type
        # 保质期天数
        self.kf_period = kf_period
        # 序列号
        self.sn = sn
        # 序列号流转ID
        self.sn_list_id = sn_list_id
        # 基本单位id
        self.base_unit_id = base_unit_id
        # 基本单位名称
        self.base_unit_name = base_unit_name
        # 基本单位编码
        self.base_unit_number = base_unit_number
        # 单位id
        self.unit_id = unit_id
        # 单位名称
        self.unit_name = unit_name
        # 单位编码
        self.unit_number = unit_number
        # 辅助单位id
        self.aux_unit_id = aux_unit_id
        # 辅助单位名称
        self.aux_unit_name = aux_unit_name
        # 辅助单位编码
        self.aux_unit_number = aux_unit_number
        # 零售价
        self.retail_price = retail_price
        # 换算公式
        self.conversion_rate = conversion_rate
        # 数量
        self.qty = qty
        # 库存数量
        self.inv_qty = inv_qty
        # 基本数量
        self.base_qty = base_qty
        # 基本库存数量
        self.inv_base_qty = inv_base_qty
        # 辅助单位数量
        self.aux_qty = aux_qty
        # 辅助基本数量
        self.deffloat_qty = deffloat_qty
        # 辅助换算率
        self.aux_coefficient = aux_coefficient
        # 换算率
        self.coefficient = coefficient
        # 折扣
        self.discount = discount
        # 入库成本
        self.cost = cost
        # 行备注
        self.comment = comment
        # 源单编号
        self.src_bill_no = src_bill_no
        # 源单类型id
        self.src_bill_type_id = src_bill_type_id
        # 源单类型名称
        self.src_bill_type_name = src_bill_type_name
        # 源单类型编码
        self.src_bill_type_number = src_bill_type_number
        # 源单内码
        self.src_inter_id = src_inter_id
        # 源单日期
        self.src_bill_date = src_bill_date
        # 源单行号
        self.src_seq = src_seq
        # 源单分录内码
        self.src_entry_id = src_entry_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.seq is not None:
            result['seq'] = self.seq
        if self.id is not None:
            result['id'] = self.id
        if self.picture is not None:
            result['picture'] = self.picture
        if self.material_id is not None:
            result['materialid_id'] = self.material_id
        if self.material_name is not None:
            result['materialid_name'] = self.material_name
        if self.material_number is not None:
            result['materialid_number'] = self.material_number
        if self.material_is_multi_unit is not None:
            result['materialid_ismulti_unit'] = self.material_is_multi_unit
        if self.material_is_serial is not None:
            result['materialid_isserial'] = self.material_is_serial
        if self.material_is_asstattr is not None:
            result['materialid_isasstattr'] = self.material_is_asstattr
        if self.material_is_kfperiod is not None:
            result['materialid_iskfperiod'] = self.material_is_kfperiod
        if self.material_is_batch is not None:
            result['materialid_isbatch'] = self.material_is_batch
        if self.material_model is not None:
            result['materialid_model'] = self.material_model
        if self.in_stock_id is not None:
            result['instockid_id'] = self.in_stock_id
        if self.in_stock_name is not None:
            result['instockid_name'] = self.in_stock_name
        if self.in_stock_number is not None:
            result['instockid_number'] = self.in_stock_number
        if self.in_sp_id is not None:
            result['inspid_id'] = self.in_sp_id
        if self.in_sp_name is not None:
            result['inspid_name'] = self.in_sp_name
        if self.in_sp_number is not None:
            result['inspid_number'] = self.in_sp_number
        if self.out_stock_id is not None:
            result['outstockid_id'] = self.out_stock_id
        if self.out_stock_name is not None:
            result['outstockid_name'] = self.out_stock_name
        if self.out_stock_number is not None:
            result['outstockid_number'] = self.out_stock_number
        if self.out_sp_id is not None:
            result['outspid_id'] = self.out_sp_id
        if self.out_sp_name is not None:
            result['outspid_name'] = self.out_sp_name
        if self.out_sp_number is not None:
            result['outspid_number'] = self.out_sp_number
        if self.auxprop_id is not None:
            result['auxpropid_id'] = self.auxprop_id
        if self.auxprop_name is not None:
            result['auxpropid_name'] = self.auxprop_name
        if self.auxprop_number is not None:
            result['auxpropid_number'] = self.auxprop_number
        if self.aux_id_1 is not None:
            result['auxid1_id'] = self.aux_id_1
        if self.aux_id_1name is not None:
            result['auxid1_name'] = self.aux_id_1name
        if self.aux_id_1number is not None:
            result['auxid1_number'] = self.aux_id_1number
        if self.aux_id_2 is not None:
            result['auxid2_id'] = self.aux_id_2
        if self.aux_id_2name is not None:
            result['auxid2_name'] = self.aux_id_2name
        if self.aux_id_2number is not None:
            result['auxid2_number'] = self.aux_id_2number
        if self.aux_id_3 is not None:
            result['auxid3_id'] = self.aux_id_3
        if self.aux_id_3name is not None:
            result['auxid3_name'] = self.aux_id_3name
        if self.aux_id_3number is not None:
            result['auxid3_number'] = self.aux_id_3number
        if self.aux_id_4 is not None:
            result['auxid4_id'] = self.aux_id_4
        if self.aux_id_4name is not None:
            result['auxid4_name'] = self.aux_id_4name
        if self.aux_id_4number is not None:
            result['auxid4_number'] = self.aux_id_4number
        if self.aux_id_5 is not None:
            result['auxid5_id'] = self.aux_id_5
        if self.aux_id_5name is not None:
            result['auxid5_name'] = self.aux_id_5name
        if self.aux_id_5number is not None:
            result['auxid5_number'] = self.aux_id_5number
        if self.barcode is not None:
            result['barcode'] = self.barcode
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.proplace is not None:
            result['proplace'] = self.proplace
        if self.proreg_no is not None:
            result['proregno'] = self.proreg_no
        if self.prolicense is not None:
            result['prolicense'] = self.prolicense
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.sn is not None:
            result['sn'] = self.sn
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.base_unit_id is not None:
            result['baseunit_id'] = self.base_unit_id
        if self.base_unit_name is not None:
            result['baseunit_name'] = self.base_unit_name
        if self.base_unit_number is not None:
            result['baseunit_number'] = self.base_unit_number
        if self.unit_id is not None:
            result['unit_id'] = self.unit_id
        if self.unit_name is not None:
            result['unit_name'] = self.unit_name
        if self.unit_number is not None:
            result['unit_number'] = self.unit_number
        if self.aux_unit_id is not None:
            result['auxunitid_id'] = self.aux_unit_id
        if self.aux_unit_name is not None:
            result['auxunitid_name'] = self.aux_unit_name
        if self.aux_unit_number is not None:
            result['auxunitid_number'] = self.aux_unit_number
        if self.retail_price is not None:
            result['retailprice'] = self.retail_price
        if self.conversion_rate is not None:
            result['conversionrate'] = self.conversion_rate
        if self.qty is not None:
            result['qty'] = self.qty
        if self.inv_qty is not None:
            result['inv_qty'] = self.inv_qty
        if self.base_qty is not None:
            result['baseqty'] = self.base_qty
        if self.inv_base_qty is not None:
            result['inv_baseqty'] = self.inv_base_qty
        if self.aux_qty is not None:
            result['auxqty'] = self.aux_qty
        if self.deffloat_qty is not None:
            result['deffloatqty'] = self.deffloat_qty
        if self.aux_coefficient is not None:
            result['auxcoefficient'] = self.aux_coefficient
        if self.coefficient is not None:
            result['coefficient'] = self.coefficient
        if self.discount is not None:
            result['discount'] = self.discount
        if self.cost is not None:
            result['cost'] = self.cost
        if self.comment is not None:
            result['comment'] = self.comment
        if self.src_bill_no is not None:
            result['srcbillno'] = self.src_bill_no
        if self.src_bill_type_id is not None:
            result['srcbilltypeid_id'] = self.src_bill_type_id
        if self.src_bill_type_name is not None:
            result['srcbilltypeid_name'] = self.src_bill_type_name
        if self.src_bill_type_number is not None:
            result['srcbilltypeid_number'] = self.src_bill_type_number
        if self.src_inter_id is not None:
            result['srcinterid'] = self.src_inter_id
        if self.src_bill_date is not None:
            result['src_billdate'] = self.src_bill_date
        if self.src_seq is not None:
            result['srcseq'] = self.src_seq
        if self.src_entry_id is not None:
            result['srcentryid'] = self.src_entry_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('seq') is not None:
            self.seq = m.get('seq')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('picture') is not None:
            self.picture = m.get('picture')
        if m.get('materialid_id') is not None:
            self.material_id = m.get('materialid_id')
        if m.get('materialid_name') is not None:
            self.material_name = m.get('materialid_name')
        if m.get('materialid_number') is not None:
            self.material_number = m.get('materialid_number')
        if m.get('materialid_ismulti_unit') is not None:
            self.material_is_multi_unit = m.get('materialid_ismulti_unit')
        if m.get('materialid_isserial') is not None:
            self.material_is_serial = m.get('materialid_isserial')
        if m.get('materialid_isasstattr') is not None:
            self.material_is_asstattr = m.get('materialid_isasstattr')
        if m.get('materialid_iskfperiod') is not None:
            self.material_is_kfperiod = m.get('materialid_iskfperiod')
        if m.get('materialid_isbatch') is not None:
            self.material_is_batch = m.get('materialid_isbatch')
        if m.get('materialid_model') is not None:
            self.material_model = m.get('materialid_model')
        if m.get('instockid_id') is not None:
            self.in_stock_id = m.get('instockid_id')
        if m.get('instockid_name') is not None:
            self.in_stock_name = m.get('instockid_name')
        if m.get('instockid_number') is not None:
            self.in_stock_number = m.get('instockid_number')
        if m.get('inspid_id') is not None:
            self.in_sp_id = m.get('inspid_id')
        if m.get('inspid_name') is not None:
            self.in_sp_name = m.get('inspid_name')
        if m.get('inspid_number') is not None:
            self.in_sp_number = m.get('inspid_number')
        if m.get('outstockid_id') is not None:
            self.out_stock_id = m.get('outstockid_id')
        if m.get('outstockid_name') is not None:
            self.out_stock_name = m.get('outstockid_name')
        if m.get('outstockid_number') is not None:
            self.out_stock_number = m.get('outstockid_number')
        if m.get('outspid_id') is not None:
            self.out_sp_id = m.get('outspid_id')
        if m.get('outspid_name') is not None:
            self.out_sp_name = m.get('outspid_name')
        if m.get('outspid_number') is not None:
            self.out_sp_number = m.get('outspid_number')
        if m.get('auxpropid_id') is not None:
            self.auxprop_id = m.get('auxpropid_id')
        if m.get('auxpropid_name') is not None:
            self.auxprop_name = m.get('auxpropid_name')
        if m.get('auxpropid_number') is not None:
            self.auxprop_number = m.get('auxpropid_number')
        if m.get('auxid1_id') is not None:
            self.aux_id_1 = m.get('auxid1_id')
        if m.get('auxid1_name') is not None:
            self.aux_id_1name = m.get('auxid1_name')
        if m.get('auxid1_number') is not None:
            self.aux_id_1number = m.get('auxid1_number')
        if m.get('auxid2_id') is not None:
            self.aux_id_2 = m.get('auxid2_id')
        if m.get('auxid2_name') is not None:
            self.aux_id_2name = m.get('auxid2_name')
        if m.get('auxid2_number') is not None:
            self.aux_id_2number = m.get('auxid2_number')
        if m.get('auxid3_id') is not None:
            self.aux_id_3 = m.get('auxid3_id')
        if m.get('auxid3_name') is not None:
            self.aux_id_3name = m.get('auxid3_name')
        if m.get('auxid3_number') is not None:
            self.aux_id_3number = m.get('auxid3_number')
        if m.get('auxid4_id') is not None:
            self.aux_id_4 = m.get('auxid4_id')
        if m.get('auxid4_name') is not None:
            self.aux_id_4name = m.get('auxid4_name')
        if m.get('auxid4_number') is not None:
            self.aux_id_4number = m.get('auxid4_number')
        if m.get('auxid5_id') is not None:
            self.aux_id_5 = m.get('auxid5_id')
        if m.get('auxid5_name') is not None:
            self.aux_id_5name = m.get('auxid5_name')
        if m.get('auxid5_number') is not None:
            self.aux_id_5number = m.get('auxid5_number')
        if m.get('barcode') is not None:
            self.barcode = m.get('barcode')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.proplace = m.get('proplace')
        if m.get('proregno') is not None:
            self.proreg_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.prolicense = m.get('prolicense')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('sn') is not None:
            self.sn = m.get('sn')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('baseunit_id') is not None:
            self.base_unit_id = m.get('baseunit_id')
        if m.get('baseunit_name') is not None:
            self.base_unit_name = m.get('baseunit_name')
        if m.get('baseunit_number') is not None:
            self.base_unit_number = m.get('baseunit_number')
        if m.get('unit_id') is not None:
            self.unit_id = m.get('unit_id')
        if m.get('unit_name') is not None:
            self.unit_name = m.get('unit_name')
        if m.get('unit_number') is not None:
            self.unit_number = m.get('unit_number')
        if m.get('auxunitid_id') is not None:
            self.aux_unit_id = m.get('auxunitid_id')
        if m.get('auxunitid_name') is not None:
            self.aux_unit_name = m.get('auxunitid_name')
        if m.get('auxunitid_number') is not None:
            self.aux_unit_number = m.get('auxunitid_number')
        if m.get('retailprice') is not None:
            self.retail_price = m.get('retailprice')
        if m.get('conversionrate') is not None:
            self.conversion_rate = m.get('conversionrate')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('inv_qty') is not None:
            self.inv_qty = m.get('inv_qty')
        if m.get('baseqty') is not None:
            self.base_qty = m.get('baseqty')
        if m.get('inv_baseqty') is not None:
            self.inv_base_qty = m.get('inv_baseqty')
        if m.get('auxqty') is not None:
            self.aux_qty = m.get('auxqty')
        if m.get('deffloatqty') is not None:
            self.deffloat_qty = m.get('deffloatqty')
        if m.get('auxcoefficient') is not None:
            self.aux_coefficient = m.get('auxcoefficient')
        if m.get('coefficient') is not None:
            self.coefficient = m.get('coefficient')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('srcbillno') is not None:
            self.src_bill_no = m.get('srcbillno')
        if m.get('srcbilltypeid_id') is not None:
            self.src_bill_type_id = m.get('srcbilltypeid_id')
        if m.get('srcbilltypeid_name') is not None:
            self.src_bill_type_name = m.get('srcbilltypeid_name')
        if m.get('srcbilltypeid_number') is not None:
            self.src_bill_type_number = m.get('srcbilltypeid_number')
        if m.get('srcinterid') is not None:
            self.src_inter_id = m.get('srcinterid')
        if m.get('src_billdate') is not None:
            self.src_bill_date = m.get('src_billdate')
        if m.get('srcseq') is not None:
            self.src_seq = m.get('srcseq')
        if m.get('srcentryid') is not None:
            self.src_entry_id = m.get('srcentryid')
        return self


class InvTfMoveDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_no: str = None,
        bill_date: str = None,
        bill_status: str = None,
        create_time: str = None,
        modify_time: str = None,
        audit_time: str = None,
        creator_id: str = None,
        creatorid_name: str = None,
        creatorid_number: str = None,
        modifier_id: str = None,
        modifier_name: str = None,
        modifier_number: str = None,
        auditor_id: str = None,
        auditor_name: str = None,
        auditor_number: str = None,
        trans_type: str = None,
        transfer_status: str = None,
        carsale_type: str = None,
        remark: str = None,
        dept_id: str = None,
        dept_name: str = None,
        dept_number: str = None,
        out_dept_id: str = None,
        out_dept_name: str = None,
        out_dept_number: str = None,
        bill_out_stock_id: str = None,
        bill_out_stock_name: str = None,
        bill_outstock_number: str = None,
        bill_out_sp_id: str = None,
        bill_out_sp_name: str = None,
        bill_out_sp_number: str = None,
        bill_in_stock_id: str = None,
        bill_in_stock_name: str = None,
        bill_in_stock_number: str = None,
        bill_in_sp_id: str = None,
        bill_in_sp_name: str = None,
        bill_in_sp_number: str = None,
        material_entity: List[InvTfMoveMaterialDetail] = None,
    ):
        # 单据ID
        self.id = id
        # 单据编码
        self.bill_no = bill_no
        # 单据日期
        self.bill_date = bill_date
        # 单据状态，Z：未审核，C：已审核
        self.bill_status = bill_status
        # 创建时间
        self.create_time = create_time
        # 修改时间
        self.modify_time = modify_time
        # 审核时间
        self.audit_time = audit_time
        # 创建人id
        self.creator_id = creator_id
        # 创建人名称
        self.creatorid_name = creatorid_name
        # 创建人编码
        self.creatorid_number = creatorid_number
        # 修改人id
        self.modifier_id = modifier_id
        # 修改人名称
        self.modifier_name = modifier_name
        # 修改人编码
        self.modifier_number = modifier_number
        # 审核人id
        self.auditor_id = auditor_id
        # 审核人名称
        self.auditor_name = auditor_name
        # 审核人编码
        self.auditor_number = auditor_number
        # 业务类型，1：同价调拨，2：异价调拨
        self.trans_type = trans_type
        # 调拨状态，0：未出库，1：未入库，2：部分入库，3：全部入库
        self.transfer_status = transfer_status
        # 车销类型，1：通用，2：提货，3：退货
        self.carsale_type = carsale_type
        # 备注
        self.remark = remark
        # 调入部门id
        self.dept_id = dept_id
        # 调入部门名称
        self.dept_name = dept_name
        # 调入部门编码
        self.dept_number = dept_number
        # 调出部门id
        self.out_dept_id = out_dept_id
        # 调出部门名称
        self.out_dept_name = out_dept_name
        # 调出部门编码
        self.out_dept_number = out_dept_number
        # 单据头调出仓库id
        self.bill_out_stock_id = bill_out_stock_id
        # 单据头调出仓库名称
        self.bill_out_stock_name = bill_out_stock_name
        # 单据头调出仓库编码
        self.bill_outstock_number = bill_outstock_number
        # 单据头调出仓位id
        self.bill_out_sp_id = bill_out_sp_id
        # 单据头调出仓位名称
        self.bill_out_sp_name = bill_out_sp_name
        # 单据头调出仓位编码
        self.bill_out_sp_number = bill_out_sp_number
        # 单据头调入仓库id
        self.bill_in_stock_id = bill_in_stock_id
        # 单据头调入仓库名称
        self.bill_in_stock_name = bill_in_stock_name
        # 单据头调入仓库编码
        self.bill_in_stock_number = bill_in_stock_number
        # 单据头调入仓位id
        self.bill_in_sp_id = bill_in_sp_id
        # 单据头调入仓位名称
        self.bill_in_sp_name = bill_in_sp_name
        # 单据头调入仓位编码
        self.bill_in_sp_number = bill_in_sp_number
        # 商品分录
        self.material_entity = material_entity

    def validate(self):
        if self.material_entity:
            for k in self.material_entity:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_no is not None:
            result['billno'] = self.bill_no
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.create_time is not None:
            result['createtime'] = self.create_time
        if self.modify_time is not None:
            result['modifytime'] = self.modify_time
        if self.audit_time is not None:
            result['audittime'] = self.audit_time
        if self.creator_id is not None:
            result['creatorid_id'] = self.creator_id
        if self.creatorid_name is not None:
            result['creatorid_name'] = self.creatorid_name
        if self.creatorid_number is not None:
            result['creatorid_number'] = self.creatorid_number
        if self.modifier_id is not None:
            result['modifierid_id'] = self.modifier_id
        if self.modifier_name is not None:
            result['modifierid_name'] = self.modifier_name
        if self.modifier_number is not None:
            result['modifierid_number'] = self.modifier_number
        if self.auditor_id is not None:
            result['auditorid_id'] = self.auditor_id
        if self.auditor_name is not None:
            result['auditorid_name'] = self.auditor_name
        if self.auditor_number is not None:
            result['auditorid_number'] = self.auditor_number
        if self.trans_type is not None:
            result['transtype'] = self.trans_type
        if self.transfer_status is not None:
            result['transferstatus'] = self.transfer_status
        if self.carsale_type is not None:
            result['carsaletype'] = self.carsale_type
        if self.remark is not None:
            result['remark'] = self.remark
        if self.dept_id is not None:
            result['deptid_id'] = self.dept_id
        if self.dept_name is not None:
            result['deptid_name'] = self.dept_name
        if self.dept_number is not None:
            result['deptid_number'] = self.dept_number
        if self.out_dept_id is not None:
            result['outdeptid_id'] = self.out_dept_id
        if self.out_dept_name is not None:
            result['outdeptid_name'] = self.out_dept_name
        if self.out_dept_number is not None:
            result['outdeptid_number'] = self.out_dept_number
        if self.bill_out_stock_id is not None:
            result['billoutstockid_id'] = self.bill_out_stock_id
        if self.bill_out_stock_name is not None:
            result['billoutstockid_name'] = self.bill_out_stock_name
        if self.bill_outstock_number is not None:
            result['billoutstockid_number'] = self.bill_outstock_number
        if self.bill_out_sp_id is not None:
            result['billoutspid_id'] = self.bill_out_sp_id
        if self.bill_out_sp_name is not None:
            result['billoutspid_name'] = self.bill_out_sp_name
        if self.bill_out_sp_number is not None:
            result['billoutspid_number'] = self.bill_out_sp_number
        if self.bill_in_stock_id is not None:
            result['billinstockid_id'] = self.bill_in_stock_id
        if self.bill_in_stock_name is not None:
            result['billinstockid_name'] = self.bill_in_stock_name
        if self.bill_in_stock_number is not None:
            result['billinstockid_number'] = self.bill_in_stock_number
        if self.bill_in_sp_id is not None:
            result['billinspid_id'] = self.bill_in_sp_id
        if self.bill_in_sp_name is not None:
            result['billinspid_name'] = self.bill_in_sp_name
        if self.bill_in_sp_number is not None:
            result['billinspid_number'] = self.bill_in_sp_number
        result['material_entity'] = []
        if self.material_entity is not None:
            for k in self.material_entity:
                result['material_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billno') is not None:
            self.bill_no = m.get('billno')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('createtime') is not None:
            self.create_time = m.get('createtime')
        if m.get('modifytime') is not None:
            self.modify_time = m.get('modifytime')
        if m.get('audittime') is not None:
            self.audit_time = m.get('audittime')
        if m.get('creatorid_id') is not None:
            self.creator_id = m.get('creatorid_id')
        if m.get('creatorid_name') is not None:
            self.creatorid_name = m.get('creatorid_name')
        if m.get('creatorid_number') is not None:
            self.creatorid_number = m.get('creatorid_number')
        if m.get('modifierid_id') is not None:
            self.modifier_id = m.get('modifierid_id')
        if m.get('modifierid_name') is not None:
            self.modifier_name = m.get('modifierid_name')
        if m.get('modifierid_number') is not None:
            self.modifier_number = m.get('modifierid_number')
        if m.get('auditorid_id') is not None:
            self.auditor_id = m.get('auditorid_id')
        if m.get('auditorid_name') is not None:
            self.auditor_name = m.get('auditorid_name')
        if m.get('auditorid_number') is not None:
            self.auditor_number = m.get('auditorid_number')
        if m.get('transtype') is not None:
            self.trans_type = m.get('transtype')
        if m.get('transferstatus') is not None:
            self.transfer_status = m.get('transferstatus')
        if m.get('carsaletype') is not None:
            self.carsale_type = m.get('carsaletype')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('deptid_id') is not None:
            self.dept_id = m.get('deptid_id')
        if m.get('deptid_name') is not None:
            self.dept_name = m.get('deptid_name')
        if m.get('deptid_number') is not None:
            self.dept_number = m.get('deptid_number')
        if m.get('outdeptid_id') is not None:
            self.out_dept_id = m.get('outdeptid_id')
        if m.get('outdeptid_name') is not None:
            self.out_dept_name = m.get('outdeptid_name')
        if m.get('outdeptid_number') is not None:
            self.out_dept_number = m.get('outdeptid_number')
        if m.get('billoutstockid_id') is not None:
            self.bill_out_stock_id = m.get('billoutstockid_id')
        if m.get('billoutstockid_name') is not None:
            self.bill_out_stock_name = m.get('billoutstockid_name')
        if m.get('billoutstockid_number') is not None:
            self.bill_outstock_number = m.get('billoutstockid_number')
        if m.get('billoutspid_id') is not None:
            self.bill_out_sp_id = m.get('billoutspid_id')
        if m.get('billoutspid_name') is not None:
            self.bill_out_sp_name = m.get('billoutspid_name')
        if m.get('billoutspid_number') is not None:
            self.bill_out_sp_number = m.get('billoutspid_number')
        if m.get('billinstockid_id') is not None:
            self.bill_in_stock_id = m.get('billinstockid_id')
        if m.get('billinstockid_name') is not None:
            self.bill_in_stock_name = m.get('billinstockid_name')
        if m.get('billinstockid_number') is not None:
            self.bill_in_stock_number = m.get('billinstockid_number')
        if m.get('billinspid_id') is not None:
            self.bill_in_sp_id = m.get('billinspid_id')
        if m.get('billinspid_name') is not None:
            self.bill_in_sp_name = m.get('billinspid_name')
        if m.get('billinspid_number') is not None:
            self.bill_in_sp_number = m.get('billinspid_number')
        self.material_entity = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = InvTfMoveMaterialDetail()
                self.material_entity.append(temp_model.from_map(k))
        return self


class InvTfMoveDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: InvTfMoveDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = InvTfMoveDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class InvTfInMaterialEntity(TeaModel):
    def __init__(
        self,
        id: str = None,
        material_id: str = None,
        in_stock_id: str = None,
        in_sp_id: str = None,
        out_stock_id: str = None,
        out_sp_id: str = None,
        auxprop_id: str = None,
        batch_no: str = None,
        proplace: str = None,
        proreg_no: str = None,
        prolicense: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_period: str = None,
        kf_type: str = None,
        inv_qty: str = None,
        qty: str = None,
        unit_id: str = None,
        sn_list_id: str = None,
        sn_list: str = None,
        in_price: str = None,
        comment: str = None,
    ):
        # 分录id，新增不传该字段，修改必传
        self.id = id
        # 商品id
        self.material_id = material_id
        # 调入仓库id
        self.in_stock_id = in_stock_id
        # 调入仓位，启用了仓位管理则必填
        self.in_sp_id = in_sp_id
        # 调出仓库id
        self.out_stock_id = out_stock_id
        # 调出仓位id，启用了仓位管理则必填
        self.out_sp_id = out_sp_id
        # 辅助属性；辅助属性商品必填
        self.auxprop_id = auxprop_id
        # 批次号，批次商品必填
        self.batch_no = batch_no
        # 产地
        self.proplace = proplace
        # 生产许可证号
        self.proreg_no = proreg_no
        # 注册许可证号
        self.prolicense = prolicense
        # 生产日期
        self.kf_date = kf_date
        # 有效日期
        self.valid_date = valid_date
        # 保质期
        self.kf_period = kf_period
        # 保质期单位
        self.kf_type = kf_type
        # 可用库存
        self.inv_qty = inv_qty
        # 数量
        self.qty = qty
        # 单位id
        self.unit_id = unit_id
        # 序列号流转id；单据新增后会在单据详情中带回这个字段信息，序列号商品修改时必填
        self.sn_list_id = sn_list_id
        # 序列号 格式：001:备注1;002:备注2 （序列号:序列号备注 多个序列号以英文分号字符;分隔）,序列号商品必填
        self.sn_list = sn_list
        # 出库单价，异价调拨必填
        self.in_price = in_price
        # 商品行备注
        self.comment = comment

    def validate(self):
        self.validate_required(self.material_id, 'material_id')
        self.validate_required(self.in_stock_id, 'in_stock_id')
        self.validate_required(self.out_stock_id, 'out_stock_id')
        self.validate_required(self.qty, 'qty')
        self.validate_required(self.unit_id, 'unit_id')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.material_id is not None:
            result['materialid_id'] = self.material_id
        if self.in_stock_id is not None:
            result['instockid_id'] = self.in_stock_id
        if self.in_sp_id is not None:
            result['inspid_id'] = self.in_sp_id
        if self.out_stock_id is not None:
            result['outstockid_id'] = self.out_stock_id
        if self.out_sp_id is not None:
            result['outspid_id'] = self.out_sp_id
        if self.auxprop_id is not None:
            result['auxpropid_id'] = self.auxprop_id
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.proplace is not None:
            result['proplace'] = self.proplace
        if self.proreg_no is not None:
            result['proregno'] = self.proreg_no
        if self.prolicense is not None:
            result['prolicense'] = self.prolicense
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.inv_qty is not None:
            result['inv_qty'] = self.inv_qty
        if self.qty is not None:
            result['qty'] = self.qty
        if self.unit_id is not None:
            result['unit_id'] = self.unit_id
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.sn_list is not None:
            result['sn_list'] = self.sn_list
        if self.in_price is not None:
            result['in_price'] = self.in_price
        if self.comment is not None:
            result['comment'] = self.comment
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('materialid_id') is not None:
            self.material_id = m.get('materialid_id')
        if m.get('instockid_id') is not None:
            self.in_stock_id = m.get('instockid_id')
        if m.get('inspid_id') is not None:
            self.in_sp_id = m.get('inspid_id')
        if m.get('outstockid_id') is not None:
            self.out_stock_id = m.get('outstockid_id')
        if m.get('outspid_id') is not None:
            self.out_sp_id = m.get('outspid_id')
        if m.get('auxpropid_id') is not None:
            self.auxprop_id = m.get('auxpropid_id')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.proplace = m.get('proplace')
        if m.get('proregno') is not None:
            self.proreg_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.prolicense = m.get('prolicense')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('inv_qty') is not None:
            self.inv_qty = m.get('inv_qty')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('unit_id') is not None:
            self.unit_id = m.get('unit_id')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('sn_list') is not None:
            self.sn_list = m.get('sn_list')
        if m.get('in_price') is not None:
            self.in_price = m.get('in_price')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        return self


class InvTfInSaveRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_date: str = None,
        dept_id: str = None,
        out_dept_id: str = None,
        remark: str = None,
        transfer_status: str = None,
        trans_type: str = None,
        material_entity: List[InvTfInMaterialEntity] = None,
    ):
        # 单据ID，修改单据时必填，新增不传该字段
        self.id = id
        # 单据日期
        self.bill_date = bill_date
        # 调入部门id
        self.dept_id = dept_id
        # 调出部门id
        self.out_dept_id = out_dept_id
        # 单据备注
        self.remark = remark
        # 调拨状态，0：未出库（默认），1：未入库，2：部分入库，3：全部入库
        self.transfer_status = transfer_status
        # 业务类型，1：同价调拨（默认），2：异价调拨
        self.trans_type = trans_type
        # 商品分录
        self.material_entity = material_entity

    def validate(self):
        if self.material_entity:
            for k in self.material_entity:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.dept_id is not None:
            result['deptid_id'] = self.dept_id
        if self.out_dept_id is not None:
            result['outdeptid_id'] = self.out_dept_id
        if self.remark is not None:
            result['remark'] = self.remark
        if self.transfer_status is not None:
            result['transferstatus'] = self.transfer_status
        if self.trans_type is not None:
            result['transtype'] = self.trans_type
        result['material_entity'] = []
        if self.material_entity is not None:
            for k in self.material_entity:
                result['material_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('deptid_id') is not None:
            self.dept_id = m.get('deptid_id')
        if m.get('outdeptid_id') is not None:
            self.out_dept_id = m.get('outdeptid_id')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('transferstatus') is not None:
            self.transfer_status = m.get('transferstatus')
        if m.get('transtype') is not None:
            self.trans_type = m.get('transtype')
        self.material_entity = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = InvTfInMaterialEntity()
                self.material_entity.append(temp_model.from_map(k))
        return self


class InvTfInSaveRequest(TeaModel):
    def __init__(
        self,
        body: InvTfInSaveRequestBody = None,
    ):
        self.body = body
        # 调拨入库单商品分录

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvTfInSaveRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvTfInListRequestBody(TeaModel):
    def __init__(
        self,
        out_dept_id: List[str] = None,
        dept_id: List[str] = None,
        bill_status: str = None,
        trans_type: str = None,
        start_date: str = None,
        end_date: str = None,
        begin_date: str = None,
        expire_date: str = None,
        start_time: int = None,
        end_time: int = None,
        begin_time: int = None,
        expire_time: int = None,
        start_bill_date: str = None,
        end_bill_date: str = None,
        search: str = None,
        show_material_total: bool = None,
        entry_total_fields: str = None,
        page: int = None,
        page_size: int = None,
    ):
        # 调出部门id
        self.out_dept_id = out_dept_id
        # 调入部门id
        self.dept_id = dept_id
        # 单据状态（所有：“”，已审核：“C”，未审核：“Z”
        self.bill_status = bill_status
        # 业务类型（所有：“”，同价调拨：“1”，异价调拨：“2”）
        self.trans_type = trans_type
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.start_date = start_date
        # 结束日期（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.end_date = end_date
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），修改日期
        self.begin_date = begin_date
        # 结束日期（格式：“yyyy-MM-dd”，为空表示不过滤），修改日期
        self.expire_date = expire_date
        # 开始时间（格式：“时间戳”，-1表示不过滤），创建时间
        self.start_time = start_time
        # 结束时间（格式：“时间戳”，-1表示不过滤），创建时间
        self.end_time = end_time
        # 开始时间（格式：“时间戳”，-1表示不过滤），修改时间
        self.begin_time = begin_time
        # 结束时间（格式：“时间戳”，-1表示不过滤），修改时间
        self.expire_time = expire_time
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），单据日期
        self.start_bill_date = start_bill_date
        # 结束日期（格式：“yyyy-MM-dd”，为空表示不过滤），单据日期
        self.end_bill_date = end_bill_date
        # 模糊搜索，单据编码、商品名称、任务名称、仓库名称
        self.search = search
        # 是否统计商品种类和数量到单据，默认false
        self.show_material_total = show_material_total
        # 自定义合计字段(分录合并到单据，返回的合计值在单据头，key和传递的一致)，多个字段用英文逗号隔开,使用该参数时，top参数必传且不能为0
        self.entry_total_fields = entry_total_fields
        # 当前页（默认1）
        self.page = page
        # 每页显示条数，（默认10，最大值100）
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.out_dept_id is not None:
            result['outdeptid'] = self.out_dept_id
        if self.dept_id is not None:
            result['deptid'] = self.dept_id
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.trans_type is not None:
            result['transtype'] = self.trans_type
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.begin_date is not None:
            result['begindate'] = self.begin_date
        if self.expire_date is not None:
            result['expiredate'] = self.expire_date
        if self.start_time is not None:
            result['starttime'] = self.start_time
        if self.end_time is not None:
            result['endtime'] = self.end_time
        if self.begin_time is not None:
            result['begintime'] = self.begin_time
        if self.expire_time is not None:
            result['expiretime'] = self.expire_time
        if self.start_bill_date is not None:
            result['startbilldate'] = self.start_bill_date
        if self.end_bill_date is not None:
            result['endbilldate'] = self.end_bill_date
        if self.search is not None:
            result['search'] = self.search
        if self.show_material_total is not None:
            result['showmaterialtotal'] = self.show_material_total
        if self.entry_total_fields is not None:
            result['entrytotalfields'] = self.entry_total_fields
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('outdeptid') is not None:
            self.out_dept_id = m.get('outdeptid')
        if m.get('deptid') is not None:
            self.dept_id = m.get('deptid')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('transtype') is not None:
            self.trans_type = m.get('transtype')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('begindate') is not None:
            self.begin_date = m.get('begindate')
        if m.get('expiredate') is not None:
            self.expire_date = m.get('expiredate')
        if m.get('starttime') is not None:
            self.start_time = m.get('starttime')
        if m.get('endtime') is not None:
            self.end_time = m.get('endtime')
        if m.get('begintime') is not None:
            self.begin_time = m.get('begintime')
        if m.get('expiretime') is not None:
            self.expire_time = m.get('expiretime')
        if m.get('startbilldate') is not None:
            self.start_bill_date = m.get('startbilldate')
        if m.get('endbilldate') is not None:
            self.end_bill_date = m.get('endbilldate')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('showmaterialtotal') is not None:
            self.show_material_total = m.get('showmaterialtotal')
        if m.get('entrytotalfields') is not None:
            self.entry_total_fields = m.get('entrytotalfields')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        return self


class InvTfInListRequest(TeaModel):
    def __init__(
        self,
        body: InvTfInListRequestBody = None,
    ):
        self.body = body
        # 调拨入库单列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvTfInListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvTfInMaterialDetail(TeaModel):
    def __init__(
        self,
        seq: str = None,
        id: str = None,
        picture: str = None,
        material_id: str = None,
        material_name: str = None,
        material_number: str = None,
        material_is_multi_unit: bool = None,
        material_is_serial: bool = None,
        material_is_asstattr: bool = None,
        material_is_kfperiod: bool = None,
        material_is_batch: bool = None,
        material_model: str = None,
        in_stock_id: str = None,
        in_stock_name: str = None,
        in_stock_number: str = None,
        in_sp_id: str = None,
        in_sp_name: str = None,
        in_sp_number: str = None,
        out_stock_id: str = None,
        out_stock_name: str = None,
        out_stock_number: str = None,
        out_sp_id: str = None,
        out_sp_name: str = None,
        out_sp_number: str = None,
        auxprop_id: str = None,
        auxprop_name: str = None,
        auxprop_number: str = None,
        aux_id_1: str = None,
        aux_id_1name: str = None,
        aux_id_1number: str = None,
        aux_id_2: str = None,
        aux_id_2name: str = None,
        aux_id_2number: str = None,
        aux_id_3: str = None,
        aux_id_3name: str = None,
        aux_id_3number: str = None,
        aux_id_4: str = None,
        aux_id_4name: str = None,
        aux_id_4number: str = None,
        aux_id_5: str = None,
        aux_id_5name: str = None,
        aux_id_5number: str = None,
        barcode: str = None,
        batch_no: str = None,
        proplace: str = None,
        proreg_no: str = None,
        prolicense: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_type: str = None,
        kf_period: str = None,
        sn: str = None,
        sn_list_id: str = None,
        base_unit_id: str = None,
        base_unit_name: str = None,
        base_unit_number: str = None,
        unit_id: str = None,
        unit_name: str = None,
        unit_number: str = None,
        aux_unit_id: str = None,
        aux_unit_name: str = None,
        aux_unit_number: str = None,
        retail_price: str = None,
        conversion_rate: str = None,
        qty: str = None,
        inv_qty: str = None,
        base_qty: str = None,
        inv_base_qty: str = None,
        aux_qty: str = None,
        deffloat_qty: str = None,
        aux_coefficient: str = None,
        coefficient: str = None,
        discount: str = None,
        cost: str = None,
        comment: str = None,
        src_bill_no: str = None,
        src_bill_type_id: str = None,
        src_bill_type_name: str = None,
        src_bill_type_number: str = None,
        src_inter_id: str = None,
        src_bill_date: str = None,
        src_seq: str = None,
        src_entry_id: str = None,
    ):
        # 分录序号
        self.seq = seq
        # 分录ID
        self.id = id
        # 图片url
        self.picture = picture
        # 商品id
        self.material_id = material_id
        # 商品名称
        self.material_name = material_name
        # 商品编码
        self.material_number = material_number
        # 商品是否多单位
        self.material_is_multi_unit = material_is_multi_unit
        # 商品是否序列号
        self.material_is_serial = material_is_serial
        # 商品是否启用辅助属性
        self.material_is_asstattr = material_is_asstattr
        # 商品是否开启保质期
        self.material_is_kfperiod = material_is_kfperiod
        # 商品是否开启批次
        self.material_is_batch = material_is_batch
        # 商品规格
        self.material_model = material_model
        # 调入仓库id
        self.in_stock_id = in_stock_id
        # 调入仓库名称
        self.in_stock_name = in_stock_name
        # 调入仓库编码
        self.in_stock_number = in_stock_number
        # 调入仓位id
        self.in_sp_id = in_sp_id
        # 调入仓位名称
        self.in_sp_name = in_sp_name
        # 调入仓位编码
        self.in_sp_number = in_sp_number
        # 调出仓库id
        self.out_stock_id = out_stock_id
        # 调出仓库名称
        self.out_stock_name = out_stock_name
        # 调出仓库编码
        self.out_stock_number = out_stock_number
        # 调出仓位id
        self.out_sp_id = out_sp_id
        # 调出仓位名称
        self.out_sp_name = out_sp_name
        # 调出仓位编码
        self.out_sp_number = out_sp_number
        # 辅助属性id
        self.auxprop_id = auxprop_id
        # 辅助属性名称
        self.auxprop_name = auxprop_name
        # 辅助属性编码
        self.auxprop_number = auxprop_number
        # 辅助属性1id
        self.aux_id_1 = aux_id_1
        # 辅助属性1名称
        self.aux_id_1name = aux_id_1name
        # 辅助属性1编码
        self.aux_id_1number = aux_id_1number
        # 辅助属性2id
        self.aux_id_2 = aux_id_2
        # 辅助属性2名称
        self.aux_id_2name = aux_id_2name
        # 辅助属性2编码
        self.aux_id_2number = aux_id_2number
        # 辅助属性3id
        self.aux_id_3 = aux_id_3
        # 辅助属性3名称
        self.aux_id_3name = aux_id_3name
        # 辅助属性3编码
        self.aux_id_3number = aux_id_3number
        # 辅助属性4id
        self.aux_id_4 = aux_id_4
        # 辅助属性4名称
        self.aux_id_4name = aux_id_4name
        # 辅助属性4编码
        self.aux_id_4number = aux_id_4number
        # 辅助属性5id
        self.aux_id_5 = aux_id_5
        # 辅助属性5名称
        self.aux_id_5name = aux_id_5name
        # 辅助属性5编码
        self.aux_id_5number = aux_id_5number
        # 条形码
        self.barcode = barcode
        # 批次号
        self.batch_no = batch_no
        # 产地
        self.proplace = proplace
        # 注册证号
        self.proreg_no = proreg_no
        # 生产许可证号
        self.prolicense = prolicense
        # 生产日期
        self.kf_date = kf_date
        # 有效日期
        self.valid_date = valid_date
        # 保质期类型，1：天，2：月，3：年
        self.kf_type = kf_type
        # 保质期天数
        self.kf_period = kf_period
        # 序列号
        self.sn = sn
        # 序列号流转ID
        self.sn_list_id = sn_list_id
        # 基本单位id
        self.base_unit_id = base_unit_id
        # 基本单位名称
        self.base_unit_name = base_unit_name
        # 基本单位编码
        self.base_unit_number = base_unit_number
        # 单位id
        self.unit_id = unit_id
        # 单位名称
        self.unit_name = unit_name
        # 单位编码
        self.unit_number = unit_number
        # 辅助单位id
        self.aux_unit_id = aux_unit_id
        # 辅助单位名称
        self.aux_unit_name = aux_unit_name
        # 辅助单位编码
        self.aux_unit_number = aux_unit_number
        # 零售价
        self.retail_price = retail_price
        # 换算公式
        self.conversion_rate = conversion_rate
        # 数量
        self.qty = qty
        # 库存数量
        self.inv_qty = inv_qty
        # 基本数量
        self.base_qty = base_qty
        # 基本库存数量
        self.inv_base_qty = inv_base_qty
        # 辅助单位数量
        self.aux_qty = aux_qty
        # 辅助基本数量
        self.deffloat_qty = deffloat_qty
        # 辅助换算率
        self.aux_coefficient = aux_coefficient
        # 换算率
        self.coefficient = coefficient
        # 折扣
        self.discount = discount
        # 入库成本
        self.cost = cost
        # 行备注
        self.comment = comment
        # 源单编号
        self.src_bill_no = src_bill_no
        # 源单类型id
        self.src_bill_type_id = src_bill_type_id
        # 源单类型名称
        self.src_bill_type_name = src_bill_type_name
        # 源单类型编码
        self.src_bill_type_number = src_bill_type_number
        # 源单内码
        self.src_inter_id = src_inter_id
        # 源单日期
        self.src_bill_date = src_bill_date
        # 源单行号
        self.src_seq = src_seq
        # 源单分录内码
        self.src_entry_id = src_entry_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.seq is not None:
            result['seq'] = self.seq
        if self.id is not None:
            result['id'] = self.id
        if self.picture is not None:
            result['picture'] = self.picture
        if self.material_id is not None:
            result['materialid_id'] = self.material_id
        if self.material_name is not None:
            result['materialid_name'] = self.material_name
        if self.material_number is not None:
            result['materialid_number'] = self.material_number
        if self.material_is_multi_unit is not None:
            result['materialid_ismulti_unit'] = self.material_is_multi_unit
        if self.material_is_serial is not None:
            result['materialid_isserial'] = self.material_is_serial
        if self.material_is_asstattr is not None:
            result['materialid_isasstattr'] = self.material_is_asstattr
        if self.material_is_kfperiod is not None:
            result['materialid_iskfperiod'] = self.material_is_kfperiod
        if self.material_is_batch is not None:
            result['materialid_isbatch'] = self.material_is_batch
        if self.material_model is not None:
            result['materialid_model'] = self.material_model
        if self.in_stock_id is not None:
            result['instockid_id'] = self.in_stock_id
        if self.in_stock_name is not None:
            result['instockid_name'] = self.in_stock_name
        if self.in_stock_number is not None:
            result['instockid_number'] = self.in_stock_number
        if self.in_sp_id is not None:
            result['inspid_id'] = self.in_sp_id
        if self.in_sp_name is not None:
            result['inspid_name'] = self.in_sp_name
        if self.in_sp_number is not None:
            result['inspid_number'] = self.in_sp_number
        if self.out_stock_id is not None:
            result['outstockid_id'] = self.out_stock_id
        if self.out_stock_name is not None:
            result['outstockid_name'] = self.out_stock_name
        if self.out_stock_number is not None:
            result['outstockid_number'] = self.out_stock_number
        if self.out_sp_id is not None:
            result['outspid_id'] = self.out_sp_id
        if self.out_sp_name is not None:
            result['outspid_name'] = self.out_sp_name
        if self.out_sp_number is not None:
            result['outspid_number'] = self.out_sp_number
        if self.auxprop_id is not None:
            result['auxpropid_id'] = self.auxprop_id
        if self.auxprop_name is not None:
            result['auxpropid_name'] = self.auxprop_name
        if self.auxprop_number is not None:
            result['auxpropid_number'] = self.auxprop_number
        if self.aux_id_1 is not None:
            result['auxid1_id'] = self.aux_id_1
        if self.aux_id_1name is not None:
            result['auxid1_name'] = self.aux_id_1name
        if self.aux_id_1number is not None:
            result['auxid1_number'] = self.aux_id_1number
        if self.aux_id_2 is not None:
            result['auxid2_id'] = self.aux_id_2
        if self.aux_id_2name is not None:
            result['auxid2_name'] = self.aux_id_2name
        if self.aux_id_2number is not None:
            result['auxid2_number'] = self.aux_id_2number
        if self.aux_id_3 is not None:
            result['auxid3_id'] = self.aux_id_3
        if self.aux_id_3name is not None:
            result['auxid3_name'] = self.aux_id_3name
        if self.aux_id_3number is not None:
            result['auxid3_number'] = self.aux_id_3number
        if self.aux_id_4 is not None:
            result['auxid4_id'] = self.aux_id_4
        if self.aux_id_4name is not None:
            result['auxid4_name'] = self.aux_id_4name
        if self.aux_id_4number is not None:
            result['auxid4_number'] = self.aux_id_4number
        if self.aux_id_5 is not None:
            result['auxid5_id'] = self.aux_id_5
        if self.aux_id_5name is not None:
            result['auxid5_name'] = self.aux_id_5name
        if self.aux_id_5number is not None:
            result['auxid5_number'] = self.aux_id_5number
        if self.barcode is not None:
            result['barcode'] = self.barcode
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.proplace is not None:
            result['proplace'] = self.proplace
        if self.proreg_no is not None:
            result['proregno'] = self.proreg_no
        if self.prolicense is not None:
            result['prolicense'] = self.prolicense
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.sn is not None:
            result['sn'] = self.sn
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.base_unit_id is not None:
            result['baseunit_id'] = self.base_unit_id
        if self.base_unit_name is not None:
            result['baseunit_name'] = self.base_unit_name
        if self.base_unit_number is not None:
            result['baseunit_number'] = self.base_unit_number
        if self.unit_id is not None:
            result['unit_id'] = self.unit_id
        if self.unit_name is not None:
            result['unit_name'] = self.unit_name
        if self.unit_number is not None:
            result['unit_number'] = self.unit_number
        if self.aux_unit_id is not None:
            result['auxunitid_id'] = self.aux_unit_id
        if self.aux_unit_name is not None:
            result['auxunitid_name'] = self.aux_unit_name
        if self.aux_unit_number is not None:
            result['auxunitid_number'] = self.aux_unit_number
        if self.retail_price is not None:
            result['retailprice'] = self.retail_price
        if self.conversion_rate is not None:
            result['conversionrate'] = self.conversion_rate
        if self.qty is not None:
            result['qty'] = self.qty
        if self.inv_qty is not None:
            result['inv_qty'] = self.inv_qty
        if self.base_qty is not None:
            result['baseqty'] = self.base_qty
        if self.inv_base_qty is not None:
            result['inv_baseqty'] = self.inv_base_qty
        if self.aux_qty is not None:
            result['auxqty'] = self.aux_qty
        if self.deffloat_qty is not None:
            result['deffloatqty'] = self.deffloat_qty
        if self.aux_coefficient is not None:
            result['auxcoefficient'] = self.aux_coefficient
        if self.coefficient is not None:
            result['coefficient'] = self.coefficient
        if self.discount is not None:
            result['discount'] = self.discount
        if self.cost is not None:
            result['cost'] = self.cost
        if self.comment is not None:
            result['comment'] = self.comment
        if self.src_bill_no is not None:
            result['srcbillno'] = self.src_bill_no
        if self.src_bill_type_id is not None:
            result['srcbilltypeid_id'] = self.src_bill_type_id
        if self.src_bill_type_name is not None:
            result['srcbilltypeid_name'] = self.src_bill_type_name
        if self.src_bill_type_number is not None:
            result['srcbilltypeid_number'] = self.src_bill_type_number
        if self.src_inter_id is not None:
            result['srcinterid'] = self.src_inter_id
        if self.src_bill_date is not None:
            result['src_billdate'] = self.src_bill_date
        if self.src_seq is not None:
            result['srcseq'] = self.src_seq
        if self.src_entry_id is not None:
            result['srcentryid'] = self.src_entry_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('seq') is not None:
            self.seq = m.get('seq')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('picture') is not None:
            self.picture = m.get('picture')
        if m.get('materialid_id') is not None:
            self.material_id = m.get('materialid_id')
        if m.get('materialid_name') is not None:
            self.material_name = m.get('materialid_name')
        if m.get('materialid_number') is not None:
            self.material_number = m.get('materialid_number')
        if m.get('materialid_ismulti_unit') is not None:
            self.material_is_multi_unit = m.get('materialid_ismulti_unit')
        if m.get('materialid_isserial') is not None:
            self.material_is_serial = m.get('materialid_isserial')
        if m.get('materialid_isasstattr') is not None:
            self.material_is_asstattr = m.get('materialid_isasstattr')
        if m.get('materialid_iskfperiod') is not None:
            self.material_is_kfperiod = m.get('materialid_iskfperiod')
        if m.get('materialid_isbatch') is not None:
            self.material_is_batch = m.get('materialid_isbatch')
        if m.get('materialid_model') is not None:
            self.material_model = m.get('materialid_model')
        if m.get('instockid_id') is not None:
            self.in_stock_id = m.get('instockid_id')
        if m.get('instockid_name') is not None:
            self.in_stock_name = m.get('instockid_name')
        if m.get('instockid_number') is not None:
            self.in_stock_number = m.get('instockid_number')
        if m.get('inspid_id') is not None:
            self.in_sp_id = m.get('inspid_id')
        if m.get('inspid_name') is not None:
            self.in_sp_name = m.get('inspid_name')
        if m.get('inspid_number') is not None:
            self.in_sp_number = m.get('inspid_number')
        if m.get('outstockid_id') is not None:
            self.out_stock_id = m.get('outstockid_id')
        if m.get('outstockid_name') is not None:
            self.out_stock_name = m.get('outstockid_name')
        if m.get('outstockid_number') is not None:
            self.out_stock_number = m.get('outstockid_number')
        if m.get('outspid_id') is not None:
            self.out_sp_id = m.get('outspid_id')
        if m.get('outspid_name') is not None:
            self.out_sp_name = m.get('outspid_name')
        if m.get('outspid_number') is not None:
            self.out_sp_number = m.get('outspid_number')
        if m.get('auxpropid_id') is not None:
            self.auxprop_id = m.get('auxpropid_id')
        if m.get('auxpropid_name') is not None:
            self.auxprop_name = m.get('auxpropid_name')
        if m.get('auxpropid_number') is not None:
            self.auxprop_number = m.get('auxpropid_number')
        if m.get('auxid1_id') is not None:
            self.aux_id_1 = m.get('auxid1_id')
        if m.get('auxid1_name') is not None:
            self.aux_id_1name = m.get('auxid1_name')
        if m.get('auxid1_number') is not None:
            self.aux_id_1number = m.get('auxid1_number')
        if m.get('auxid2_id') is not None:
            self.aux_id_2 = m.get('auxid2_id')
        if m.get('auxid2_name') is not None:
            self.aux_id_2name = m.get('auxid2_name')
        if m.get('auxid2_number') is not None:
            self.aux_id_2number = m.get('auxid2_number')
        if m.get('auxid3_id') is not None:
            self.aux_id_3 = m.get('auxid3_id')
        if m.get('auxid3_name') is not None:
            self.aux_id_3name = m.get('auxid3_name')
        if m.get('auxid3_number') is not None:
            self.aux_id_3number = m.get('auxid3_number')
        if m.get('auxid4_id') is not None:
            self.aux_id_4 = m.get('auxid4_id')
        if m.get('auxid4_name') is not None:
            self.aux_id_4name = m.get('auxid4_name')
        if m.get('auxid4_number') is not None:
            self.aux_id_4number = m.get('auxid4_number')
        if m.get('auxid5_id') is not None:
            self.aux_id_5 = m.get('auxid5_id')
        if m.get('auxid5_name') is not None:
            self.aux_id_5name = m.get('auxid5_name')
        if m.get('auxid5_number') is not None:
            self.aux_id_5number = m.get('auxid5_number')
        if m.get('barcode') is not None:
            self.barcode = m.get('barcode')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.proplace = m.get('proplace')
        if m.get('proregno') is not None:
            self.proreg_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.prolicense = m.get('prolicense')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('sn') is not None:
            self.sn = m.get('sn')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('baseunit_id') is not None:
            self.base_unit_id = m.get('baseunit_id')
        if m.get('baseunit_name') is not None:
            self.base_unit_name = m.get('baseunit_name')
        if m.get('baseunit_number') is not None:
            self.base_unit_number = m.get('baseunit_number')
        if m.get('unit_id') is not None:
            self.unit_id = m.get('unit_id')
        if m.get('unit_name') is not None:
            self.unit_name = m.get('unit_name')
        if m.get('unit_number') is not None:
            self.unit_number = m.get('unit_number')
        if m.get('auxunitid_id') is not None:
            self.aux_unit_id = m.get('auxunitid_id')
        if m.get('auxunitid_name') is not None:
            self.aux_unit_name = m.get('auxunitid_name')
        if m.get('auxunitid_number') is not None:
            self.aux_unit_number = m.get('auxunitid_number')
        if m.get('retailprice') is not None:
            self.retail_price = m.get('retailprice')
        if m.get('conversionrate') is not None:
            self.conversion_rate = m.get('conversionrate')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('inv_qty') is not None:
            self.inv_qty = m.get('inv_qty')
        if m.get('baseqty') is not None:
            self.base_qty = m.get('baseqty')
        if m.get('inv_baseqty') is not None:
            self.inv_base_qty = m.get('inv_baseqty')
        if m.get('auxqty') is not None:
            self.aux_qty = m.get('auxqty')
        if m.get('deffloatqty') is not None:
            self.deffloat_qty = m.get('deffloatqty')
        if m.get('auxcoefficient') is not None:
            self.aux_coefficient = m.get('auxcoefficient')
        if m.get('coefficient') is not None:
            self.coefficient = m.get('coefficient')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('srcbillno') is not None:
            self.src_bill_no = m.get('srcbillno')
        if m.get('srcbilltypeid_id') is not None:
            self.src_bill_type_id = m.get('srcbilltypeid_id')
        if m.get('srcbilltypeid_name') is not None:
            self.src_bill_type_name = m.get('srcbilltypeid_name')
        if m.get('srcbilltypeid_number') is not None:
            self.src_bill_type_number = m.get('srcbilltypeid_number')
        if m.get('srcinterid') is not None:
            self.src_inter_id = m.get('srcinterid')
        if m.get('src_billdate') is not None:
            self.src_bill_date = m.get('src_billdate')
        if m.get('srcseq') is not None:
            self.src_seq = m.get('srcseq')
        if m.get('srcentryid') is not None:
            self.src_entry_id = m.get('srcentryid')
        return self


class ExpressDetail(TeaModel):
    def __init__(
        self,
        seq: str = None,
        id: str = None,
        delivery_bill_no: str = None,
        delivery_time: str = None,
        express_company_id: str = None,
        express_company_number: str = None,
        express_company_name: bool = None,
    ):
        # 分录序号
        self.seq = seq
        # 分录ID
        self.id = id
        # 物流单号
        self.delivery_bill_no = delivery_bill_no
        # 发货时间
        self.delivery_time = delivery_time
        # 物流公司id
        self.express_company_id = express_company_id
        # 物流公司编码
        self.express_company_number = express_company_number
        # 物流公司名称
        self.express_company_name = express_company_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.seq is not None:
            result['seq'] = self.seq
        if self.id is not None:
            result['id'] = self.id
        if self.delivery_bill_no is not None:
            result['delivery_billno'] = self.delivery_bill_no
        if self.delivery_time is not None:
            result['delivery_time'] = self.delivery_time
        if self.express_company_id is not None:
            result['express_company_id'] = self.express_company_id
        if self.express_company_number is not None:
            result['express_company_number'] = self.express_company_number
        if self.express_company_name is not None:
            result['express_company_name'] = self.express_company_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('seq') is not None:
            self.seq = m.get('seq')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('delivery_billno') is not None:
            self.delivery_bill_no = m.get('delivery_billno')
        if m.get('delivery_time') is not None:
            self.delivery_time = m.get('delivery_time')
        if m.get('express_company_id') is not None:
            self.express_company_id = m.get('express_company_id')
        if m.get('express_company_number') is not None:
            self.express_company_number = m.get('express_company_number')
        if m.get('express_company_name') is not None:
            self.express_company_name = m.get('express_company_name')
        return self


class InvTfInDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_no: str = None,
        bill_date: str = None,
        bill_status: str = None,
        create_time: str = None,
        modify_time: str = None,
        creator_id: str = None,
        creatorid_name: str = None,
        creatorid_number: str = None,
        modifier_id: str = None,
        modifier_name: str = None,
        modifier_number: str = None,
        auditor_id: str = None,
        auditor_name: str = None,
        auditor_number: str = None,
        trans_type: str = None,
        transfer_status: str = None,
        remark: str = None,
        dept_id: str = None,
        dept_name: str = None,
        dept_number: str = None,
        out_dept_id: str = None,
        out_dept_name: str = None,
        out_dept_number: str = None,
        delivery_type_id: str = None,
        delivery_type_name: str = None,
        delivery_type_number: str = None,
        material_entity: List[InvTfInMaterialDetail] = None,
        express_entity: List[ExpressDetail] = None,
    ):
        # 单据ID
        self.id = id
        # 单据编码
        self.bill_no = bill_no
        # 单据日期
        self.bill_date = bill_date
        # 单据状态，Z：未审核，C：已审核
        self.bill_status = bill_status
        # 创建时间
        self.create_time = create_time
        # 修改时间
        self.modify_time = modify_time
        # 创建人id
        self.creator_id = creator_id
        # 创建人名称
        self.creatorid_name = creatorid_name
        # 创建人编码
        self.creatorid_number = creatorid_number
        # 修改人id
        self.modifier_id = modifier_id
        # 修改人名称
        self.modifier_name = modifier_name
        # 修改人编码
        self.modifier_number = modifier_number
        # 审核人id
        self.auditor_id = auditor_id
        # 审核人名称
        self.auditor_name = auditor_name
        # 审核人编码
        self.auditor_number = auditor_number
        # 业务类型，1：同价调拨，2：异价调拨
        self.trans_type = trans_type
        # 调拨状态，0：未出库，1：未入库，2：部分入库，3：全部入库
        self.transfer_status = transfer_status
        # 备注
        self.remark = remark
        # 调入部门id
        self.dept_id = dept_id
        # 调入部门名称
        self.dept_name = dept_name
        # 调入部门编码
        self.dept_number = dept_number
        # 调出部门id
        self.out_dept_id = out_dept_id
        # 调出部门名称
        self.out_dept_name = out_dept_name
        # 调出部门编码
        self.out_dept_number = out_dept_number
        # 交货方式id
        self.delivery_type_id = delivery_type_id
        # 交货方式名称
        self.delivery_type_name = delivery_type_name
        # 交货方式编码
        self.delivery_type_number = delivery_type_number
        # 商品分录
        self.material_entity = material_entity
        # 物流信息分录
        self.express_entity = express_entity

    def validate(self):
        if self.material_entity:
            for k in self.material_entity:
                if k:
                    k.validate()
        if self.express_entity:
            for k in self.express_entity:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_no is not None:
            result['billno'] = self.bill_no
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.create_time is not None:
            result['createtime'] = self.create_time
        if self.modify_time is not None:
            result['modifytime'] = self.modify_time
        if self.creator_id is not None:
            result['creatorid_id'] = self.creator_id
        if self.creatorid_name is not None:
            result['creatorid_name'] = self.creatorid_name
        if self.creatorid_number is not None:
            result['creatorid_number'] = self.creatorid_number
        if self.modifier_id is not None:
            result['modifierid_id'] = self.modifier_id
        if self.modifier_name is not None:
            result['modifierid_name'] = self.modifier_name
        if self.modifier_number is not None:
            result['modifierid_number'] = self.modifier_number
        if self.auditor_id is not None:
            result['auditorid_id'] = self.auditor_id
        if self.auditor_name is not None:
            result['auditorid_name'] = self.auditor_name
        if self.auditor_number is not None:
            result['auditorid_number'] = self.auditor_number
        if self.trans_type is not None:
            result['transtype'] = self.trans_type
        if self.transfer_status is not None:
            result['transferstatus'] = self.transfer_status
        if self.remark is not None:
            result['remark'] = self.remark
        if self.dept_id is not None:
            result['deptid_id'] = self.dept_id
        if self.dept_name is not None:
            result['deptid_name'] = self.dept_name
        if self.dept_number is not None:
            result['deptid_number'] = self.dept_number
        if self.out_dept_id is not None:
            result['outdeptid_id'] = self.out_dept_id
        if self.out_dept_name is not None:
            result['outdeptid_name'] = self.out_dept_name
        if self.out_dept_number is not None:
            result['outdeptid_number'] = self.out_dept_number
        if self.delivery_type_id is not None:
            result['delivery_type_id'] = self.delivery_type_id
        if self.delivery_type_name is not None:
            result['delivery_type_name'] = self.delivery_type_name
        if self.delivery_type_number is not None:
            result['delivery_type_number'] = self.delivery_type_number
        result['material_entity'] = []
        if self.material_entity is not None:
            for k in self.material_entity:
                result['material_entity'].append(k.to_map() if k else None)
        result['express_entity'] = []
        if self.express_entity is not None:
            for k in self.express_entity:
                result['express_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billno') is not None:
            self.bill_no = m.get('billno')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('createtime') is not None:
            self.create_time = m.get('createtime')
        if m.get('modifytime') is not None:
            self.modify_time = m.get('modifytime')
        if m.get('creatorid_id') is not None:
            self.creator_id = m.get('creatorid_id')
        if m.get('creatorid_name') is not None:
            self.creatorid_name = m.get('creatorid_name')
        if m.get('creatorid_number') is not None:
            self.creatorid_number = m.get('creatorid_number')
        if m.get('modifierid_id') is not None:
            self.modifier_id = m.get('modifierid_id')
        if m.get('modifierid_name') is not None:
            self.modifier_name = m.get('modifierid_name')
        if m.get('modifierid_number') is not None:
            self.modifier_number = m.get('modifierid_number')
        if m.get('auditorid_id') is not None:
            self.auditor_id = m.get('auditorid_id')
        if m.get('auditorid_name') is not None:
            self.auditor_name = m.get('auditorid_name')
        if m.get('auditorid_number') is not None:
            self.auditor_number = m.get('auditorid_number')
        if m.get('transtype') is not None:
            self.trans_type = m.get('transtype')
        if m.get('transferstatus') is not None:
            self.transfer_status = m.get('transferstatus')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('deptid_id') is not None:
            self.dept_id = m.get('deptid_id')
        if m.get('deptid_name') is not None:
            self.dept_name = m.get('deptid_name')
        if m.get('deptid_number') is not None:
            self.dept_number = m.get('deptid_number')
        if m.get('outdeptid_id') is not None:
            self.out_dept_id = m.get('outdeptid_id')
        if m.get('outdeptid_name') is not None:
            self.out_dept_name = m.get('outdeptid_name')
        if m.get('outdeptid_number') is not None:
            self.out_dept_number = m.get('outdeptid_number')
        if m.get('delivery_type_id') is not None:
            self.delivery_type_id = m.get('delivery_type_id')
        if m.get('delivery_type_name') is not None:
            self.delivery_type_name = m.get('delivery_type_name')
        if m.get('delivery_type_number') is not None:
            self.delivery_type_number = m.get('delivery_type_number')
        self.material_entity = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = InvTfInMaterialDetail()
                self.material_entity.append(temp_model.from_map(k))
        self.express_entity = []
        if m.get('express_entity') is not None:
            for k in m.get('express_entity'):
                temp_model = ExpressDetail()
                self.express_entity.append(temp_model.from_map(k))
        return self


class InvTfInDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: InvTfInDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = InvTfInDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class InvTfOutMaterialEntity(TeaModel):
    def __init__(
        self,
        id: str = None,
        material_id: str = None,
        in_stock_id: str = None,
        in_sp_id: str = None,
        out_stock_id: str = None,
        out_sp_id: str = None,
        auxprop_id: str = None,
        aux_id_1: str = None,
        aux_id_2: str = None,
        aux_id_3: str = None,
        aux_id_4: str = None,
        aux_id_5: str = None,
        batch_no: str = None,
        proplace: str = None,
        proreg_no: str = None,
        prolicense: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_period: str = None,
        kf_type: str = None,
        serial_qty: str = None,
        inv_qty: str = None,
        qty: str = None,
        unit_id: str = None,
        sn_list_id: str = None,
        sn_list: str = None,
        pack_age: str = None,
        unit_type: str = None,
        conversion_rate: str = None,
        aux_unit_type: str = None,
        base_unit_id: str = None,
        aux_unit_id: str = None,
        base_qty: str = None,
        aux_qty: str = None,
        retail_price: str = None,
        out_price: str = None,
        discount: str = None,
        comment: str = None,
    ):
        # 分录id，新增不传该字段，修改必传
        self.id = id
        # 商品id
        self.material_id = material_id
        # 调入仓库id
        self.in_stock_id = in_stock_id
        # 调入仓位，启用了仓位管理则必填
        self.in_sp_id = in_sp_id
        # 调出仓库id
        self.out_stock_id = out_stock_id
        # 调出仓位id，启用了仓位管理则必填
        self.out_sp_id = out_sp_id
        # 辅助属性；辅助属性商品必填
        self.auxprop_id = auxprop_id
        # 辅助属性明细1的id；辅助属性商品必填
        self.aux_id_1 = aux_id_1
        # 辅助属性明细2的id；辅助属性商品必填
        self.aux_id_2 = aux_id_2
        # 辅助属性明细3的id；辅助属性商品必填
        self.aux_id_3 = aux_id_3
        # 辅助属性明细4的id；辅助属性商品必填
        self.aux_id_4 = aux_id_4
        # 辅助属性明细5的id；辅助属性商品必填
        self.aux_id_5 = aux_id_5
        # 批次号，批次商品必填
        self.batch_no = batch_no
        # 产地
        self.proplace = proplace
        # 生产许可证号
        self.proreg_no = proreg_no
        # 注册许可证号
        self.prolicense = prolicense
        # 生产日期
        self.kf_date = kf_date
        # 有效日期
        self.valid_date = valid_date
        # 保质期
        self.kf_period = kf_period
        # 保质期单位
        self.kf_type = kf_type
        # 序列号数量
        self.serial_qty = serial_qty
        # 可用库存
        self.inv_qty = inv_qty
        # 数量
        self.qty = qty
        # 单位id
        self.unit_id = unit_id
        # 序列号流转id；单据新增后会在单据详情中带回这个字段信息，序列号商品修改时必填
        self.sn_list_id = sn_list_id
        # 序列号 格式：001:备注1;002:备注2 （序列号:序列号备注 多个序列号以英文分号字符;分隔）,序列号商品必填
        self.sn_list = sn_list
        # 整件散包
        self.pack_age = pack_age
        # 单位类型
        self.unit_type = unit_type
        # 换算公式
        self.conversion_rate = conversion_rate
        # 辅助单位类型
        self.aux_unit_type = aux_unit_type
        # 基本单位id
        self.base_unit_id = base_unit_id
        # 辅助单位id
        self.aux_unit_id = aux_unit_id
        # 基本数量
        self.base_qty = base_qty
        # 辅助数量
        self.aux_qty = aux_qty
        # 零售价
        self.retail_price = retail_price
        # 出库单价，异价调拨必填
        self.out_price = out_price
        # 折扣（折），异价调拨必填
        self.discount = discount
        # 商品行备注
        self.comment = comment

    def validate(self):
        self.validate_required(self.material_id, 'material_id')
        self.validate_required(self.in_stock_id, 'in_stock_id')
        self.validate_required(self.out_stock_id, 'out_stock_id')
        self.validate_required(self.qty, 'qty')
        self.validate_required(self.unit_id, 'unit_id')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.material_id is not None:
            result['materialid_id'] = self.material_id
        if self.in_stock_id is not None:
            result['instockid_id'] = self.in_stock_id
        if self.in_sp_id is not None:
            result['inspid_id'] = self.in_sp_id
        if self.out_stock_id is not None:
            result['outstockid_id'] = self.out_stock_id
        if self.out_sp_id is not None:
            result['outspid_id'] = self.out_sp_id
        if self.auxprop_id is not None:
            result['auxpropid_id'] = self.auxprop_id
        if self.aux_id_1 is not None:
            result['auxid1_id'] = self.aux_id_1
        if self.aux_id_2 is not None:
            result['auxid2_id'] = self.aux_id_2
        if self.aux_id_3 is not None:
            result['auxid3_id'] = self.aux_id_3
        if self.aux_id_4 is not None:
            result['auxid4_id'] = self.aux_id_4
        if self.aux_id_5 is not None:
            result['auxid5_id'] = self.aux_id_5
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.proplace is not None:
            result['proplace'] = self.proplace
        if self.proreg_no is not None:
            result['proregno'] = self.proreg_no
        if self.prolicense is not None:
            result['prolicense'] = self.prolicense
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.serial_qty is not None:
            result['serialqty'] = self.serial_qty
        if self.inv_qty is not None:
            result['inv_qty'] = self.inv_qty
        if self.qty is not None:
            result['qty'] = self.qty
        if self.unit_id is not None:
            result['unit_id'] = self.unit_id
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.sn_list is not None:
            result['sn_list'] = self.sn_list
        if self.pack_age is not None:
            result['package'] = self.pack_age
        if self.unit_type is not None:
            result['unittype'] = self.unit_type
        if self.conversion_rate is not None:
            result['conversionrate'] = self.conversion_rate
        if self.aux_unit_type is not None:
            result['auxunittype'] = self.aux_unit_type
        if self.base_unit_id is not None:
            result['baseunit_id'] = self.base_unit_id
        if self.aux_unit_id is not None:
            result['auxunitid_id'] = self.aux_unit_id
        if self.base_qty is not None:
            result['baseqty'] = self.base_qty
        if self.aux_qty is not None:
            result['auxqty'] = self.aux_qty
        if self.retail_price is not None:
            result['retailprice'] = self.retail_price
        if self.out_price is not None:
            result['out_price'] = self.out_price
        if self.discount is not None:
            result['discount'] = self.discount
        if self.comment is not None:
            result['comment'] = self.comment
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('materialid_id') is not None:
            self.material_id = m.get('materialid_id')
        if m.get('instockid_id') is not None:
            self.in_stock_id = m.get('instockid_id')
        if m.get('inspid_id') is not None:
            self.in_sp_id = m.get('inspid_id')
        if m.get('outstockid_id') is not None:
            self.out_stock_id = m.get('outstockid_id')
        if m.get('outspid_id') is not None:
            self.out_sp_id = m.get('outspid_id')
        if m.get('auxpropid_id') is not None:
            self.auxprop_id = m.get('auxpropid_id')
        if m.get('auxid1_id') is not None:
            self.aux_id_1 = m.get('auxid1_id')
        if m.get('auxid2_id') is not None:
            self.aux_id_2 = m.get('auxid2_id')
        if m.get('auxid3_id') is not None:
            self.aux_id_3 = m.get('auxid3_id')
        if m.get('auxid4_id') is not None:
            self.aux_id_4 = m.get('auxid4_id')
        if m.get('auxid5_id') is not None:
            self.aux_id_5 = m.get('auxid5_id')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.proplace = m.get('proplace')
        if m.get('proregno') is not None:
            self.proreg_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.prolicense = m.get('prolicense')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('serialqty') is not None:
            self.serial_qty = m.get('serialqty')
        if m.get('inv_qty') is not None:
            self.inv_qty = m.get('inv_qty')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('unit_id') is not None:
            self.unit_id = m.get('unit_id')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('sn_list') is not None:
            self.sn_list = m.get('sn_list')
        if m.get('package') is not None:
            self.pack_age = m.get('package')
        if m.get('unittype') is not None:
            self.unit_type = m.get('unittype')
        if m.get('conversionrate') is not None:
            self.conversion_rate = m.get('conversionrate')
        if m.get('auxunittype') is not None:
            self.aux_unit_type = m.get('auxunittype')
        if m.get('baseunit_id') is not None:
            self.base_unit_id = m.get('baseunit_id')
        if m.get('auxunitid_id') is not None:
            self.aux_unit_id = m.get('auxunitid_id')
        if m.get('baseqty') is not None:
            self.base_qty = m.get('baseqty')
        if m.get('auxqty') is not None:
            self.aux_qty = m.get('auxqty')
        if m.get('retailprice') is not None:
            self.retail_price = m.get('retailprice')
        if m.get('out_price') is not None:
            self.out_price = m.get('out_price')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        return self


class InvTfOutSaveRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_date: str = None,
        dept_id: str = None,
        out_dept_id: str = None,
        remark: str = None,
        transfer_status: str = None,
        trans_type: str = None,
        material_entity: List[InvTfOutMaterialEntity] = None,
    ):
        # 单据ID，修改单据时必填，新增不传该字段
        self.id = id
        # 单据日期
        self.bill_date = bill_date
        # 调入部门id
        self.dept_id = dept_id
        # 调出部门id
        self.out_dept_id = out_dept_id
        # 单据备注
        self.remark = remark
        # 调拨状态，0：未出库（默认），1：未入库，2：部分入库，3：全部入库
        self.transfer_status = transfer_status
        # 业务类型，1：同价调拨（默认），2：异价调拨
        self.trans_type = trans_type
        # 商品分录
        self.material_entity = material_entity

    def validate(self):
        if self.material_entity:
            for k in self.material_entity:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.dept_id is not None:
            result['deptid_id'] = self.dept_id
        if self.out_dept_id is not None:
            result['outdeptid_id'] = self.out_dept_id
        if self.remark is not None:
            result['remark'] = self.remark
        if self.transfer_status is not None:
            result['transferstatus'] = self.transfer_status
        if self.trans_type is not None:
            result['transtype'] = self.trans_type
        result['material_entity'] = []
        if self.material_entity is not None:
            for k in self.material_entity:
                result['material_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('deptid_id') is not None:
            self.dept_id = m.get('deptid_id')
        if m.get('outdeptid_id') is not None:
            self.out_dept_id = m.get('outdeptid_id')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('transferstatus') is not None:
            self.transfer_status = m.get('transferstatus')
        if m.get('transtype') is not None:
            self.trans_type = m.get('transtype')
        self.material_entity = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = InvTfOutMaterialEntity()
                self.material_entity.append(temp_model.from_map(k))
        return self


class InvTfOutSaveRequest(TeaModel):
    def __init__(
        self,
        body: InvTfOutSaveRequestBody = None,
    ):
        self.body = body
        # 调拨出库单商品分录

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvTfOutSaveRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvDrawPushData(TeaModel):
    def __init__(
        self,
        id: str = None,
        entry_id: str = None,
    ):
        # 要处理的单据id
        self.id = id
        # 单据分录id
        self.entry_id = entry_id

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.entry_id, 'entry_id')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.entry_id is not None:
            result['entryid'] = self.entry_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('entryid') is not None:
            self.entry_id = m.get('entryid')
        return self


class InvTfInDrawRequestBody(TeaModel):
    def __init__(
        self,
        push_and_save: str = None,
        push_all: bool = None,
        data: List[InvDrawPushData] = None,
    ):
        # 是否下推的同时保存，true:下推的同时保存单据，false：仅下推，返回下推数据，不保存单据，默认true
        self.push_and_save = push_and_save
        # push_and_save为false生效，false：下推结果多于一个时报错，默认false
        self.push_all = push_all
        # 处理的数据
        self.data = data

    def validate(self):
        self.validate_required(self.data, 'data')
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.push_and_save is not None:
            result['push_and_save'] = self.push_and_save
        if self.push_all is not None:
            result['pushall'] = self.push_all
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('push_and_save') is not None:
            self.push_and_save = m.get('push_and_save')
        if m.get('pushall') is not None:
            self.push_all = m.get('pushall')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = InvDrawPushData()
                self.data.append(temp_model.from_map(k))
        return self


class InvTfInDrawRequest(TeaModel):
    def __init__(
        self,
        body: InvTfInDrawRequestBody = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvTfInDrawRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvTfOutListRequestBody(TeaModel):
    def __init__(
        self,
        out_dept_id: List[str] = None,
        dept_id: List[str] = None,
        out_stock_id: List[str] = None,
        in_stock_id: List[str] = None,
        bill_status: str = None,
        transfer_status: str = None,
        diff_status: str = None,
        trans_type: str = None,
        start_date: str = None,
        end_date: str = None,
        begin_date: str = None,
        expire_date: str = None,
        start_time: int = None,
        end_time: int = None,
        begin_time: int = None,
        expire_time: int = None,
        start_bill_date: str = None,
        end_bill_date: str = None,
        search: str = None,
        show_material_total: bool = None,
        entry_total_fields: str = None,
        page: int = None,
        page_size: int = None,
    ):
        # 调出部门id
        self.out_dept_id = out_dept_id
        # 调入部门id
        self.dept_id = dept_id
        # 调出仓id
        self.out_stock_id = out_stock_id
        # 调入仓id
        self.in_stock_id = in_stock_id
        # 单据状态（所有：“”，已审核：“C”，未审核：“Z”
        self.bill_status = bill_status
        # 调拨状态（所有：“”，未出库：“0”，未入库：“1”，部分入库：“2”，全部入库：“3”）
        self.transfer_status = transfer_status
        # 差异处理状态（所有：“”，未处理：“1”，已处理：“2”）
        self.diff_status = diff_status
        # 业务类型（所有：“”，同价调拨：“1”，异价调拨：“2”）
        self.trans_type = trans_type
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.start_date = start_date
        # 结束日期（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.end_date = end_date
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），修改日期
        self.begin_date = begin_date
        # 结束日期（格式：“yyyy-MM-dd”，为空表示不过滤），修改日期
        self.expire_date = expire_date
        # 开始时间（格式：“时间戳”，-1表示不过滤），创建时间
        self.start_time = start_time
        # 结束时间（格式：“时间戳”，-1表示不过滤），创建时间
        self.end_time = end_time
        # 开始时间（格式：“时间戳”，-1表示不过滤），修改时间
        self.begin_time = begin_time
        # 结束时间（格式：“时间戳”，-1表示不过滤），修改时间
        self.expire_time = expire_time
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），单据日期
        self.start_bill_date = start_bill_date
        # 结束日期（格式：“yyyy-MM-dd”，为空表示不过滤），单据日期
        self.end_bill_date = end_bill_date
        # 模糊搜索，单据编码、商品名称、任务名称、仓库名称
        self.search = search
        # 是否统计商品种类和数量到单据，默认false
        self.show_material_total = show_material_total
        # 自定义合计字段(分录合并到单据，返回的合计值在单据头，key和传递的一致)，多个字段用英文逗号隔开,使用该参数时，top参数必传且不能为0
        self.entry_total_fields = entry_total_fields
        # 当前页（默认1）
        self.page = page
        # 每页显示条数，（默认10，最大值100）
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.out_dept_id is not None:
            result['outdeptid'] = self.out_dept_id
        if self.dept_id is not None:
            result['deptid'] = self.dept_id
        if self.out_stock_id is not None:
            result['outstockid'] = self.out_stock_id
        if self.in_stock_id is not None:
            result['instockid'] = self.in_stock_id
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.transfer_status is not None:
            result['transferstatus'] = self.transfer_status
        if self.diff_status is not None:
            result['diffstatus'] = self.diff_status
        if self.trans_type is not None:
            result['transtype'] = self.trans_type
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.begin_date is not None:
            result['begindate'] = self.begin_date
        if self.expire_date is not None:
            result['expiredate'] = self.expire_date
        if self.start_time is not None:
            result['starttime'] = self.start_time
        if self.end_time is not None:
            result['endtime'] = self.end_time
        if self.begin_time is not None:
            result['begintime'] = self.begin_time
        if self.expire_time is not None:
            result['expiretime'] = self.expire_time
        if self.start_bill_date is not None:
            result['startbilldate'] = self.start_bill_date
        if self.end_bill_date is not None:
            result['endbilldate'] = self.end_bill_date
        if self.search is not None:
            result['search'] = self.search
        if self.show_material_total is not None:
            result['showmaterialtotal'] = self.show_material_total
        if self.entry_total_fields is not None:
            result['entrytotalfields'] = self.entry_total_fields
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('outdeptid') is not None:
            self.out_dept_id = m.get('outdeptid')
        if m.get('deptid') is not None:
            self.dept_id = m.get('deptid')
        if m.get('outstockid') is not None:
            self.out_stock_id = m.get('outstockid')
        if m.get('instockid') is not None:
            self.in_stock_id = m.get('instockid')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('transferstatus') is not None:
            self.transfer_status = m.get('transferstatus')
        if m.get('diffstatus') is not None:
            self.diff_status = m.get('diffstatus')
        if m.get('transtype') is not None:
            self.trans_type = m.get('transtype')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('begindate') is not None:
            self.begin_date = m.get('begindate')
        if m.get('expiredate') is not None:
            self.expire_date = m.get('expiredate')
        if m.get('starttime') is not None:
            self.start_time = m.get('starttime')
        if m.get('endtime') is not None:
            self.end_time = m.get('endtime')
        if m.get('begintime') is not None:
            self.begin_time = m.get('begintime')
        if m.get('expiretime') is not None:
            self.expire_time = m.get('expiretime')
        if m.get('startbilldate') is not None:
            self.start_bill_date = m.get('startbilldate')
        if m.get('endbilldate') is not None:
            self.end_bill_date = m.get('endbilldate')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('showmaterialtotal') is not None:
            self.show_material_total = m.get('showmaterialtotal')
        if m.get('entrytotalfields') is not None:
            self.entry_total_fields = m.get('entrytotalfields')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        return self


class InvTfOutListRequest(TeaModel):
    def __init__(
        self,
        body: InvTfOutListRequestBody = None,
    ):
        self.body = body
        # 调拨出库单列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvTfOutListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvTfOutMaterialDetail(TeaModel):
    def __init__(
        self,
        seq: str = None,
        id: str = None,
        picture: str = None,
        material_id: str = None,
        material_name: str = None,
        material_number: str = None,
        material_is_multi_unit: bool = None,
        material_is_serial: bool = None,
        material_is_asstattr: bool = None,
        material_is_kfperiod: bool = None,
        material_is_batch: bool = None,
        material_model: str = None,
        in_stock_id: str = None,
        in_stock_name: str = None,
        in_stock_number: str = None,
        in_sp_id: str = None,
        in_sp_name: str = None,
        in_sp_number: str = None,
        out_stock_id: str = None,
        out_stock_name: str = None,
        out_stock_number: str = None,
        out_sp_id: str = None,
        out_sp_name: str = None,
        out_sp_number: str = None,
        auxprop_id: str = None,
        auxprop_name: str = None,
        auxprop_number: str = None,
        aux_id_1: str = None,
        aux_id_1name: str = None,
        aux_id_1number: str = None,
        aux_id_2: str = None,
        aux_id_2name: str = None,
        aux_id_2number: str = None,
        aux_id_3: str = None,
        aux_id_3name: str = None,
        aux_id_3number: str = None,
        aux_id_4: str = None,
        aux_id_4name: str = None,
        aux_id_4number: str = None,
        aux_id_5: str = None,
        aux_id_5name: str = None,
        aux_id_5number: str = None,
        barcode: str = None,
        batch_no: str = None,
        proplace: str = None,
        proreg_no: str = None,
        prolicense: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_type: str = None,
        kf_period: str = None,
        sn: str = None,
        sn_list_id: str = None,
        base_unit_id: str = None,
        base_unit_name: str = None,
        base_unit_number: str = None,
        unit_id: str = None,
        unit_name: str = None,
        unit_number: str = None,
        aux_unit_id: str = None,
        aux_unit_name: str = None,
        aux_unit_number: str = None,
        retail_price: str = None,
        conversion_rate: str = None,
        qty: str = None,
        inv_qty: str = None,
        base_qty: str = None,
        inv_base_qty: str = None,
        aux_qty: str = None,
        in_base_qty_2: str = None,
        in_deffloat_qty: str = None,
        in_deffloat_qty_2: str = None,
        deffloat_qty: str = None,
        aux_coefficient: str = None,
        coefficient: str = None,
        discount: str = None,
        unitcost: str = None,
        out_price: str = None,
        out_amount: str = None,
        cost: str = None,
        diff_status: str = None,
        comment: str = None,
        src_bill_no: str = None,
        src_bill_type_id: str = None,
        src_bill_type_name: str = None,
        src_bill_type_number: str = None,
        src_inter_id: str = None,
        src_bill_date: str = None,
        src_seq: str = None,
        src_entry_id: str = None,
    ):
        # 分录序号
        self.seq = seq
        # 分录ID
        self.id = id
        # 图片url
        self.picture = picture
        # 商品id
        self.material_id = material_id
        # 商品名称
        self.material_name = material_name
        # 商品编码
        self.material_number = material_number
        # 商品是否多单位
        self.material_is_multi_unit = material_is_multi_unit
        # 商品是否序列号
        self.material_is_serial = material_is_serial
        # 商品是否启用辅助属性
        self.material_is_asstattr = material_is_asstattr
        # 商品是否开启保质期
        self.material_is_kfperiod = material_is_kfperiod
        # 商品是否开启批次
        self.material_is_batch = material_is_batch
        # 商品规格
        self.material_model = material_model
        # 调入仓库id
        self.in_stock_id = in_stock_id
        # 调入仓库名称
        self.in_stock_name = in_stock_name
        # 调入仓库编码
        self.in_stock_number = in_stock_number
        # 调入仓位id
        self.in_sp_id = in_sp_id
        # 调入仓位名称
        self.in_sp_name = in_sp_name
        # 调入仓位编码
        self.in_sp_number = in_sp_number
        # 调出仓库id
        self.out_stock_id = out_stock_id
        # 调出仓库名称
        self.out_stock_name = out_stock_name
        # 调出仓库编码
        self.out_stock_number = out_stock_number
        # 调出仓位id
        self.out_sp_id = out_sp_id
        # 调出仓位名称
        self.out_sp_name = out_sp_name
        # 调出仓位编码
        self.out_sp_number = out_sp_number
        # 辅助属性id
        self.auxprop_id = auxprop_id
        # 辅助属性名称
        self.auxprop_name = auxprop_name
        # 辅助属性编码
        self.auxprop_number = auxprop_number
        # 辅助属性1id
        self.aux_id_1 = aux_id_1
        # 辅助属性1名称
        self.aux_id_1name = aux_id_1name
        # 辅助属性1编码
        self.aux_id_1number = aux_id_1number
        # 辅助属性2id
        self.aux_id_2 = aux_id_2
        # 辅助属性2名称
        self.aux_id_2name = aux_id_2name
        # 辅助属性2编码
        self.aux_id_2number = aux_id_2number
        # 辅助属性3id
        self.aux_id_3 = aux_id_3
        # 辅助属性3名称
        self.aux_id_3name = aux_id_3name
        # 辅助属性3编码
        self.aux_id_3number = aux_id_3number
        # 辅助属性4id
        self.aux_id_4 = aux_id_4
        # 辅助属性4名称
        self.aux_id_4name = aux_id_4name
        # 辅助属性4编码
        self.aux_id_4number = aux_id_4number
        # 辅助属性5id
        self.aux_id_5 = aux_id_5
        # 辅助属性5名称
        self.aux_id_5name = aux_id_5name
        # 辅助属性5编码
        self.aux_id_5number = aux_id_5number
        # 条形码
        self.barcode = barcode
        # 批次号
        self.batch_no = batch_no
        # 产地
        self.proplace = proplace
        # 注册证号
        self.proreg_no = proreg_no
        # 生产许可证号
        self.prolicense = prolicense
        # 生产日期
        self.kf_date = kf_date
        # 有效日期
        self.valid_date = valid_date
        # 保质期类型，1：天，2：月，3：年
        self.kf_type = kf_type
        # 保质期天数
        self.kf_period = kf_period
        # 序列号
        self.sn = sn
        # 序列号流转ID
        self.sn_list_id = sn_list_id
        # 基本单位id
        self.base_unit_id = base_unit_id
        # 基本单位名称
        self.base_unit_name = base_unit_name
        # 基本单位编码
        self.base_unit_number = base_unit_number
        # 单位id
        self.unit_id = unit_id
        # 单位名称
        self.unit_name = unit_name
        # 单位编码
        self.unit_number = unit_number
        # 辅助单位id
        self.aux_unit_id = aux_unit_id
        # 辅助单位名称
        self.aux_unit_name = aux_unit_name
        # 辅助单位编码
        self.aux_unit_number = aux_unit_number
        # 零售价
        self.retail_price = retail_price
        # 换算公式
        self.conversion_rate = conversion_rate
        # 数量
        self.qty = qty
        # 库存数量
        self.inv_qty = inv_qty
        # 基本数量
        self.base_qty = base_qty
        # 基本库存数量
        self.inv_base_qty = inv_base_qty
        # 辅助单位数量
        self.aux_qty = aux_qty
        # 入库基本单位数量2
        self.in_base_qty_2 = in_base_qty_2
        # 已入库默认浮动单位数量
        self.in_deffloat_qty = in_deffloat_qty
        # 已入库默认浮动单位数量2
        self.in_deffloat_qty_2 = in_deffloat_qty_2
        # 辅助基本数量
        self.deffloat_qty = deffloat_qty
        # 辅助换算率
        self.aux_coefficient = aux_coefficient
        # 换算率
        self.coefficient = coefficient
        # 折扣
        self.discount = discount
        # 单位成本
        self.unitcost = unitcost
        # 调出单价
        self.out_price = out_price
        # 调出金额
        self.out_amount = out_amount
        # 成本
        self.cost = cost
        # 差异处理状态，2：已处理，1：未处理
        self.diff_status = diff_status
        # 行备注
        self.comment = comment
        # 源单编号
        self.src_bill_no = src_bill_no
        # 源单类型id
        self.src_bill_type_id = src_bill_type_id
        # 源单类型名称
        self.src_bill_type_name = src_bill_type_name
        # 源单类型编码
        self.src_bill_type_number = src_bill_type_number
        # 源单内码
        self.src_inter_id = src_inter_id
        # 源单日期
        self.src_bill_date = src_bill_date
        # 源单行号
        self.src_seq = src_seq
        # 源单分录内码
        self.src_entry_id = src_entry_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.seq is not None:
            result['seq'] = self.seq
        if self.id is not None:
            result['id'] = self.id
        if self.picture is not None:
            result['picture'] = self.picture
        if self.material_id is not None:
            result['materialid_id'] = self.material_id
        if self.material_name is not None:
            result['materialid_name'] = self.material_name
        if self.material_number is not None:
            result['materialid_number'] = self.material_number
        if self.material_is_multi_unit is not None:
            result['materialid_ismulti_unit'] = self.material_is_multi_unit
        if self.material_is_serial is not None:
            result['materialid_isserial'] = self.material_is_serial
        if self.material_is_asstattr is not None:
            result['materialid_isasstattr'] = self.material_is_asstattr
        if self.material_is_kfperiod is not None:
            result['materialid_iskfperiod'] = self.material_is_kfperiod
        if self.material_is_batch is not None:
            result['materialid_isbatch'] = self.material_is_batch
        if self.material_model is not None:
            result['materialid_model'] = self.material_model
        if self.in_stock_id is not None:
            result['instockid_id'] = self.in_stock_id
        if self.in_stock_name is not None:
            result['instockid_name'] = self.in_stock_name
        if self.in_stock_number is not None:
            result['instockid_number'] = self.in_stock_number
        if self.in_sp_id is not None:
            result['inspid_id'] = self.in_sp_id
        if self.in_sp_name is not None:
            result['inspid_name'] = self.in_sp_name
        if self.in_sp_number is not None:
            result['inspid_number'] = self.in_sp_number
        if self.out_stock_id is not None:
            result['outstockid_id'] = self.out_stock_id
        if self.out_stock_name is not None:
            result['outstockid_name'] = self.out_stock_name
        if self.out_stock_number is not None:
            result['outstockid_number'] = self.out_stock_number
        if self.out_sp_id is not None:
            result['outspid_id'] = self.out_sp_id
        if self.out_sp_name is not None:
            result['outspid_name'] = self.out_sp_name
        if self.out_sp_number is not None:
            result['outspid_number'] = self.out_sp_number
        if self.auxprop_id is not None:
            result['auxpropid_id'] = self.auxprop_id
        if self.auxprop_name is not None:
            result['auxpropid_name'] = self.auxprop_name
        if self.auxprop_number is not None:
            result['auxpropid_number'] = self.auxprop_number
        if self.aux_id_1 is not None:
            result['auxid1_id'] = self.aux_id_1
        if self.aux_id_1name is not None:
            result['auxid1_name'] = self.aux_id_1name
        if self.aux_id_1number is not None:
            result['auxid1_number'] = self.aux_id_1number
        if self.aux_id_2 is not None:
            result['auxid2_id'] = self.aux_id_2
        if self.aux_id_2name is not None:
            result['auxid2_name'] = self.aux_id_2name
        if self.aux_id_2number is not None:
            result['auxid2_number'] = self.aux_id_2number
        if self.aux_id_3 is not None:
            result['auxid3_id'] = self.aux_id_3
        if self.aux_id_3name is not None:
            result['auxid3_name'] = self.aux_id_3name
        if self.aux_id_3number is not None:
            result['auxid3_number'] = self.aux_id_3number
        if self.aux_id_4 is not None:
            result['auxid4_id'] = self.aux_id_4
        if self.aux_id_4name is not None:
            result['auxid4_name'] = self.aux_id_4name
        if self.aux_id_4number is not None:
            result['auxid4_number'] = self.aux_id_4number
        if self.aux_id_5 is not None:
            result['auxid5_id'] = self.aux_id_5
        if self.aux_id_5name is not None:
            result['auxid5_name'] = self.aux_id_5name
        if self.aux_id_5number is not None:
            result['auxid5_number'] = self.aux_id_5number
        if self.barcode is not None:
            result['barcode'] = self.barcode
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.proplace is not None:
            result['proplace'] = self.proplace
        if self.proreg_no is not None:
            result['proregno'] = self.proreg_no
        if self.prolicense is not None:
            result['prolicense'] = self.prolicense
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.sn is not None:
            result['sn'] = self.sn
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.base_unit_id is not None:
            result['baseunit_id'] = self.base_unit_id
        if self.base_unit_name is not None:
            result['baseunit_name'] = self.base_unit_name
        if self.base_unit_number is not None:
            result['baseunit_number'] = self.base_unit_number
        if self.unit_id is not None:
            result['unit_id'] = self.unit_id
        if self.unit_name is not None:
            result['unit_name'] = self.unit_name
        if self.unit_number is not None:
            result['unit_number'] = self.unit_number
        if self.aux_unit_id is not None:
            result['auxunitid_id'] = self.aux_unit_id
        if self.aux_unit_name is not None:
            result['auxunitid_name'] = self.aux_unit_name
        if self.aux_unit_number is not None:
            result['auxunitid_number'] = self.aux_unit_number
        if self.retail_price is not None:
            result['retailprice'] = self.retail_price
        if self.conversion_rate is not None:
            result['conversionrate'] = self.conversion_rate
        if self.qty is not None:
            result['qty'] = self.qty
        if self.inv_qty is not None:
            result['inv_qty'] = self.inv_qty
        if self.base_qty is not None:
            result['baseqty'] = self.base_qty
        if self.inv_base_qty is not None:
            result['inv_baseqty'] = self.inv_base_qty
        if self.aux_qty is not None:
            result['auxqty'] = self.aux_qty
        if self.in_base_qty_2 is not None:
            result['inbaseqty2'] = self.in_base_qty_2
        if self.in_deffloat_qty is not None:
            result['indeffloatqty'] = self.in_deffloat_qty
        if self.in_deffloat_qty_2 is not None:
            result['indeffloatqty2'] = self.in_deffloat_qty_2
        if self.deffloat_qty is not None:
            result['deffloatqty'] = self.deffloat_qty
        if self.aux_coefficient is not None:
            result['auxcoefficient'] = self.aux_coefficient
        if self.coefficient is not None:
            result['coefficient'] = self.coefficient
        if self.discount is not None:
            result['discount'] = self.discount
        if self.unitcost is not None:
            result['unitcost'] = self.unitcost
        if self.out_price is not None:
            result['out_price'] = self.out_price
        if self.out_amount is not None:
            result['out_amount'] = self.out_amount
        if self.cost is not None:
            result['cost'] = self.cost
        if self.diff_status is not None:
            result['diffstatus'] = self.diff_status
        if self.comment is not None:
            result['comment'] = self.comment
        if self.src_bill_no is not None:
            result['srcbillno'] = self.src_bill_no
        if self.src_bill_type_id is not None:
            result['srcbilltypeid_id'] = self.src_bill_type_id
        if self.src_bill_type_name is not None:
            result['srcbilltypeid_name'] = self.src_bill_type_name
        if self.src_bill_type_number is not None:
            result['srcbilltypeid_number'] = self.src_bill_type_number
        if self.src_inter_id is not None:
            result['srcinterid'] = self.src_inter_id
        if self.src_bill_date is not None:
            result['src_billdate'] = self.src_bill_date
        if self.src_seq is not None:
            result['srcseq'] = self.src_seq
        if self.src_entry_id is not None:
            result['srcentryid'] = self.src_entry_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('seq') is not None:
            self.seq = m.get('seq')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('picture') is not None:
            self.picture = m.get('picture')
        if m.get('materialid_id') is not None:
            self.material_id = m.get('materialid_id')
        if m.get('materialid_name') is not None:
            self.material_name = m.get('materialid_name')
        if m.get('materialid_number') is not None:
            self.material_number = m.get('materialid_number')
        if m.get('materialid_ismulti_unit') is not None:
            self.material_is_multi_unit = m.get('materialid_ismulti_unit')
        if m.get('materialid_isserial') is not None:
            self.material_is_serial = m.get('materialid_isserial')
        if m.get('materialid_isasstattr') is not None:
            self.material_is_asstattr = m.get('materialid_isasstattr')
        if m.get('materialid_iskfperiod') is not None:
            self.material_is_kfperiod = m.get('materialid_iskfperiod')
        if m.get('materialid_isbatch') is not None:
            self.material_is_batch = m.get('materialid_isbatch')
        if m.get('materialid_model') is not None:
            self.material_model = m.get('materialid_model')
        if m.get('instockid_id') is not None:
            self.in_stock_id = m.get('instockid_id')
        if m.get('instockid_name') is not None:
            self.in_stock_name = m.get('instockid_name')
        if m.get('instockid_number') is not None:
            self.in_stock_number = m.get('instockid_number')
        if m.get('inspid_id') is not None:
            self.in_sp_id = m.get('inspid_id')
        if m.get('inspid_name') is not None:
            self.in_sp_name = m.get('inspid_name')
        if m.get('inspid_number') is not None:
            self.in_sp_number = m.get('inspid_number')
        if m.get('outstockid_id') is not None:
            self.out_stock_id = m.get('outstockid_id')
        if m.get('outstockid_name') is not None:
            self.out_stock_name = m.get('outstockid_name')
        if m.get('outstockid_number') is not None:
            self.out_stock_number = m.get('outstockid_number')
        if m.get('outspid_id') is not None:
            self.out_sp_id = m.get('outspid_id')
        if m.get('outspid_name') is not None:
            self.out_sp_name = m.get('outspid_name')
        if m.get('outspid_number') is not None:
            self.out_sp_number = m.get('outspid_number')
        if m.get('auxpropid_id') is not None:
            self.auxprop_id = m.get('auxpropid_id')
        if m.get('auxpropid_name') is not None:
            self.auxprop_name = m.get('auxpropid_name')
        if m.get('auxpropid_number') is not None:
            self.auxprop_number = m.get('auxpropid_number')
        if m.get('auxid1_id') is not None:
            self.aux_id_1 = m.get('auxid1_id')
        if m.get('auxid1_name') is not None:
            self.aux_id_1name = m.get('auxid1_name')
        if m.get('auxid1_number') is not None:
            self.aux_id_1number = m.get('auxid1_number')
        if m.get('auxid2_id') is not None:
            self.aux_id_2 = m.get('auxid2_id')
        if m.get('auxid2_name') is not None:
            self.aux_id_2name = m.get('auxid2_name')
        if m.get('auxid2_number') is not None:
            self.aux_id_2number = m.get('auxid2_number')
        if m.get('auxid3_id') is not None:
            self.aux_id_3 = m.get('auxid3_id')
        if m.get('auxid3_name') is not None:
            self.aux_id_3name = m.get('auxid3_name')
        if m.get('auxid3_number') is not None:
            self.aux_id_3number = m.get('auxid3_number')
        if m.get('auxid4_id') is not None:
            self.aux_id_4 = m.get('auxid4_id')
        if m.get('auxid4_name') is not None:
            self.aux_id_4name = m.get('auxid4_name')
        if m.get('auxid4_number') is not None:
            self.aux_id_4number = m.get('auxid4_number')
        if m.get('auxid5_id') is not None:
            self.aux_id_5 = m.get('auxid5_id')
        if m.get('auxid5_name') is not None:
            self.aux_id_5name = m.get('auxid5_name')
        if m.get('auxid5_number') is not None:
            self.aux_id_5number = m.get('auxid5_number')
        if m.get('barcode') is not None:
            self.barcode = m.get('barcode')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.proplace = m.get('proplace')
        if m.get('proregno') is not None:
            self.proreg_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.prolicense = m.get('prolicense')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('sn') is not None:
            self.sn = m.get('sn')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('baseunit_id') is not None:
            self.base_unit_id = m.get('baseunit_id')
        if m.get('baseunit_name') is not None:
            self.base_unit_name = m.get('baseunit_name')
        if m.get('baseunit_number') is not None:
            self.base_unit_number = m.get('baseunit_number')
        if m.get('unit_id') is not None:
            self.unit_id = m.get('unit_id')
        if m.get('unit_name') is not None:
            self.unit_name = m.get('unit_name')
        if m.get('unit_number') is not None:
            self.unit_number = m.get('unit_number')
        if m.get('auxunitid_id') is not None:
            self.aux_unit_id = m.get('auxunitid_id')
        if m.get('auxunitid_name') is not None:
            self.aux_unit_name = m.get('auxunitid_name')
        if m.get('auxunitid_number') is not None:
            self.aux_unit_number = m.get('auxunitid_number')
        if m.get('retailprice') is not None:
            self.retail_price = m.get('retailprice')
        if m.get('conversionrate') is not None:
            self.conversion_rate = m.get('conversionrate')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('inv_qty') is not None:
            self.inv_qty = m.get('inv_qty')
        if m.get('baseqty') is not None:
            self.base_qty = m.get('baseqty')
        if m.get('inv_baseqty') is not None:
            self.inv_base_qty = m.get('inv_baseqty')
        if m.get('auxqty') is not None:
            self.aux_qty = m.get('auxqty')
        if m.get('inbaseqty2') is not None:
            self.in_base_qty_2 = m.get('inbaseqty2')
        if m.get('indeffloatqty') is not None:
            self.in_deffloat_qty = m.get('indeffloatqty')
        if m.get('indeffloatqty2') is not None:
            self.in_deffloat_qty_2 = m.get('indeffloatqty2')
        if m.get('deffloatqty') is not None:
            self.deffloat_qty = m.get('deffloatqty')
        if m.get('auxcoefficient') is not None:
            self.aux_coefficient = m.get('auxcoefficient')
        if m.get('coefficient') is not None:
            self.coefficient = m.get('coefficient')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('unitcost') is not None:
            self.unitcost = m.get('unitcost')
        if m.get('out_price') is not None:
            self.out_price = m.get('out_price')
        if m.get('out_amount') is not None:
            self.out_amount = m.get('out_amount')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('diffstatus') is not None:
            self.diff_status = m.get('diffstatus')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('srcbillno') is not None:
            self.src_bill_no = m.get('srcbillno')
        if m.get('srcbilltypeid_id') is not None:
            self.src_bill_type_id = m.get('srcbilltypeid_id')
        if m.get('srcbilltypeid_name') is not None:
            self.src_bill_type_name = m.get('srcbilltypeid_name')
        if m.get('srcbilltypeid_number') is not None:
            self.src_bill_type_number = m.get('srcbilltypeid_number')
        if m.get('srcinterid') is not None:
            self.src_inter_id = m.get('srcinterid')
        if m.get('src_billdate') is not None:
            self.src_bill_date = m.get('src_billdate')
        if m.get('srcseq') is not None:
            self.src_seq = m.get('srcseq')
        if m.get('srcentryid') is not None:
            self.src_entry_id = m.get('srcentryid')
        return self


class InvTfOutDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_no: str = None,
        bill_date: str = None,
        bill_status: str = None,
        create_time: str = None,
        modify_time: str = None,
        creator_id: str = None,
        creatorid_name: str = None,
        creatorid_number: str = None,
        modifier_id: str = None,
        modifier_name: str = None,
        modifier_number: str = None,
        auditor_id: str = None,
        auditor_name: str = None,
        auditor_number: str = None,
        trans_type: str = None,
        transfer_status: str = None,
        remark: str = None,
        dept_id: str = None,
        dept_name: str = None,
        dept_number: str = None,
        out_dept_id: str = None,
        out_dept_name: str = None,
        out_dept_number: str = None,
        delivery_type_id: str = None,
        delivery_type_name: str = None,
        delivery_type_number: str = None,
        material_entity: List[InvTfOutMaterialDetail] = None,
        express_entity: List[ExpressDetail] = None,
    ):
        # 单据ID
        self.id = id
        # 单据编码
        self.bill_no = bill_no
        # 单据日期
        self.bill_date = bill_date
        # 单据状态，Z：未审核，C：已审核
        self.bill_status = bill_status
        # 创建时间
        self.create_time = create_time
        # 修改时间
        self.modify_time = modify_time
        # 创建人id
        self.creator_id = creator_id
        # 创建人名称
        self.creatorid_name = creatorid_name
        # 创建人编码
        self.creatorid_number = creatorid_number
        # 修改人id
        self.modifier_id = modifier_id
        # 修改人名称
        self.modifier_name = modifier_name
        # 修改人编码
        self.modifier_number = modifier_number
        # 审核人id
        self.auditor_id = auditor_id
        # 审核人名称
        self.auditor_name = auditor_name
        # 审核人编码
        self.auditor_number = auditor_number
        # 业务类型，1：同价调拨，2：异价调拨
        self.trans_type = trans_type
        # 调拨状态，0：未出库，1：未入库，2：部分入库，3：全部入库
        self.transfer_status = transfer_status
        # 备注
        self.remark = remark
        # 调入部门id
        self.dept_id = dept_id
        # 调入部门名称
        self.dept_name = dept_name
        # 调入部门编码
        self.dept_number = dept_number
        # 调出部门id
        self.out_dept_id = out_dept_id
        # 调出部门名称
        self.out_dept_name = out_dept_name
        # 调出部门编码
        self.out_dept_number = out_dept_number
        # 交货方式id
        self.delivery_type_id = delivery_type_id
        # 交货方式名称
        self.delivery_type_name = delivery_type_name
        # 交货方式编码
        self.delivery_type_number = delivery_type_number
        # 商品分录
        self.material_entity = material_entity
        # 物流信息分录
        self.express_entity = express_entity

    def validate(self):
        if self.material_entity:
            for k in self.material_entity:
                if k:
                    k.validate()
        if self.express_entity:
            for k in self.express_entity:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_no is not None:
            result['billno'] = self.bill_no
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.create_time is not None:
            result['createtime'] = self.create_time
        if self.modify_time is not None:
            result['modifytime'] = self.modify_time
        if self.creator_id is not None:
            result['creatorid_id'] = self.creator_id
        if self.creatorid_name is not None:
            result['creatorid_name'] = self.creatorid_name
        if self.creatorid_number is not None:
            result['creatorid_number'] = self.creatorid_number
        if self.modifier_id is not None:
            result['modifierid_id'] = self.modifier_id
        if self.modifier_name is not None:
            result['modifierid_name'] = self.modifier_name
        if self.modifier_number is not None:
            result['modifierid_number'] = self.modifier_number
        if self.auditor_id is not None:
            result['auditorid_id'] = self.auditor_id
        if self.auditor_name is not None:
            result['auditorid_name'] = self.auditor_name
        if self.auditor_number is not None:
            result['auditorid_number'] = self.auditor_number
        if self.trans_type is not None:
            result['transtype'] = self.trans_type
        if self.transfer_status is not None:
            result['transferstatus'] = self.transfer_status
        if self.remark is not None:
            result['remark'] = self.remark
        if self.dept_id is not None:
            result['deptid_id'] = self.dept_id
        if self.dept_name is not None:
            result['deptid_name'] = self.dept_name
        if self.dept_number is not None:
            result['deptid_number'] = self.dept_number
        if self.out_dept_id is not None:
            result['outdeptid_id'] = self.out_dept_id
        if self.out_dept_name is not None:
            result['outdeptid_name'] = self.out_dept_name
        if self.out_dept_number is not None:
            result['outdeptid_number'] = self.out_dept_number
        if self.delivery_type_id is not None:
            result['delivery_type_id'] = self.delivery_type_id
        if self.delivery_type_name is not None:
            result['delivery_type_name'] = self.delivery_type_name
        if self.delivery_type_number is not None:
            result['delivery_type_number'] = self.delivery_type_number
        result['material_entity'] = []
        if self.material_entity is not None:
            for k in self.material_entity:
                result['material_entity'].append(k.to_map() if k else None)
        result['express_entity'] = []
        if self.express_entity is not None:
            for k in self.express_entity:
                result['express_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billno') is not None:
            self.bill_no = m.get('billno')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('createtime') is not None:
            self.create_time = m.get('createtime')
        if m.get('modifytime') is not None:
            self.modify_time = m.get('modifytime')
        if m.get('creatorid_id') is not None:
            self.creator_id = m.get('creatorid_id')
        if m.get('creatorid_name') is not None:
            self.creatorid_name = m.get('creatorid_name')
        if m.get('creatorid_number') is not None:
            self.creatorid_number = m.get('creatorid_number')
        if m.get('modifierid_id') is not None:
            self.modifier_id = m.get('modifierid_id')
        if m.get('modifierid_name') is not None:
            self.modifier_name = m.get('modifierid_name')
        if m.get('modifierid_number') is not None:
            self.modifier_number = m.get('modifierid_number')
        if m.get('auditorid_id') is not None:
            self.auditor_id = m.get('auditorid_id')
        if m.get('auditorid_name') is not None:
            self.auditor_name = m.get('auditorid_name')
        if m.get('auditorid_number') is not None:
            self.auditor_number = m.get('auditorid_number')
        if m.get('transtype') is not None:
            self.trans_type = m.get('transtype')
        if m.get('transferstatus') is not None:
            self.transfer_status = m.get('transferstatus')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('deptid_id') is not None:
            self.dept_id = m.get('deptid_id')
        if m.get('deptid_name') is not None:
            self.dept_name = m.get('deptid_name')
        if m.get('deptid_number') is not None:
            self.dept_number = m.get('deptid_number')
        if m.get('outdeptid_id') is not None:
            self.out_dept_id = m.get('outdeptid_id')
        if m.get('outdeptid_name') is not None:
            self.out_dept_name = m.get('outdeptid_name')
        if m.get('outdeptid_number') is not None:
            self.out_dept_number = m.get('outdeptid_number')
        if m.get('delivery_type_id') is not None:
            self.delivery_type_id = m.get('delivery_type_id')
        if m.get('delivery_type_name') is not None:
            self.delivery_type_name = m.get('delivery_type_name')
        if m.get('delivery_type_number') is not None:
            self.delivery_type_number = m.get('delivery_type_number')
        self.material_entity = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = InvTfOutMaterialDetail()
                self.material_entity.append(temp_model.from_map(k))
        self.express_entity = []
        if m.get('express_entity') is not None:
            for k in m.get('express_entity'):
                temp_model = ExpressDetail()
                self.express_entity.append(temp_model.from_map(k))
        return self


class InvTfOutDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: InvTfOutDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = InvTfOutDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class InvTfDiffListRequestBody(TeaModel):
    def __init__(
        self,
        out_dept_id: List[str] = None,
        dept_id: List[str] = None,
        out_stock_id: List[str] = None,
        in_stock_id: List[str] = None,
        bill_status: str = None,
        transfer_status: str = None,
        diff_status: str = None,
        trans_type: str = None,
        start_date: str = None,
        end_date: str = None,
        search: str = None,
        dif_qty: str = None,
        page: int = None,
        page_size: int = None,
    ):
        # 调出部门id
        self.out_dept_id = out_dept_id
        # 调入部门id
        self.dept_id = dept_id
        # 调出仓id
        self.out_stock_id = out_stock_id
        # 调入仓id
        self.in_stock_id = in_stock_id
        # 单据状态（所有：“”，已审核：“C”，未审核：“Z”
        self.bill_status = bill_status
        # 调拨状态（所有：“”，未出库：“0”，未入库：“1”，部分入库：“2”，全部入库：“3”）
        self.transfer_status = transfer_status
        # 差异处理状态（所有：“”，未处理：“1”，已处理：“2”）
        self.diff_status = diff_status
        # 业务类型（所有：“”，同价调拨：“1”，异价调拨：“2”）
        self.trans_type = trans_type
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.start_date = start_date
        # 结束日期（格式：“yyyy-MM-dd”，为空表示不过滤），创建日期
        self.end_date = end_date
        # 模糊搜索，单据编码、商品名称、任务名称、仓库名称
        self.search = search
        # 调拨差异 1：入库方多收（调拨差异为正），2：入库方少收（调拨差异为负）
        self.dif_qty = dif_qty
        # 当前页（默认1）
        self.page = page
        # 每页显示条数，（默认10，最大值100）
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.out_dept_id is not None:
            result['outdeptid'] = self.out_dept_id
        if self.dept_id is not None:
            result['deptid'] = self.dept_id
        if self.out_stock_id is not None:
            result['outstockid'] = self.out_stock_id
        if self.in_stock_id is not None:
            result['instockid'] = self.in_stock_id
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.transfer_status is not None:
            result['transferstatus'] = self.transfer_status
        if self.diff_status is not None:
            result['diffstatus'] = self.diff_status
        if self.trans_type is not None:
            result['transtype'] = self.trans_type
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.search is not None:
            result['search'] = self.search
        if self.dif_qty is not None:
            result['diffqty'] = self.dif_qty
        if self.page is not None:
            result['page'] = self.page
        if self.page_size is not None:
            result['pagesize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('outdeptid') is not None:
            self.out_dept_id = m.get('outdeptid')
        if m.get('deptid') is not None:
            self.dept_id = m.get('deptid')
        if m.get('outstockid') is not None:
            self.out_stock_id = m.get('outstockid')
        if m.get('instockid') is not None:
            self.in_stock_id = m.get('instockid')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('transferstatus') is not None:
            self.transfer_status = m.get('transferstatus')
        if m.get('diffstatus') is not None:
            self.diff_status = m.get('diffstatus')
        if m.get('transtype') is not None:
            self.trans_type = m.get('transtype')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('diffqty') is not None:
            self.dif_qty = m.get('diffqty')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.page_size = m.get('pagesize')
        return self


class InvTfDiffListRequest(TeaModel):
    def __init__(
        self,
        body: InvTfDiffListRequestBody = None,
    ):
        self.body = body
        # 调拨差异单列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvTfDiffListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvTfDiffPushRequestBody(TeaModel):
    def __init__(
        self,
        type: str = None,
        data: List[InvDrawPushData] = None,
    ):
        # 处理类型（1：下推其他入库单，2：下推其他出库单）
        self.type = type
        # 处理的数据
        self.data = data

    def validate(self):
        self.validate_required(self.type, 'type')
        self.validate_required(self.data, 'data')
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.type is not None:
            result['type'] = self.type
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('type') is not None:
            self.type = m.get('type')
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = InvDrawPushData()
                self.data.append(temp_model.from_map(k))
        return self


class InvTfDiffPushRequest(TeaModel):
    def __init__(
        self,
        body: InvTfDiffPushRequestBody = None,
    ):
        self.body = body
        # 调拨差异处理

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvTfDiffPushRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class LsTfOutDealDiffData(TeaModel):
    def __init__(
        self,
        id: str = None,
        entry_id: str = None,
        qty: str = None,
        in_sp_id: str = None,
    ):
        # 调拨出库单id
        self.id = id
        # 调拨出库单分录id
        self.entry_id = entry_id
        # 入库数量
        self.qty = qty
        # 分录调入仓位id，传递时，调入仓库开启仓位且仓位在该调入仓库下，则修改为传递的仓位
        self.in_sp_id = in_sp_id

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.entry_id, 'entry_id')
        self.validate_required(self.qty, 'qty')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.entry_id is not None:
            result['entryid'] = self.entry_id
        if self.qty is not None:
            result['qty'] = self.qty
        if self.in_sp_id is not None:
            result['inspid'] = self.in_sp_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('entryid') is not None:
            self.entry_id = m.get('entryid')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('inspid') is not None:
            self.in_sp_id = m.get('inspid')
        return self


class LsTfOutDealDiffRequestBody(TeaModel):
    def __init__(
        self,
        data: List[LsTfOutDealDiffData] = None,
    ):
        # 处理的数据
        self.data = data

    def validate(self):
        self.validate_required(self.data, 'data')
        if self.data:
            for k in self.data:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['data'] = []
        if self.data is not None:
            for k in self.data:
                result['data'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.data = []
        if m.get('data') is not None:
            for k in m.get('data'):
                temp_model = LsTfOutDealDiffData()
                self.data.append(temp_model.from_map(k))
        return self


class LsTfOutDealDiffRequest(TeaModel):
    def __init__(
        self,
        body: LsTfOutDealDiffRequestBody = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = LsTfOutDealDiffRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvHomePageToDoListRequestBody(TeaModel):
    def __init__(self):
        pass

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        return self


class InvHomePageToDoListRequest(TeaModel):
    def __init__(
        self,
        body: InvHomePageToDoListRequestBody = None,
    ):
        self.body = body
        # 查询销售助手首页采购单据待办数量

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvHomePageToDoListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvDetailListRequestBody(TeaModel):
    def __init__(
        self,
        start_date: str = None,
        end_date: str = None,
        search: str = None,
        filter_stock_category: List[str] = None,
        filter_sp_id: List[str] = None,
        filter_stock_id: List[str] = None,
        filter_material_category: List[str] = None,
        filter_material_id: List[str] = None,
        filter_batch_no: List[str] = None,
        filter_dept_id: List[str] = None,
        filter_bill_type_id: List[str] = None,
        filter_audit_status: str = None,
    ):
        # 开始时间；格式：yyyy-MM-dd
        self.start_date = start_date
        # 结束时间；格式：yyyy-MM-dd
        self.end_date = end_date
        # 模糊搜索，支持商品名称
        self.search = search
        # 仓库分类id；格式：["","",""]
        self.filter_stock_category = filter_stock_category
        # 仓位id；格式：["","",""]
        self.filter_sp_id = filter_sp_id
        # 仓库id；格式：["","",""]
        self.filter_stock_id = filter_stock_id
        # 商品类别id；格式：["","",""]
        self.filter_material_category = filter_material_category
        # 商品id；格式：["","",""]
        self.filter_material_id = filter_material_id
        # 批次；格式：["","",""]
        self.filter_batch_no = filter_batch_no
        # 部门id；格式：["","",""]
        self.filter_dept_id = filter_dept_id
        # 单据类型, 详见单据类型表格；格式：["","",""]
        self.filter_bill_type_id = filter_bill_type_id
        # 调价单状态审核状态,"C"为审核，"B"为未审核，"D"为作废中
        self.filter_audit_status = filter_audit_status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.search is not None:
            result['search'] = self.search
        if self.filter_stock_category is not None:
            result['filter_stock_category'] = self.filter_stock_category
        if self.filter_sp_id is not None:
            result['filter_spid'] = self.filter_sp_id
        if self.filter_stock_id is not None:
            result['filter_stockid'] = self.filter_stock_id
        if self.filter_material_category is not None:
            result['filter_material_category'] = self.filter_material_category
        if self.filter_material_id is not None:
            result['filter_materialid'] = self.filter_material_id
        if self.filter_batch_no is not None:
            result['filter_batchno'] = self.filter_batch_no
        if self.filter_dept_id is not None:
            result['filter_deptid'] = self.filter_dept_id
        if self.filter_bill_type_id is not None:
            result['filter_billtypeid'] = self.filter_bill_type_id
        if self.filter_audit_status is not None:
            result['filter_auditstatus'] = self.filter_audit_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('filter_stock_category') is not None:
            self.filter_stock_category = m.get('filter_stock_category')
        if m.get('filter_spid') is not None:
            self.filter_sp_id = m.get('filter_spid')
        if m.get('filter_stockid') is not None:
            self.filter_stock_id = m.get('filter_stockid')
        if m.get('filter_material_category') is not None:
            self.filter_material_category = m.get('filter_material_category')
        if m.get('filter_materialid') is not None:
            self.filter_material_id = m.get('filter_materialid')
        if m.get('filter_batchno') is not None:
            self.filter_batch_no = m.get('filter_batchno')
        if m.get('filter_deptid') is not None:
            self.filter_dept_id = m.get('filter_deptid')
        if m.get('filter_billtypeid') is not None:
            self.filter_bill_type_id = m.get('filter_billtypeid')
        if m.get('filter_auditstatus') is not None:
            self.filter_audit_status = m.get('filter_auditstatus')
        return self


class InvDetailListRequest(TeaModel):
    def __init__(
        self,
        body: InvDetailListRequestBody = None,
    ):
        self.body = body
        # 商品收发明细表查询

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvDetailListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvSerialStatusListRequestBody(TeaModel):
    def __init__(
        self,
        search: str = None,
        filter_material_category: List[str] = None,
        filter_material_label: List[str] = None,
        filter_stock_id: List[str] = None,
        filter_sp_id: List[str] = None,
        filter_supplier_id: List[str] = None,
        filter_customer_id: List[str] = None,
        filter_auxprop_id: List[str] = None,
        filter_barcode: str = None,
        filter_material_model: str = None,
        filter_serial_status: str = None,
    ):
        # 模糊搜索，支持序列号和商品名称
        self.search = search
        # 商品类别id；格式：["","",""]
        self.filter_material_category = filter_material_category
        # 商品标签；格式：["","",""]
        self.filter_material_label = filter_material_label
        # 仓库id；格式：["","",""]
        self.filter_stock_id = filter_stock_id
        # 仓位id；格式：["","",""]
        self.filter_sp_id = filter_sp_id
        # 供应商；格式：["","",""]
        self.filter_supplier_id = filter_supplier_id
        # 客户；格式：["","",""]
        self.filter_customer_id = filter_customer_id
        # 辅助属性；格式：["","",""]
        self.filter_auxprop_id = filter_auxprop_id
        # 条码
        self.filter_barcode = filter_barcode
        # 规格型号
        self.filter_material_model = filter_material_model
        # 状态；全部："-1"， 出库："0"， 在库："1"， 调拨在途："2"， 待入库："3"， 待出库："4"
        self.filter_serial_status = filter_serial_status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.search is not None:
            result['search'] = self.search
        if self.filter_material_category is not None:
            result['filter_material_category'] = self.filter_material_category
        if self.filter_material_label is not None:
            result['filter_material_label'] = self.filter_material_label
        if self.filter_stock_id is not None:
            result['filter_stockid'] = self.filter_stock_id
        if self.filter_sp_id is not None:
            result['filter_spid'] = self.filter_sp_id
        if self.filter_supplier_id is not None:
            result['filter_supplierid'] = self.filter_supplier_id
        if self.filter_customer_id is not None:
            result['filter_customerid'] = self.filter_customer_id
        if self.filter_auxprop_id is not None:
            result['filter_auxpropid'] = self.filter_auxprop_id
        if self.filter_barcode is not None:
            result['filter_barcode'] = self.filter_barcode
        if self.filter_material_model is not None:
            result['filter_material_model'] = self.filter_material_model
        if self.filter_serial_status is not None:
            result['filter_serial_status'] = self.filter_serial_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('filter_material_category') is not None:
            self.filter_material_category = m.get('filter_material_category')
        if m.get('filter_material_label') is not None:
            self.filter_material_label = m.get('filter_material_label')
        if m.get('filter_stockid') is not None:
            self.filter_stock_id = m.get('filter_stockid')
        if m.get('filter_spid') is not None:
            self.filter_sp_id = m.get('filter_spid')
        if m.get('filter_supplierid') is not None:
            self.filter_supplier_id = m.get('filter_supplierid')
        if m.get('filter_customerid') is not None:
            self.filter_customer_id = m.get('filter_customerid')
        if m.get('filter_auxpropid') is not None:
            self.filter_auxprop_id = m.get('filter_auxpropid')
        if m.get('filter_barcode') is not None:
            self.filter_barcode = m.get('filter_barcode')
        if m.get('filter_material_model') is not None:
            self.filter_material_model = m.get('filter_material_model')
        if m.get('filter_serial_status') is not None:
            self.filter_serial_status = m.get('filter_serial_status')
        return self


class InvSerialStatusListRequest(TeaModel):
    def __init__(
        self,
        body: InvSerialStatusListRequestBody = None,
    ):
        self.body = body
        # 序列号商品状态查询

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvSerialStatusListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InvBatchStatusListRequestBody(TeaModel):
    def __init__(
        self,
        search: str = None,
        filter_material_category: List[str] = None,
        filter_stock_id: List[str] = None,
        filter_sp_id: List[str] = None,
        order_by: str = None,
    ):
        # 模糊搜索，支持批次、商品名称、商品编号、条码
        self.search = search
        # 商品类别id；格式：["","",""]
        self.filter_material_category = filter_material_category
        # 仓库id；格式：["","",""]
        self.filter_stock_id = filter_stock_id
        # 仓位id；格式：["","",""]
        self.filter_sp_id = filter_sp_id
        # 排序；支持：按即时库存升序：qty ASC；按即时库存降序：qty DESC
        self.order_by = order_by

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.search is not None:
            result['search'] = self.search
        if self.filter_material_category is not None:
            result['filter_material_category'] = self.filter_material_category
        if self.filter_stock_id is not None:
            result['filter_stockid'] = self.filter_stock_id
        if self.filter_sp_id is not None:
            result['filter_spid'] = self.filter_sp_id
        if self.order_by is not None:
            result['orderby'] = self.order_by
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('filter_material_category') is not None:
            self.filter_material_category = m.get('filter_material_category')
        if m.get('filter_stockid') is not None:
            self.filter_stock_id = m.get('filter_stockid')
        if m.get('filter_spid') is not None:
            self.filter_sp_id = m.get('filter_spid')
        if m.get('orderby') is not None:
            self.order_by = m.get('orderby')
        return self


class InvBatchStatusListRequest(TeaModel):
    def __init__(
        self,
        body: InvBatchStatusListRequestBody = None,
    ):
        self.body = body
        # 批次商品状态查询

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = InvBatchStatusListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveResponseData(TeaModel):
    def __init__(
        self,
        success_pk_ids: List[str] = None,
        success: bool = None,
        error_info: List[ErrorInfo] = None,
        message: str = None,
        error_level: str = None,
    ):
        self.success_pk_ids = success_pk_ids
        self.success = success
        self.error_info = error_info
        self.message = message
        self.error_level = error_level

    def validate(self):
        if self.error_info:
            for k in self.error_info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success_pk_ids is not None:
            result['successPkIds'] = self.success_pk_ids
        if self.success is not None:
            result['success'] = self.success
        result['errorInfo'] = []
        if self.error_info is not None:
            for k in self.error_info:
                result['errorInfo'].append(k.to_map() if k else None)
        if self.message is not None:
            result['message'] = self.message
        if self.error_level is not None:
            result['errorLevel'] = self.error_level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('successPkIds') is not None:
            self.success_pk_ids = m.get('successPkIds')
        if m.get('success') is not None:
            self.success = m.get('success')
        self.error_info = []
        if m.get('errorInfo') is not None:
            for k in m.get('errorInfo'):
                temp_model = ErrorInfo()
                self.error_info.append(temp_model.from_map(k))
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('errorLevel') is not None:
            self.error_level = m.get('errorLevel')
        return self


class SaveResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: SaveResponseData = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = SaveResponseData()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class ErrorInfo(TeaModel):
    def __init__(
        self,
        id: str = None,
        msg: str = None,
    ):
        self.id = id
        self.msg = msg

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.msg is not None:
            result['msg'] = self.msg
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('msg') is not None:
            self.msg = m.get('msg')
        return self


class SupplierDebitRequestBody(TeaModel):
    def __init__(
        self,
        currency: str = None,
        supplier: str = None,
    ):
        # 部门ID
        self.currency = currency
        # 供应商ID，传入则查询指定供应商的采购入库记录
        self.supplier = supplier

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.currency is not None:
            result['currencyid'] = self.currency
        if self.supplier is not None:
            result['supplierid'] = self.supplier
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('currencyid') is not None:
            self.currency = m.get('currencyid')
        if m.get('supplierid') is not None:
            self.supplier = m.get('supplierid')
        return self


class SupplierDebitRequest(TeaModel):
    def __init__(
        self,
        body: SupplierDebitRequestBody = None,
    ):
        self.body = body
        # 查询客户上次的欠款和应收款余额

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = SupplierDebitRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MaterialPurchasePriceRequestBody(TeaModel):
    def __init__(
        self,
        material: str = None,
        unit: str = None,
        bill_type: str = None,
        bill_date: str = None,
        aux_prop: str = None,
        supplier: str = None,
        qty: int = None,
    ):
        # 商品ID
        self.material = material
        # 单位ID
        self.unit = unit
        # 单据类型
        self.bill_type = bill_type
        # 单据日期，格式：2019-0-01
        self.bill_date = bill_date
        # 商品辅助属性ID
        self.aux_prop = aux_prop
        # 供应商ID，传入则查询指定供应商的采购入库记录
        self.supplier = supplier
        # 商品数量
        self.qty = qty

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.material is not None:
            result['materialid'] = self.material
        if self.unit is not None:
            result['unitid'] = self.unit
        if self.bill_type is not None:
            result['billtypeid'] = self.bill_type
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.aux_prop is not None:
            result['auxpropid'] = self.aux_prop
        if self.supplier is not None:
            result['supplierid'] = self.supplier
        if self.qty is not None:
            result['qty'] = self.qty
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('materialid') is not None:
            self.material = m.get('materialid')
        if m.get('unitid') is not None:
            self.unit = m.get('unitid')
        if m.get('billtypeid') is not None:
            self.bill_type = m.get('billtypeid')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('auxpropid') is not None:
            self.aux_prop = m.get('auxpropid')
        if m.get('supplierid') is not None:
            self.supplier = m.get('supplierid')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        return self


class MaterialPurchasePriceRequest(TeaModel):
    def __init__(
        self,
        body: MaterialPurchasePriceRequestBody = None,
    ):
        self.body = body
        # 查询商品的多种价格

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = MaterialPurchasePriceRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MaterialPurchaseRecordRequestBody(TeaModel):
    def __init__(
        self,
        material: str = None,
        bill_type: str = None,
        currency: str = None,
        aux_prop: str = None,
        supplier: str = None,
    ):
        # 商品ID
        self.material = material
        # 单据类型
        self.bill_type = bill_type
        # 部门ID
        self.currency = currency
        # 商品辅助属性ID
        self.aux_prop = aux_prop
        # 供应商ID，传入则查询指定供应商的采购入库记录
        self.supplier = supplier

    def validate(self):
        self.validate_required(self.material, 'material')
        self.validate_required(self.bill_type, 'bill_type')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.material is not None:
            result['materialid'] = self.material
        if self.bill_type is not None:
            result['billtypeid'] = self.bill_type
        if self.currency is not None:
            result['currencyid'] = self.currency
        if self.aux_prop is not None:
            result['auxpropid'] = self.aux_prop
        if self.supplier is not None:
            result['supplierid'] = self.supplier
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('materialid') is not None:
            self.material = m.get('materialid')
        if m.get('billtypeid') is not None:
            self.bill_type = m.get('billtypeid')
        if m.get('currencyid') is not None:
            self.currency = m.get('currencyid')
        if m.get('auxpropid') is not None:
            self.aux_prop = m.get('auxpropid')
        if m.get('supplierid') is not None:
            self.supplier = m.get('supplierid')
        return self


class MaterialPurchaseRecordRequest(TeaModel):
    def __init__(
        self,
        body: MaterialPurchaseRecordRequestBody = None,
    ):
        self.body = body
        # 查询商品采购记录

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = MaterialPurchaseRecordRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PurInboundListRequestBody(TeaModel):
    def __init__(
        self,
        dept: str = None,
        emp: str = None,
        supplier: str = None,
        bill_status: str = None,
        start_bill_date: str = None,
        end_bill_date: str = None,
        start_date: str = None,
        end_date: str = None,
        begin_date: str = None,
        expire_date: str = None,
        start_time: int = None,
        end_time: int = None,
        begin_time: int = None,
        expire_time: int = None,
        creator_ids: List[str] = None,
        search: str = None,
        filter_zero: str = None,
        page: int = None,
        pagesize: int = None,
        total_fields: str = None,
    ):
        # 部门ID
        self.dept = dept
        # 职员ID
        self.emp = emp
        # 供应商ID
        self.supplier = supplier
        # 单据状态（所有：“”，已审核：“C”，未审核：“Z”）
        self.bill_status = bill_status
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），单据日期
        self.start_bill_date = start_bill_date
        # 结束日期 单据日期
        self.end_bill_date = end_bill_date
        # 开始日期 创建日期
        self.start_date = start_date
        # 结束日期 创建日期
        self.end_date = end_date
        # 开始日期 修改日期
        self.begin_date = begin_date
        # 结束日期 修改日期
        self.expire_date = expire_date
        # 开始时间 创建日期
        self.start_time = start_time
        # 结束时间 创建日期
        self.end_time = end_time
        # 开始时间 修改日期
        self.begin_time = begin_time
        # 结束时间 修改日期
        self.expire_time = expire_time
        # 制单人，格式：[“制单人id”,”制单人id”]
        self.creator_ids = creator_ids
        self.search = search
        # 过滤字段值为0记录：目前仅支持totalunsettleamount
        self.filter_zero = filter_zero
        self.page = page
        self.pagesize = pagesize
        # 自定义合计字段，多个字段用英文逗号隔开，如：totalamount
        self.total_fields = total_fields

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept is not None:
            result['deptid'] = self.dept
        if self.emp is not None:
            result['empid'] = self.emp
        if self.supplier is not None:
            result['supplierid'] = self.supplier
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.start_bill_date is not None:
            result['startbilldate'] = self.start_bill_date
        if self.end_bill_date is not None:
            result['endbilldate'] = self.end_bill_date
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.begin_date is not None:
            result['begindate'] = self.begin_date
        if self.expire_date is not None:
            result['expiredate'] = self.expire_date
        if self.start_time is not None:
            result['starttime'] = self.start_time
        if self.end_time is not None:
            result['endtime'] = self.end_time
        if self.begin_time is not None:
            result['begintime'] = self.begin_time
        if self.expire_time is not None:
            result['expiretime'] = self.expire_time
        if self.creator_ids is not None:
            result['creatorid'] = self.creator_ids
        if self.search is not None:
            result['search'] = self.search
        if self.filter_zero is not None:
            result['filterzero'] = self.filter_zero
        if self.page is not None:
            result['page'] = self.page
        if self.pagesize is not None:
            result['pagesize'] = self.pagesize
        if self.total_fields is not None:
            result['totalfields'] = self.total_fields
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('deptid') is not None:
            self.dept = m.get('deptid')
        if m.get('empid') is not None:
            self.emp = m.get('empid')
        if m.get('supplierid') is not None:
            self.supplier = m.get('supplierid')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('startbilldate') is not None:
            self.start_bill_date = m.get('startbilldate')
        if m.get('endbilldate') is not None:
            self.end_bill_date = m.get('endbilldate')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('begindate') is not None:
            self.begin_date = m.get('begindate')
        if m.get('expiredate') is not None:
            self.expire_date = m.get('expiredate')
        if m.get('starttime') is not None:
            self.start_time = m.get('starttime')
        if m.get('endtime') is not None:
            self.end_time = m.get('endtime')
        if m.get('begintime') is not None:
            self.begin_time = m.get('begintime')
        if m.get('expiretime') is not None:
            self.expire_time = m.get('expiretime')
        if m.get('creatorid') is not None:
            self.creator_ids = m.get('creatorid')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('filterzero') is not None:
            self.filter_zero = m.get('filterzero')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.pagesize = m.get('pagesize')
        if m.get('totalfields') is not None:
            self.total_fields = m.get('totalfields')
        return self


class PurInboundListRequest(TeaModel):
    def __init__(
        self,
        body: PurInboundListRequestBody = None,
    ):
        self.body = body
        # 采购入库单列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = PurInboundListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PurInboundDetailRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        number: str = None,
        serial_str_format_version: str = None,
    ):
        self.id = id
        self.number = number
        # 默认：SV1 序列号数量会以字符串拼接的格式返回；SV2，序列号会以json格式返回
        self.serial_str_format_version = serial_str_format_version

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.number is not None:
            result['number'] = self.number
        if self.serial_str_format_version is not None:
            result['serialStrFormatVersion'] = self.serial_str_format_version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('number') is not None:
            self.number = m.get('number')
        if m.get('serialStrFormatVersion') is not None:
            self.serial_str_format_version = m.get('serialStrFormatVersion')
        return self


class PurInboundDetailRequest(TeaModel):
    def __init__(
        self,
        body: PurInboundDetailRequestBody = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = PurInboundDetailRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CostFeeEntry(TeaModel):
    def __init__(
        self,
        del_ids: str = None,
        fee_records: List[FeeRecords] = None,
    ):
        # 需要删除的销售费用分录ID，多个用英文逗号隔开；已经生成了其他应付单的费用不能删除，前端需要控制
        self.del_ids = del_ids
        # 销售费用分录
        self.fee_records = fee_records

    def validate(self):
        if self.fee_records:
            for k in self.fee_records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.del_ids is not None:
            result['deids'] = self.del_ids
        result['feeRecords'] = []
        if self.fee_records is not None:
            for k in self.fee_records:
                result['feeRecords'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('deids') is not None:
            self.del_ids = m.get('deids')
        self.fee_records = []
        if m.get('feeRecords') is not None:
            for k in m.get('feeRecords'):
                temp_model = FeeRecords()
                self.fee_records.append(temp_model.from_map(k))
        return self


class PurInboundDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_no: str = None,
        operation_key: str = None,
        bill_date: str = None,
        trans_type: str = None,
        remark: str = None,
        dept: str = None,
        customer: str = None,
        emp: str = None,
        supplier: str = None,
        contact: str = None,
        currency: str = None,
        exchange_rate: str = None,
        phone_for_dispatcher: str = None,
        country_for_dispatcher: str = None,
        province_for_dispatcher: str = None,
        city_for_dispatcher: str = None,
        district_for_dispatcher: str = None,
        address_for_dispatcher: str = None,
        diff_amount: str = None,
        total_amount: str = None,
        cost_fee: str = None,
        cost_fee_entries: List[CostFeeEntry] = None,
        allocate_rule: str = None,
        material_entries: List[MaterialEntry] = None,
    ):
        self.id = id
        # 单据编码
        self.bill_no = bill_no
        # 操作类型，固定取值：special_save，执行特殊保存时必填
        self.operation_key = operation_key
        # 出库日期,格式：2019-01-01
        self.bill_date = bill_date
        # 业务类型,1：限购，2：赊购，3：直运采购，4：受托入库
        self.trans_type = trans_type
        # 单据备注
        self.remark = remark
        # 部门
        self.dept = dept
        # 客户
        self.customer = customer
        # 业务员
        self.emp = emp
        # 供应商
        self.supplier = supplier
        # 联系信息
        self.contact = contact
        # 币别
        self.currency = currency
        # 汇率
        self.exchange_rate = exchange_rate
        # 发货地址-联系方式
        self.phone_for_dispatcher = phone_for_dispatcher
        # 发货地址-国家ID
        self.country_for_dispatcher = country_for_dispatcher
        # 发货地址-省ID
        self.province_for_dispatcher = province_for_dispatcher
        # 发货地址-市ID
        self.city_for_dispatcher = city_for_dispatcher
        # 发货地址-区ID
        self.district_for_dispatcher = district_for_dispatcher
        # 发货地址-详细地址
        self.address_for_dispatcher = address_for_dispatcher
        # 付款抹零
        self.diff_amount = diff_amount
        # 本单成交
        self.total_amount = total_amount
        # 销售费用
        self.cost_fee = cost_fee
        # 销售费用明细，没有则传null或不传该字段
        self.cost_fee_entries = cost_fee_entries
        # 销售费用分摊规则；”1”: 按价税合计分摊（默认）； “2”:按数量分摊
        self.allocate_rule = allocate_rule
        # 商品分录
        self.material_entries = material_entries

    def validate(self):
        self.validate_required(self.bill_date, 'bill_date')
        self.validate_required(self.trans_type, 'trans_type')
        self.validate_required(self.dept, 'dept')
        self.validate_required(self.customer, 'customer')
        if self.cost_fee_entries:
            for k in self.cost_fee_entries:
                if k:
                    k.validate()
        if self.material_entries:
            for k in self.material_entries:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_no is not None:
            result['billno'] = self.bill_no
        if self.operation_key is not None:
            result['operationkey'] = self.operation_key
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.trans_type is not None:
            result['transtype'] = self.trans_type
        if self.remark is not None:
            result['remark'] = self.remark
        if self.dept is not None:
            result['deptid_id'] = self.dept
        if self.customer is not None:
            result['customerid_id'] = self.customer
        if self.emp is not None:
            result['empid_id'] = self.emp
        if self.supplier is not None:
            result['supplierid_id'] = self.supplier
        if self.contact is not None:
            result['contact_info'] = self.contact
        if self.currency is not None:
            result['currencyid_id'] = self.currency
        if self.exchange_rate is not None:
            result['exchangerate'] = self.exchange_rate
        if self.phone_for_dispatcher is not None:
            result['contact_phone'] = self.phone_for_dispatcher
        if self.country_for_dispatcher is not None:
            result['contact_country_id'] = self.country_for_dispatcher
        if self.province_for_dispatcher is not None:
            result['contact_province_id'] = self.province_for_dispatcher
        if self.city_for_dispatcher is not None:
            result['contact_city_id'] = self.city_for_dispatcher
        if self.district_for_dispatcher is not None:
            result['contact_district_id'] = self.district_for_dispatcher
        if self.address_for_dispatcher is not None:
            result['contact_address'] = self.address_for_dispatcher
        if self.diff_amount is not None:
            result['diffamount'] = self.diff_amount
        if self.total_amount is not None:
            result['totalamount'] = self.total_amount
        if self.cost_fee is not None:
            result['cost_fee'] = self.cost_fee
        result['cost_fee_entity'] = []
        if self.cost_fee_entries is not None:
            for k in self.cost_fee_entries:
                result['cost_fee_entity'].append(k.to_map() if k else None)
        if self.allocate_rule is not None:
            result['allocate_rule'] = self.allocate_rule
        result['material_entity'] = []
        if self.material_entries is not None:
            for k in self.material_entries:
                result['material_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billno') is not None:
            self.bill_no = m.get('billno')
        if m.get('operationkey') is not None:
            self.operation_key = m.get('operationkey')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('transtype') is not None:
            self.trans_type = m.get('transtype')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('deptid_id') is not None:
            self.dept = m.get('deptid_id')
        if m.get('customerid_id') is not None:
            self.customer = m.get('customerid_id')
        if m.get('empid_id') is not None:
            self.emp = m.get('empid_id')
        if m.get('supplierid_id') is not None:
            self.supplier = m.get('supplierid_id')
        if m.get('contact_info') is not None:
            self.contact = m.get('contact_info')
        if m.get('currencyid_id') is not None:
            self.currency = m.get('currencyid_id')
        if m.get('exchangerate') is not None:
            self.exchange_rate = m.get('exchangerate')
        if m.get('contact_phone') is not None:
            self.phone_for_dispatcher = m.get('contact_phone')
        if m.get('contact_country_id') is not None:
            self.country_for_dispatcher = m.get('contact_country_id')
        if m.get('contact_province_id') is not None:
            self.province_for_dispatcher = m.get('contact_province_id')
        if m.get('contact_city_id') is not None:
            self.city_for_dispatcher = m.get('contact_city_id')
        if m.get('contact_district_id') is not None:
            self.district_for_dispatcher = m.get('contact_district_id')
        if m.get('contact_address') is not None:
            self.address_for_dispatcher = m.get('contact_address')
        if m.get('diffamount') is not None:
            self.diff_amount = m.get('diffamount')
        if m.get('totalamount') is not None:
            self.total_amount = m.get('totalamount')
        if m.get('cost_fee') is not None:
            self.cost_fee = m.get('cost_fee')
        self.cost_fee_entries = []
        if m.get('cost_fee_entity') is not None:
            for k in m.get('cost_fee_entity'):
                temp_model = CostFeeEntry()
                self.cost_fee_entries.append(temp_model.from_map(k))
        if m.get('allocate_rule') is not None:
            self.allocate_rule = m.get('allocate_rule')
        self.material_entries = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = MaterialEntry()
                self.material_entries.append(temp_model.from_map(k))
        return self


class PurInboundDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: PurInboundDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = PurInboundDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class PurInboundSaveRequest(TeaModel):
    def __init__(
        self,
        body: PurInboundDetail = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = PurInboundDetail()
            self.body = temp_model.from_map(m['body'])
        return self


class FeeRecords(TeaModel):
    def __init__(
        self,
        id: str = None,
        supplier: str = None,
        pay_type: str = None,
        amount: str = None,
        amountfor: str = None,
        cess: str = None,
        tax_amount: str = None,
        all_amount: str = None,
        all_amount_for: str = None,
        currency: str = None,
        exchange_rate: str = None,
        linked_bill_no: str = None,
        comment: str = None,
        receive_entry: List[ReceiveInfo] = None,
    ):
        self.id = id
        # 供应商，当付款金额合计等于费用时为非必填项
        self.supplier = supplier
        # 支出类型
        self.pay_type = pay_type
        # 费用
        self.amount = amount
        # 费用本位币
        self.amountfor = amountfor
        # 税率
        self.cess = cess
        # 税额
        self.tax_amount = tax_amount
        # 价税合计
        self.all_amount = all_amount
        # 价税合计本位币
        self.all_amount_for = all_amount_for
        # 币别id
        self.currency = currency
        # 汇率
        self.exchange_rate = exchange_rate
        # 生成的其他应付单号
        self.linked_bill_no = linked_bill_no
        # 备注
        self.comment = comment
        # 付款信息单据体
        self.receive_entry = receive_entry

    def validate(self):
        self.validate_required(self.all_amount_for, 'all_amount_for')
        if self.receive_entry:
            for k in self.receive_entry:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.supplier is not None:
            result['supplierid_id'] = self.supplier
        if self.pay_type is not None:
            result['paccttypeid_id'] = self.pay_type
        if self.amount is not None:
            result['amount'] = self.amount
        if self.amountfor is not None:
            result['amountfor'] = self.amountfor
        if self.cess is not None:
            result['cess'] = self.cess
        if self.tax_amount is not None:
            result['taxamount'] = self.tax_amount
        if self.all_amount is not None:
            result['allamount'] = self.all_amount
        if self.all_amount_for is not None:
            result['allamountfor'] = self.all_amount_for
        if self.currency is not None:
            result['currencyid_id'] = self.currency
        if self.exchange_rate is not None:
            result['exchangerate'] = self.exchange_rate
        if self.linked_bill_no is not None:
            result['linkedbillno'] = self.linked_bill_no
        if self.comment is not None:
            result['comment'] = self.comment
        result['receive_info_entity'] = []
        if self.receive_entry is not None:
            for k in self.receive_entry:
                result['receive_info_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('supplierid_id') is not None:
            self.supplier = m.get('supplierid_id')
        if m.get('paccttypeid_id') is not None:
            self.pay_type = m.get('paccttypeid_id')
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('amountfor') is not None:
            self.amountfor = m.get('amountfor')
        if m.get('cess') is not None:
            self.cess = m.get('cess')
        if m.get('taxamount') is not None:
            self.tax_amount = m.get('taxamount')
        if m.get('allamount') is not None:
            self.all_amount = m.get('allamount')
        if m.get('allamountfor') is not None:
            self.all_amount_for = m.get('allamountfor')
        if m.get('currencyid_id') is not None:
            self.currency = m.get('currencyid_id')
        if m.get('exchangerate') is not None:
            self.exchange_rate = m.get('exchangerate')
        if m.get('linkedbillno') is not None:
            self.linked_bill_no = m.get('linkedbillno')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        self.receive_entry = []
        if m.get('receive_info_entity') is not None:
            for k in m.get('receive_info_entity'):
                temp_model = ReceiveInfo()
                self.receive_entry.append(temp_model.from_map(k))
        return self


class ReceiveInfo(TeaModel):
    def __init__(
        self,
        settle_account: str = None,
        pany_type: str = None,
        amount: str = None,
    ):
        # 付款账户id
        self.settle_account = settle_account
        # 付款方式id
        self.pany_type = pany_type
        # 付款金额
        self.amount = amount

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.settle_account is not None:
            result['settleaccountid_id'] = self.settle_account
        if self.pany_type is not None:
            result['paytypeid_id'] = self.pany_type
        if self.amount is not None:
            result['receive_amount'] = self.amount
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('settleaccountid_id') is not None:
            self.settle_account = m.get('settleaccountid_id')
        if m.get('paytypeid_id') is not None:
            self.pany_type = m.get('paytypeid_id')
        if m.get('receive_amount') is not None:
            self.amount = m.get('receive_amount')
        return self


class MaterialEntry(TeaModel):
    def __init__(
        self,
        id: str = None,
        material: str = None,
        stock: str = None,
        sp_id: str = None,
        qty: str = None,
        unit: str = None,
        aux_prop: str = None,
        bar_code: str = None,
        batch_no: str = None,
        product_place: str = None,
        product_register_no: str = None,
        product_license: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_type: str = None,
        kf_period: str = None,
        sn_list_id: str = None,
        sn_list: str = None,
        price: str = None,
        tax_price: str = None,
        cess: str = None,
        tax_amount: str = None,
        all_amount: str = None,
        dis_rate: str = None,
        discount: str = None,
        dis_amount: str = None,
        dis_price: str = None,
        amount: str = None,
        all_amount_before_discount: str = None,
        actual_tax_price: str = None,
        distribution_discount_for_bill: str = None,
        actual_no_tax_amount: str = None,
        fee: str = None,
        allocate_discount_amount: str = None,
        is_free: str = None,
        current_settle_amount: str = None,
        all_amount_for: str = None,
        cost: str = None,
        unit_cost: str = None,
        comment: str = None,
        src_bill_no: str = None,
        src_bill_type: str = None,
        src_inter_id: str = None,
        src_bill_date: str = None,
        src_seq: str = None,
        src_entryid: str = None,
    ):
        self.id = id
        # 商品
        self.material = material
        # 仓库
        self.stock = stock
        # 仓位，启用了仓位管理则必填
        self.sp_id = sp_id
        # 数量
        self.qty = qty
        # 单位
        self.unit = unit
        # 辅助属性；辅助属性商品必填
        self.aux_prop = aux_prop
        # 条形码
        self.bar_code = bar_code
        # 批次号 (批次商品必填)
        self.batch_no = batch_no
        # 产地
        self.product_place = product_place
        # 注册证号
        self.product_register_no = product_register_no
        # 生产许可证号
        self.product_license = product_license
        # 生产日期
        self.kf_date = kf_date
        # 有效日期
        self.valid_date = valid_date
        # 保质期类型，1：天，2：月，3：年
        self.kf_type = kf_type
        # 保质期天数
        self.kf_period = kf_period
        # 序列号流转id；单据新增后会在单据详情中带回这个字段信息，序列号商品修改时必填
        self.sn_list_id = sn_list_id
        # 序列号 格式：001:备注1;002:备注2 （序列号:序列号备注 多个序列号以英文分号字符;分隔）,序列号商品必填
        self.sn_list = sn_list
        # 单价
        self.price = price
        self.tax_price = tax_price
        # 商品增值税税率；不传后端自取，传入则以传入为准
        self.cess = cess
        # 商品税额
        self.tax_amount = tax_amount
        # 价税合计
        self.all_amount = all_amount
        # 折扣率
        self.dis_rate = dis_rate
        # 折扣（折）
        self.discount = discount
        # 折扣额
        self.dis_amount = dis_amount
        # 折扣单价
        self.dis_price = dis_price
        # 折后金额
        self.amount = amount
        # 整单折前价税合计
        self.all_amount_before_discount = all_amount_before_discount
        # 实际含税单价
        self.actual_tax_price = actual_tax_price
        # 整单折扣分配额
        self.distribution_discount_for_bill = distribution_discount_for_bill
        # 实际不含税金额
        self.actual_no_tax_amount = actual_no_tax_amount
        # 采购费用分摊
        self.fee = fee
        # 优惠分摊金额
        self.allocate_discount_amount = allocate_discount_amount
        # 是否赠品
        self.is_free = is_free
        # 本次核销金额
        self.current_settle_amount = current_settle_amount
        # 价税合计本位币
        self.all_amount_for = all_amount_for
        # 入库成本
        self.cost = cost
        # 入库单位成本
        self.unit_cost = unit_cost
        # 商品行备注
        self.comment = comment
        # 源单编码
        self.src_bill_no = src_bill_no
        # 源单类型
        self.src_bill_type = src_bill_type
        # 源单内码
        self.src_inter_id = src_inter_id
        # 源单日期
        self.src_bill_date = src_bill_date
        # 源单行号
        self.src_seq = src_seq
        # 源单分录内码
        self.src_entryid = src_entryid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.material is not None:
            result['materialid_id'] = self.material
        if self.stock is not None:
            result['stockid_id'] = self.stock
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.qty is not None:
            result['qty'] = self.qty
        if self.unit is not None:
            result['unit_id'] = self.unit
        if self.aux_prop is not None:
            result['auxpropid_id'] = self.aux_prop
        if self.bar_code is not None:
            result['barcode'] = self.bar_code
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.product_place is not None:
            result['proplace'] = self.product_place
        if self.product_register_no is not None:
            result['proregno'] = self.product_register_no
        if self.product_license is not None:
            result['prolicense'] = self.product_license
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.sn_list is not None:
            result['sn_list'] = self.sn_list
        if self.price is not None:
            result['price'] = self.price
        if self.tax_price is not None:
            result['taxprice'] = self.tax_price
        if self.cess is not None:
            result['cess'] = self.cess
        if self.tax_amount is not None:
            result['taxamount'] = self.tax_amount
        if self.all_amount is not None:
            result['allamount'] = self.all_amount
        if self.dis_rate is not None:
            result['disrate'] = self.dis_rate
        if self.discount is not None:
            result['discount'] = self.discount
        if self.dis_amount is not None:
            result['disamount'] = self.dis_amount
        if self.dis_price is not None:
            result['disprice'] = self.dis_price
        if self.amount is not None:
            result['amount'] = self.amount
        if self.all_amount_before_discount is not None:
            result['billdisbeforeamount'] = self.all_amount_before_discount
        if self.actual_tax_price is not None:
            result['acttaxprice'] = self.actual_tax_price
        if self.distribution_discount_for_bill is not None:
            result['billdisdistribution'] = self.distribution_discount_for_bill
        if self.actual_no_tax_amount is not None:
            result['actnontaxamount'] = self.actual_no_tax_amount
        if self.fee is not None:
            result['fee'] = self.fee
        if self.allocate_discount_amount is not None:
            result['dividediffamount'] = self.allocate_discount_amount
        if self.is_free is not None:
            result['is_free'] = self.is_free
        if self.current_settle_amount is not None:
            result['cursettleamount'] = self.current_settle_amount
        if self.all_amount_for is not None:
            result['allamountfor'] = self.all_amount_for
        if self.cost is not None:
            result['cost'] = self.cost
        if self.unit_cost is not None:
            result['unitcost'] = self.unit_cost
        if self.comment is not None:
            result['comment'] = self.comment
        if self.src_bill_no is not None:
            result['srcbillno'] = self.src_bill_no
        if self.src_bill_type is not None:
            result['srcbilltypeid_id'] = self.src_bill_type
        if self.src_inter_id is not None:
            result['srcinterid'] = self.src_inter_id
        if self.src_bill_date is not None:
            result['src_billdate'] = self.src_bill_date
        if self.src_seq is not None:
            result['srcseq'] = self.src_seq
        if self.src_entryid is not None:
            result['srcentryid'] = self.src_entryid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('materialid_id') is not None:
            self.material = m.get('materialid_id')
        if m.get('stockid_id') is not None:
            self.stock = m.get('stockid_id')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('unit_id') is not None:
            self.unit = m.get('unit_id')
        if m.get('auxpropid_id') is not None:
            self.aux_prop = m.get('auxpropid_id')
        if m.get('barcode') is not None:
            self.bar_code = m.get('barcode')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.product_place = m.get('proplace')
        if m.get('proregno') is not None:
            self.product_register_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.product_license = m.get('prolicense')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('sn_list') is not None:
            self.sn_list = m.get('sn_list')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('taxprice') is not None:
            self.tax_price = m.get('taxprice')
        if m.get('cess') is not None:
            self.cess = m.get('cess')
        if m.get('taxamount') is not None:
            self.tax_amount = m.get('taxamount')
        if m.get('allamount') is not None:
            self.all_amount = m.get('allamount')
        if m.get('disrate') is not None:
            self.dis_rate = m.get('disrate')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('disamount') is not None:
            self.dis_amount = m.get('disamount')
        if m.get('disprice') is not None:
            self.dis_price = m.get('disprice')
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('billdisbeforeamount') is not None:
            self.all_amount_before_discount = m.get('billdisbeforeamount')
        if m.get('acttaxprice') is not None:
            self.actual_tax_price = m.get('acttaxprice')
        if m.get('billdisdistribution') is not None:
            self.distribution_discount_for_bill = m.get('billdisdistribution')
        if m.get('actnontaxamount') is not None:
            self.actual_no_tax_amount = m.get('actnontaxamount')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        if m.get('dividediffamount') is not None:
            self.allocate_discount_amount = m.get('dividediffamount')
        if m.get('is_free') is not None:
            self.is_free = m.get('is_free')
        if m.get('cursettleamount') is not None:
            self.current_settle_amount = m.get('cursettleamount')
        if m.get('allamountfor') is not None:
            self.all_amount_for = m.get('allamountfor')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('unitcost') is not None:
            self.unit_cost = m.get('unitcost')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('srcbillno') is not None:
            self.src_bill_no = m.get('srcbillno')
        if m.get('srcbilltypeid_id') is not None:
            self.src_bill_type = m.get('srcbilltypeid_id')
        if m.get('srcinterid') is not None:
            self.src_inter_id = m.get('srcinterid')
        if m.get('src_billdate') is not None:
            self.src_bill_date = m.get('src_billdate')
        if m.get('srcseq') is not None:
            self.src_seq = m.get('srcseq')
        if m.get('srcentryid') is not None:
            self.src_entryid = m.get('srcentryid')
        return self


class SupplierDebitBalanceRequestBody(TeaModel):
    def __init__(
        self,
        customer: str = None,
        currency: str = None,
    ):
        # 客户id
        self.customer = customer
        # 币别id，默认本位币
        self.currency = currency

    def validate(self):
        self.validate_required(self.customer, 'customer')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customer is not None:
            result['customerid'] = self.customer
        if self.currency is not None:
            result['currencyid'] = self.currency
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('customerid') is not None:
            self.customer = m.get('customerid')
        if m.get('currencyid') is not None:
            self.currency = m.get('currencyid')
        return self


class SupplierDebitBalanceRequest(TeaModel):
    def __init__(
        self,
        body: SupplierDebitBalanceRequestBody = None,
    ):
        self.body = body
        # 查询采购可抵扣预付款余额

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = SupplierDebitBalanceRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RequestOrderListRequestBody(TeaModel):
    def __init__(
        self,
        dept: str = None,
        emp: str = None,
        bill_status: str = None,
        start_date: str = None,
        end_date: str = None,
        begin_date: str = None,
        expire_date: str = None,
        start_time: int = None,
        end_time: int = None,
        begin_time: int = None,
        expire_time: int = None,
        purchase_status: int = None,
        bill_close_state: int = None,
        creator_ids: List[str] = None,
        search: str = None,
        page: int = None,
        pagesize: int = None,
        select_fields: str = None,
        order_by: str = None,
        top: int = None,
        total_fields: str = None,
        show_material_total: str = None,
    ):
        # 部门ID
        self.dept = dept
        # 职员ID
        self.emp = emp
        # 单据状态（所有：“”，已审核：“C”，未审核：“Z”）
        self.bill_status = bill_status
        # 开始日期 创建日期
        self.start_date = start_date
        # 结束日期 创建日期
        self.end_date = end_date
        # 开始日期 修改日期
        self.begin_date = begin_date
        # 结束日期 修改日期
        self.expire_date = expire_date
        # 开始时间 创建日期
        self.start_time = start_time
        # 结束时间 创建日期
        self.end_time = end_time
        # 开始时间 修改日期
        self.begin_time = begin_time
        # 结束时间 修改日期
        self.expire_time = expire_time
        # 采购状态（所有：“”，全部采购：“A”，部分采购：“P”，未采购：“N”，（新增一个采购状态 B：待采购，它等于未采购+部分采购））
        self.purchase_status = purchase_status
        # 单据关闭状态（所有：“”，未关闭：“C”，已关闭：“S”,手动关闭: "H"）
        self.bill_close_state = bill_close_state
        # 制单人，格式：[“制单人id”,”制单人id”]
        self.creator_ids = creator_ids
        self.search = search
        self.page = page
        self.pagesize = pagesize
        self.select_fields = select_fields
        self.order_by = order_by
        self.top = top
        # 自定义合计字段，多个字段用英文逗号隔开，如：totalamount
        self.total_fields = total_fields
        # 是否统计商品种类和申请数量、批准数量、单据价税合计到单据，默认false
        self.show_material_total = show_material_total

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept is not None:
            result['deptid'] = self.dept
        if self.emp is not None:
            result['empid'] = self.emp
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.begin_date is not None:
            result['begindate'] = self.begin_date
        if self.expire_date is not None:
            result['expiredate'] = self.expire_date
        if self.start_time is not None:
            result['starttime'] = self.start_time
        if self.end_time is not None:
            result['endtime'] = self.end_time
        if self.begin_time is not None:
            result['begintime'] = self.begin_time
        if self.expire_time is not None:
            result['expiretime'] = self.expire_time
        if self.purchase_status is not None:
            result['purchasestatus'] = self.purchase_status
        if self.bill_close_state is not None:
            result['billclosestate'] = self.bill_close_state
        if self.creator_ids is not None:
            result['creatorid'] = self.creator_ids
        if self.search is not None:
            result['search'] = self.search
        if self.page is not None:
            result['page'] = self.page
        if self.pagesize is not None:
            result['pagesize'] = self.pagesize
        if self.select_fields is not None:
            result['selectfields'] = self.select_fields
        if self.order_by is not None:
            result['orderby'] = self.order_by
        if self.top is not None:
            result['top'] = self.top
        if self.total_fields is not None:
            result['totalfields'] = self.total_fields
        if self.show_material_total is not None:
            result['showmaterialtotal'] = self.show_material_total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('deptid') is not None:
            self.dept = m.get('deptid')
        if m.get('empid') is not None:
            self.emp = m.get('empid')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('begindate') is not None:
            self.begin_date = m.get('begindate')
        if m.get('expiredate') is not None:
            self.expire_date = m.get('expiredate')
        if m.get('starttime') is not None:
            self.start_time = m.get('starttime')
        if m.get('endtime') is not None:
            self.end_time = m.get('endtime')
        if m.get('begintime') is not None:
            self.begin_time = m.get('begintime')
        if m.get('expiretime') is not None:
            self.expire_time = m.get('expiretime')
        if m.get('purchasestatus') is not None:
            self.purchase_status = m.get('purchasestatus')
        if m.get('billclosestate') is not None:
            self.bill_close_state = m.get('billclosestate')
        if m.get('creatorid') is not None:
            self.creator_ids = m.get('creatorid')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.pagesize = m.get('pagesize')
        if m.get('selectfields') is not None:
            self.select_fields = m.get('selectfields')
        if m.get('orderby') is not None:
            self.order_by = m.get('orderby')
        if m.get('top') is not None:
            self.top = m.get('top')
        if m.get('totalfields') is not None:
            self.total_fields = m.get('totalfields')
        if m.get('showmaterialtotal') is not None:
            self.show_material_total = m.get('showmaterialtotal')
        return self


class RequestOrderListRequest(TeaModel):
    def __init__(
        self,
        body: RequestOrderListRequestBody = None,
    ):
        self.body = body
        # 采购申请单列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = RequestOrderListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RequestOrderDetailRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        number: str = None,
    ):
        self.id = id
        self.number = number

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.number is not None:
            result['number'] = self.number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('number') is not None:
            self.number = m.get('number')
        return self


class RequestOrderDetailRequest(TeaModel):
    def __init__(
        self,
        body: RequestOrderDetailRequestBody = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = RequestOrderDetailRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RequestOrderMaterialEntry(TeaModel):
    def __init__(
        self,
        id: str = None,
        material: str = None,
        stock: str = None,
        sp_id: str = None,
        apply_qty: str = None,
        qty: str = None,
        supplier: str = None,
        delivery_date: str = None,
        unit: str = None,
        aux_prop: str = None,
        bar_code: str = None,
        batch_no: str = None,
        product_place: str = None,
        product_register_no: str = None,
        product_license: str = None,
        price: str = None,
        tax_price: str = None,
        cess: str = None,
        tax_amount: str = None,
        all_amount: str = None,
        pre_disamount: str = None,
        dis_amount: str = None,
        discount: str = None,
        dis_rate: str = None,
        dis_price: str = None,
        amount: str = None,
        all_amount_before_discount: str = None,
        actual_tax_price: str = None,
        distribution_discount_for_bill: str = None,
        actual_no_tax_amount: str = None,
        comment: str = None,
        src_bill_no: str = None,
        src_bill_type: str = None,
        src_inter_id: str = None,
        src_bill_date: str = None,
        src_seq: str = None,
        src_entryid: str = None,
    ):
        self.id = id
        # 商品
        self.material = material
        # 仓库
        self.stock = stock
        # 仓位，启用了仓位管理则必填
        self.sp_id = sp_id
        # 申请数量
        self.apply_qty = apply_qty
        # 数量
        self.qty = qty
        # 分录建议供应商
        self.supplier = supplier
        # 交货日期
        self.delivery_date = delivery_date
        # 单位
        self.unit = unit
        # 辅助属性；辅助属性商品必填
        self.aux_prop = aux_prop
        # 条形码
        self.bar_code = bar_code
        # 批次号 (批次商品必填)
        self.batch_no = batch_no
        # 产地
        self.product_place = product_place
        # 注册证号
        self.product_register_no = product_register_no
        # 生产许可证号
        self.product_license = product_license
        # 单价
        self.price = price
        self.tax_price = tax_price
        # 商品增值税税率；不传后端自取，传入则以传入为准
        self.cess = cess
        # 商品税额
        self.tax_amount = tax_amount
        # 价税合计
        self.all_amount = all_amount
        # 折前金额
        self.pre_disamount = pre_disamount
        # 折扣额
        self.dis_amount = dis_amount
        # 折扣（折）
        self.discount = discount
        # 折扣率
        self.dis_rate = dis_rate
        # 折扣单价
        self.dis_price = dis_price
        # 折后金额
        self.amount = amount
        # 整单折前价税合计
        self.all_amount_before_discount = all_amount_before_discount
        # 实际含税单价
        self.actual_tax_price = actual_tax_price
        # 整单折扣分配额
        self.distribution_discount_for_bill = distribution_discount_for_bill
        # 实际不含税金额
        self.actual_no_tax_amount = actual_no_tax_amount
        # 商品行备注
        self.comment = comment
        # 源单编码
        self.src_bill_no = src_bill_no
        # 源单类型
        self.src_bill_type = src_bill_type
        # 源单内码
        self.src_inter_id = src_inter_id
        # 源单日期
        self.src_bill_date = src_bill_date
        # 源单行号
        self.src_seq = src_seq
        # 源单分录内码
        self.src_entryid = src_entryid

    def validate(self):
        self.validate_required(self.material, 'material')
        self.validate_required(self.stock, 'stock')
        self.validate_required(self.price, 'price')
        self.validate_required(self.tax_price, 'tax_price')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.material is not None:
            result['materialid_id'] = self.material
        if self.stock is not None:
            result['stockid_id'] = self.stock
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.apply_qty is not None:
            result['applyqty'] = self.apply_qty
        if self.qty is not None:
            result['qty'] = self.qty
        if self.supplier is not None:
            result['supplierid_id'] = self.supplier
        if self.delivery_date is not None:
            result['deliverydate'] = self.delivery_date
        if self.unit is not None:
            result['unit_id'] = self.unit
        if self.aux_prop is not None:
            result['auxpropid_id'] = self.aux_prop
        if self.bar_code is not None:
            result['barcode'] = self.bar_code
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.product_place is not None:
            result['proplace'] = self.product_place
        if self.product_register_no is not None:
            result['proregno'] = self.product_register_no
        if self.product_license is not None:
            result['prolicense'] = self.product_license
        if self.price is not None:
            result['price'] = self.price
        if self.tax_price is not None:
            result['taxprice'] = self.tax_price
        if self.cess is not None:
            result['cess'] = self.cess
        if self.tax_amount is not None:
            result['taxamount'] = self.tax_amount
        if self.all_amount is not None:
            result['allamount'] = self.all_amount
        if self.pre_disamount is not None:
            result['predisamount'] = self.pre_disamount
        if self.dis_amount is not None:
            result['disamount'] = self.dis_amount
        if self.discount is not None:
            result['discount'] = self.discount
        if self.dis_rate is not None:
            result['disrate'] = self.dis_rate
        if self.dis_price is not None:
            result['disprice'] = self.dis_price
        if self.amount is not None:
            result['amount'] = self.amount
        if self.all_amount_before_discount is not None:
            result['billdisbeforeamount'] = self.all_amount_before_discount
        if self.actual_tax_price is not None:
            result['acttaxprice'] = self.actual_tax_price
        if self.distribution_discount_for_bill is not None:
            result['billdisdistribution'] = self.distribution_discount_for_bill
        if self.actual_no_tax_amount is not None:
            result['actnontaxamount'] = self.actual_no_tax_amount
        if self.comment is not None:
            result['comment'] = self.comment
        if self.src_bill_no is not None:
            result['srcbillno'] = self.src_bill_no
        if self.src_bill_type is not None:
            result['srcbilltypeid_id'] = self.src_bill_type
        if self.src_inter_id is not None:
            result['srcinterid'] = self.src_inter_id
        if self.src_bill_date is not None:
            result['src_billdate'] = self.src_bill_date
        if self.src_seq is not None:
            result['srcseq'] = self.src_seq
        if self.src_entryid is not None:
            result['srcentryid'] = self.src_entryid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('materialid_id') is not None:
            self.material = m.get('materialid_id')
        if m.get('stockid_id') is not None:
            self.stock = m.get('stockid_id')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('applyqty') is not None:
            self.apply_qty = m.get('applyqty')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('supplierid_id') is not None:
            self.supplier = m.get('supplierid_id')
        if m.get('deliverydate') is not None:
            self.delivery_date = m.get('deliverydate')
        if m.get('unit_id') is not None:
            self.unit = m.get('unit_id')
        if m.get('auxpropid_id') is not None:
            self.aux_prop = m.get('auxpropid_id')
        if m.get('barcode') is not None:
            self.bar_code = m.get('barcode')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.product_place = m.get('proplace')
        if m.get('proregno') is not None:
            self.product_register_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.product_license = m.get('prolicense')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('taxprice') is not None:
            self.tax_price = m.get('taxprice')
        if m.get('cess') is not None:
            self.cess = m.get('cess')
        if m.get('taxamount') is not None:
            self.tax_amount = m.get('taxamount')
        if m.get('allamount') is not None:
            self.all_amount = m.get('allamount')
        if m.get('predisamount') is not None:
            self.pre_disamount = m.get('predisamount')
        if m.get('disamount') is not None:
            self.dis_amount = m.get('disamount')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('disrate') is not None:
            self.dis_rate = m.get('disrate')
        if m.get('disprice') is not None:
            self.dis_price = m.get('disprice')
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('billdisbeforeamount') is not None:
            self.all_amount_before_discount = m.get('billdisbeforeamount')
        if m.get('acttaxprice') is not None:
            self.actual_tax_price = m.get('acttaxprice')
        if m.get('billdisdistribution') is not None:
            self.distribution_discount_for_bill = m.get('billdisdistribution')
        if m.get('actnontaxamount') is not None:
            self.actual_no_tax_amount = m.get('actnontaxamount')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('srcbillno') is not None:
            self.src_bill_no = m.get('srcbillno')
        if m.get('srcbilltypeid_id') is not None:
            self.src_bill_type = m.get('srcbilltypeid_id')
        if m.get('srcinterid') is not None:
            self.src_inter_id = m.get('srcinterid')
        if m.get('src_billdate') is not None:
            self.src_bill_date = m.get('src_billdate')
        if m.get('srcseq') is not None:
            self.src_seq = m.get('srcseq')
        if m.get('srcentryid') is not None:
            self.src_entryid = m.get('srcentryid')
        return self


class RequestOrderDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_no: str = None,
        bill_date: str = None,
        supplier: str = None,
        remark: str = None,
        dept: str = None,
        emp: str = None,
        address_for_contact: str = None,
        link_man_for_dispatcher: str = None,
        phone_for_dispatcher: str = None,
        country_for_dispatcher: str = None,
        province_for_dispatcher: str = None,
        city_for_dispatcher: str = None,
        district_for_dispatcher: str = None,
        address_for_dispatcher: str = None,
        material_entries: List[RequestOrderMaterialEntry] = None,
        attachments: List[str] = None,
    ):
        self.id = id
        # 单据编码
        self.bill_no = bill_no
        # 出库日期,格式：2019-01-01
        self.bill_date = bill_date
        # 建议供应商
        self.supplier = supplier
        # 单据备注
        self.remark = remark
        # 部门
        self.dept = dept
        # 业务员
        self.emp = emp
        # 联系信息-详细地址
        self.address_for_contact = address_for_contact
        # 收货地址-联系人
        self.link_man_for_dispatcher = link_man_for_dispatcher
        # 收货地址-联系方式
        self.phone_for_dispatcher = phone_for_dispatcher
        # 收货地址-国家ID
        self.country_for_dispatcher = country_for_dispatcher
        # 收货地址-省ID
        self.province_for_dispatcher = province_for_dispatcher
        # 收货地址-市ID
        self.city_for_dispatcher = city_for_dispatcher
        # 收货地址-区ID
        self.district_for_dispatcher = district_for_dispatcher
        # 收货地址-详细地址
        self.address_for_dispatcher = address_for_dispatcher
        # 商品分录
        self.material_entries = material_entries
        # 上传的附件url
        self.attachments = attachments

    def validate(self):
        if self.material_entries:
            for k in self.material_entries:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_no is not None:
            result['billno'] = self.bill_no
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.supplier is not None:
            result['wholesupplierid_id'] = self.supplier
        if self.remark is not None:
            result['remark'] = self.remark
        if self.dept is not None:
            result['deptid_id'] = self.dept
        if self.emp is not None:
            result['empid_id'] = self.emp
        if self.address_for_contact is not None:
            result['contact_address'] = self.address_for_contact
        if self.link_man_for_dispatcher is not None:
            result['dispatcher_linkman'] = self.link_man_for_dispatcher
        if self.phone_for_dispatcher is not None:
            result['contact_phone'] = self.phone_for_dispatcher
        if self.country_for_dispatcher is not None:
            result['contact_country_id'] = self.country_for_dispatcher
        if self.province_for_dispatcher is not None:
            result['contact_province_id'] = self.province_for_dispatcher
        if self.city_for_dispatcher is not None:
            result['contact_city_id'] = self.city_for_dispatcher
        if self.district_for_dispatcher is not None:
            result['contact_district_id'] = self.district_for_dispatcher
        if self.address_for_dispatcher is not None:
            result['contact_address'] = self.address_for_dispatcher
        result['material_entity'] = []
        if self.material_entries is not None:
            for k in self.material_entries:
                result['material_entity'].append(k.to_map() if k else None)
        if self.attachments is not None:
            result['attachments_url'] = self.attachments
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billno') is not None:
            self.bill_no = m.get('billno')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('wholesupplierid_id') is not None:
            self.supplier = m.get('wholesupplierid_id')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('deptid_id') is not None:
            self.dept = m.get('deptid_id')
        if m.get('empid_id') is not None:
            self.emp = m.get('empid_id')
        if m.get('contact_address') is not None:
            self.address_for_contact = m.get('contact_address')
        if m.get('dispatcher_linkman') is not None:
            self.link_man_for_dispatcher = m.get('dispatcher_linkman')
        if m.get('contact_phone') is not None:
            self.phone_for_dispatcher = m.get('contact_phone')
        if m.get('contact_country_id') is not None:
            self.country_for_dispatcher = m.get('contact_country_id')
        if m.get('contact_province_id') is not None:
            self.province_for_dispatcher = m.get('contact_province_id')
        if m.get('contact_city_id') is not None:
            self.city_for_dispatcher = m.get('contact_city_id')
        if m.get('contact_district_id') is not None:
            self.district_for_dispatcher = m.get('contact_district_id')
        if m.get('contact_address') is not None:
            self.address_for_dispatcher = m.get('contact_address')
        self.material_entries = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = RequestOrderMaterialEntry()
                self.material_entries.append(temp_model.from_map(k))
        if m.get('attachments_url') is not None:
            self.attachments = m.get('attachments_url')
        return self


class RequestOrderDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: RequestOrderDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = RequestOrderDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class RequestOrderRequest(TeaModel):
    def __init__(
        self,
        body: RequestOrderDetail = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = RequestOrderDetail()
            self.body = temp_model.from_map(m['body'])
        return self


class PurchaseOperateRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_type: str = None,
        operate: str = None,
    ):
        self.id = id
        # 单据类型
        self.bill_type = bill_type
        # 操作类型，传固定值 删除-delete,审核-audit,反审核-unaudit
        self.operate = operate

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.bill_type, 'bill_type')
        self.validate_required(self.operate, 'operate')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_type is not None:
            result['billtypeid'] = self.bill_type
        if self.operate is not None:
            result['operatetype'] = self.operate
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billtypeid') is not None:
            self.bill_type = m.get('billtypeid')
        if m.get('operatetype') is not None:
            self.operate = m.get('operatetype')
        return self


class PurchaseOperateRequest(TeaModel):
    def __init__(
        self,
        body: PurchaseOperateRequestBody = None,
    ):
        self.body = body
        # 采购类单据操作

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = PurchaseOperateRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PurchaseOrderListRequestBody(TeaModel):
    def __init__(
        self,
        dept: str = None,
        emp: str = None,
        bill_status: str = None,
        bill_close_state: str = None,
        start_date: str = None,
        end_date: str = None,
        begin_date: str = None,
        expire_date: str = None,
        start_time: int = None,
        end_time: int = None,
        begin_time: int = None,
        expire_time: int = None,
        io_status: int = None,
        creator_ids: List[str] = None,
        search: str = None,
        page: int = None,
        pagesize: int = None,
        select_fields: str = None,
        order_by: str = None,
        top: int = None,
        total_fields: str = None,
    ):
        # 部门ID
        self.dept = dept
        # 职员ID
        self.emp = emp
        # 单据状态（所有：“”，已审核：“C”，未审核：“Z”）
        self.bill_status = bill_status
        # 单据关闭状态（所有：“”，未关闭：“C”，已关闭：“S”,手动关闭: "H"）
        self.bill_close_state = bill_close_state
        # 开始日期 创建日期
        self.start_date = start_date
        # 结束日期 创建日期
        self.end_date = end_date
        # 开始日期 修改日期
        self.begin_date = begin_date
        # 结束日期 修改日期
        self.expire_date = expire_date
        # 开始时间 创建日期
        self.start_time = start_time
        # 结束时间 创建日期
        self.end_time = end_time
        # 开始时间 修改日期
        self.begin_time = begin_time
        # 结束时间 修改日期
        self.expire_time = expire_time
        # 入库状态（所有：“”，全部入库：“C”，部分入库：“Z”，未入库：“A”）
        self.io_status = io_status
        # 制单人，格式：[“制单人id”,”制单人id”]
        self.creator_ids = creator_ids
        self.search = search
        self.page = page
        self.pagesize = pagesize
        self.select_fields = select_fields
        self.order_by = order_by
        self.top = top
        # 自定义合计字段，多个字段用英文逗号隔开，如：totalamount
        self.total_fields = total_fields

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept is not None:
            result['deptid'] = self.dept
        if self.emp is not None:
            result['empid'] = self.emp
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.bill_close_state is not None:
            result['billclosestate'] = self.bill_close_state
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.begin_date is not None:
            result['begindate'] = self.begin_date
        if self.expire_date is not None:
            result['expiredate'] = self.expire_date
        if self.start_time is not None:
            result['starttime'] = self.start_time
        if self.end_time is not None:
            result['endtime'] = self.end_time
        if self.begin_time is not None:
            result['begintime'] = self.begin_time
        if self.expire_time is not None:
            result['expiretime'] = self.expire_time
        if self.io_status is not None:
            result['iostatus'] = self.io_status
        if self.creator_ids is not None:
            result['creatorid'] = self.creator_ids
        if self.search is not None:
            result['search'] = self.search
        if self.page is not None:
            result['page'] = self.page
        if self.pagesize is not None:
            result['pagesize'] = self.pagesize
        if self.select_fields is not None:
            result['selectfields'] = self.select_fields
        if self.order_by is not None:
            result['orderby'] = self.order_by
        if self.top is not None:
            result['top'] = self.top
        if self.total_fields is not None:
            result['totalfields'] = self.total_fields
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('deptid') is not None:
            self.dept = m.get('deptid')
        if m.get('empid') is not None:
            self.emp = m.get('empid')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('billclosestate') is not None:
            self.bill_close_state = m.get('billclosestate')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('begindate') is not None:
            self.begin_date = m.get('begindate')
        if m.get('expiredate') is not None:
            self.expire_date = m.get('expiredate')
        if m.get('starttime') is not None:
            self.start_time = m.get('starttime')
        if m.get('endtime') is not None:
            self.end_time = m.get('endtime')
        if m.get('begintime') is not None:
            self.begin_time = m.get('begintime')
        if m.get('expiretime') is not None:
            self.expire_time = m.get('expiretime')
        if m.get('iostatus') is not None:
            self.io_status = m.get('iostatus')
        if m.get('creatorid') is not None:
            self.creator_ids = m.get('creatorid')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.pagesize = m.get('pagesize')
        if m.get('selectfields') is not None:
            self.select_fields = m.get('selectfields')
        if m.get('orderby') is not None:
            self.order_by = m.get('orderby')
        if m.get('top') is not None:
            self.top = m.get('top')
        if m.get('totalfields') is not None:
            self.total_fields = m.get('totalfields')
        return self


class PurchaseOrderListRequest(TeaModel):
    def __init__(
        self,
        body: PurchaseOrderListRequestBody = None,
    ):
        self.body = body
        # 采购订单列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = PurchaseOrderListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PurchaseOrderDetailRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        number: str = None,
    ):
        self.id = id
        self.number = number

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.number is not None:
            result['number'] = self.number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('number') is not None:
            self.number = m.get('number')
        return self


class PurchaseOrderDetailRequest(TeaModel):
    def __init__(
        self,
        body: PurchaseOrderDetailRequestBody = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = PurchaseOrderDetailRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PurchaseOrderPaymentEntry(TeaModel):
    def __init__(
        self,
        id: str = None,
        account: str = None,
        account_name: str = None,
        amount: str = None,
        type_id: str = None,
        type_name: str = None,
        trans_number: str = None,
        comment: str = None,
        seq: str = None,
    ):
        # 付款ID
        self.id = id
        # 收款账户
        self.account = account
        # 收款账户名称
        self.account_name = account_name
        # 收款金额
        self.amount = amount
        # 支付方式id
        self.type_id = type_id
        # 支付方式名称
        self.type_name = type_name
        # 交易号/票据号
        self.trans_number = trans_number
        # 备注
        self.comment = comment
        self.seq = seq

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.account is not None:
            result['settleaccountid_id'] = self.account
        if self.account_name is not None:
            result['settleaccountid_name'] = self.account_name
        if self.amount is not None:
            result['paid_amount'] = self.amount
        if self.type_id is not None:
            result['paytypeid_id'] = self.type_id
        if self.type_name is not None:
            result['paytypeid_name'] = self.type_name
        if self.trans_number is not None:
            result['transnumber'] = self.trans_number
        if self.comment is not None:
            result['pay_comment'] = self.comment
        if self.seq is not None:
            result['seq'] = self.seq
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('settleaccountid_id') is not None:
            self.account = m.get('settleaccountid_id')
        if m.get('settleaccountid_name') is not None:
            self.account_name = m.get('settleaccountid_name')
        if m.get('paid_amount') is not None:
            self.amount = m.get('paid_amount')
        if m.get('paytypeid_id') is not None:
            self.type_id = m.get('paytypeid_id')
        if m.get('paytypeid_name') is not None:
            self.type_name = m.get('paytypeid_name')
        if m.get('transnumber') is not None:
            self.trans_number = m.get('transnumber')
        if m.get('pay_comment') is not None:
            self.comment = m.get('pay_comment')
        if m.get('seq') is not None:
            self.seq = m.get('seq')
        return self


class PurchaseOrderMaterialEntry(TeaModel):
    def __init__(
        self,
        id: str = None,
        material: str = None,
        stock: str = None,
        sp_id: str = None,
        qty: str = None,
        delivery_date: str = None,
        unit: str = None,
        aux_prop: str = None,
        bar_code: str = None,
        batch_no: str = None,
        product_place: str = None,
        product_register_no: str = None,
        product_license: str = None,
        price: str = None,
        tax_price: str = None,
        cess: str = None,
        tax_amount: str = None,
        all_amount: str = None,
        pre_disamount: str = None,
        dis_amount: str = None,
        discount: str = None,
        dis_rate: str = None,
        dis_price: str = None,
        amount: str = None,
        all_amount_before_discount: str = None,
        actual_tax_price: str = None,
        distribution_discount_for_bill: str = None,
        actual_no_tax_amount: str = None,
        comment: str = None,
        src_bill_no: str = None,
        src_bill_type: str = None,
        src_inter_id: str = None,
        src_bill_date: str = None,
        src_seq: str = None,
        src_entryid: str = None,
    ):
        self.id = id
        # 商品
        self.material = material
        # 仓库
        self.stock = stock
        # 仓位，启用了仓位管理则必填
        self.sp_id = sp_id
        # 数量
        self.qty = qty
        # 交货日期
        self.delivery_date = delivery_date
        # 单位
        self.unit = unit
        # 辅助属性；辅助属性商品必填
        self.aux_prop = aux_prop
        # 条形码
        self.bar_code = bar_code
        # 批次号 (批次商品必填)
        self.batch_no = batch_no
        # 产地
        self.product_place = product_place
        # 注册证号
        self.product_register_no = product_register_no
        # 生产许可证号
        self.product_license = product_license
        # 单价
        self.price = price
        self.tax_price = tax_price
        # 商品增值税税率；不传后端自取，传入则以传入为准
        self.cess = cess
        # 商品税额
        self.tax_amount = tax_amount
        # 价税合计
        self.all_amount = all_amount
        # 折前金额
        self.pre_disamount = pre_disamount
        # 折扣额
        self.dis_amount = dis_amount
        # 折扣（折）
        self.discount = discount
        # 折扣率
        self.dis_rate = dis_rate
        # 折扣单价
        self.dis_price = dis_price
        # 折后金额
        self.amount = amount
        # 整单折前价税合计
        self.all_amount_before_discount = all_amount_before_discount
        # 实际含税单价
        self.actual_tax_price = actual_tax_price
        # 整单折扣分配额
        self.distribution_discount_for_bill = distribution_discount_for_bill
        # 实际不含税金额
        self.actual_no_tax_amount = actual_no_tax_amount
        # 商品行备注
        self.comment = comment
        # 源单编码
        self.src_bill_no = src_bill_no
        # 源单类型
        self.src_bill_type = src_bill_type
        # 源单内码
        self.src_inter_id = src_inter_id
        # 源单日期
        self.src_bill_date = src_bill_date
        # 源单行号
        self.src_seq = src_seq
        # 源单分录内码
        self.src_entryid = src_entryid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.material is not None:
            result['materialid_id'] = self.material
        if self.stock is not None:
            result['stockid_id'] = self.stock
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.qty is not None:
            result['qty'] = self.qty
        if self.delivery_date is not None:
            result['deliverydate'] = self.delivery_date
        if self.unit is not None:
            result['unit_id'] = self.unit
        if self.aux_prop is not None:
            result['auxpropid_id'] = self.aux_prop
        if self.bar_code is not None:
            result['barcode'] = self.bar_code
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.product_place is not None:
            result['proplace'] = self.product_place
        if self.product_register_no is not None:
            result['proregno'] = self.product_register_no
        if self.product_license is not None:
            result['prolicense'] = self.product_license
        if self.price is not None:
            result['price'] = self.price
        if self.tax_price is not None:
            result['taxprice'] = self.tax_price
        if self.cess is not None:
            result['cess'] = self.cess
        if self.tax_amount is not None:
            result['taxamount'] = self.tax_amount
        if self.all_amount is not None:
            result['allamount'] = self.all_amount
        if self.pre_disamount is not None:
            result['predisamount'] = self.pre_disamount
        if self.dis_amount is not None:
            result['disamount'] = self.dis_amount
        if self.discount is not None:
            result['discount'] = self.discount
        if self.dis_rate is not None:
            result['disrate'] = self.dis_rate
        if self.dis_price is not None:
            result['disprice'] = self.dis_price
        if self.amount is not None:
            result['amount'] = self.amount
        if self.all_amount_before_discount is not None:
            result['billdisbeforeamount'] = self.all_amount_before_discount
        if self.actual_tax_price is not None:
            result['acttaxprice'] = self.actual_tax_price
        if self.distribution_discount_for_bill is not None:
            result['billdisdistribution'] = self.distribution_discount_for_bill
        if self.actual_no_tax_amount is not None:
            result['actnontaxamount'] = self.actual_no_tax_amount
        if self.comment is not None:
            result['comment'] = self.comment
        if self.src_bill_no is not None:
            result['srcbillno'] = self.src_bill_no
        if self.src_bill_type is not None:
            result['srcbilltypeid_id'] = self.src_bill_type
        if self.src_inter_id is not None:
            result['srcinterid'] = self.src_inter_id
        if self.src_bill_date is not None:
            result['src_billdate'] = self.src_bill_date
        if self.src_seq is not None:
            result['srcseq'] = self.src_seq
        if self.src_entryid is not None:
            result['srcentryid'] = self.src_entryid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('materialid_id') is not None:
            self.material = m.get('materialid_id')
        if m.get('stockid_id') is not None:
            self.stock = m.get('stockid_id')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('deliverydate') is not None:
            self.delivery_date = m.get('deliverydate')
        if m.get('unit_id') is not None:
            self.unit = m.get('unit_id')
        if m.get('auxpropid_id') is not None:
            self.aux_prop = m.get('auxpropid_id')
        if m.get('barcode') is not None:
            self.bar_code = m.get('barcode')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.product_place = m.get('proplace')
        if m.get('proregno') is not None:
            self.product_register_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.product_license = m.get('prolicense')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('taxprice') is not None:
            self.tax_price = m.get('taxprice')
        if m.get('cess') is not None:
            self.cess = m.get('cess')
        if m.get('taxamount') is not None:
            self.tax_amount = m.get('taxamount')
        if m.get('allamount') is not None:
            self.all_amount = m.get('allamount')
        if m.get('predisamount') is not None:
            self.pre_disamount = m.get('predisamount')
        if m.get('disamount') is not None:
            self.dis_amount = m.get('disamount')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('disrate') is not None:
            self.dis_rate = m.get('disrate')
        if m.get('disprice') is not None:
            self.dis_price = m.get('disprice')
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('billdisbeforeamount') is not None:
            self.all_amount_before_discount = m.get('billdisbeforeamount')
        if m.get('acttaxprice') is not None:
            self.actual_tax_price = m.get('acttaxprice')
        if m.get('billdisdistribution') is not None:
            self.distribution_discount_for_bill = m.get('billdisdistribution')
        if m.get('actnontaxamount') is not None:
            self.actual_no_tax_amount = m.get('actnontaxamount')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('srcbillno') is not None:
            self.src_bill_no = m.get('srcbillno')
        if m.get('srcbilltypeid_id') is not None:
            self.src_bill_type = m.get('srcbilltypeid_id')
        if m.get('srcinterid') is not None:
            self.src_inter_id = m.get('srcinterid')
        if m.get('src_billdate') is not None:
            self.src_bill_date = m.get('src_billdate')
        if m.get('srcseq') is not None:
            self.src_seq = m.get('srcseq')
        if m.get('srcentryid') is not None:
            self.src_entryid = m.get('srcentryid')
        return self


class PurchaseOrderDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_no: str = None,
        operation_key: str = None,
        bill_date: str = None,
        supplier: str = None,
        emp: str = None,
        remark: str = None,
        link_man_for_contact: str = None,
        phone_for_contact: str = None,
        country_for_contact: str = None,
        province_for_contact: str = None,
        city_for_contact: str = None,
        district_for_contact: str = None,
        address_for_contact: str = None,
        link_man_for_dispatcher: str = None,
        phone_for_dispatcher: str = None,
        country_for_dispatcher: str = None,
        province_for_dispatcher: str = None,
        city_for_dispatcher: str = None,
        district_for_dispatcher: str = None,
        address_for_dispatcher: str = None,
        delivery_type: str = None,
        discount_amount: str = None,
        discount_rate: str = None,
        cost_fee: str = None,
        cost_fee_entries: List[CostFeeEntry] = None,
        allocate_rule: str = None,
        total_ins_amount: str = None,
        total_amount: str = None,
        payment_entries: List[PurchaseOrderPaymentEntry] = None,
        material_entries: List[PurchaseOrderMaterialEntry] = None,
        attachments: List[str] = None,
    ):
        self.id = id
        # 单据编码
        self.bill_no = bill_no
        # 操作类型，固定取值：special_save，执行特殊保存时必填
        self.operation_key = operation_key
        # 出库日期,格式：2019-01-01
        self.bill_date = bill_date
        # 客户
        self.supplier = supplier
        # 业务员
        self.emp = emp
        # 单据备注
        self.remark = remark
        # 联系信息-联系人
        self.link_man_for_contact = link_man_for_contact
        # 联系信息-联系方式
        self.phone_for_contact = phone_for_contact
        # 联系信息-国家ID
        self.country_for_contact = country_for_contact
        # 联系信息-省ID
        self.province_for_contact = province_for_contact
        # 联系信息-市ID
        self.city_for_contact = city_for_contact
        # 联系信息-区ID
        self.district_for_contact = district_for_contact
        # 联系信息-详细地址
        self.address_for_contact = address_for_contact
        # 发货地址-联系人
        self.link_man_for_dispatcher = link_man_for_dispatcher
        # 发货地址-联系方式
        self.phone_for_dispatcher = phone_for_dispatcher
        # 发货地址-国家ID
        self.country_for_dispatcher = country_for_dispatcher
        # 发货地址-省ID
        self.province_for_dispatcher = province_for_dispatcher
        # 发货地址-市ID
        self.city_for_dispatcher = city_for_dispatcher
        # 发货地址-区ID
        self.district_for_dispatcher = district_for_dispatcher
        # 发货地址-详细地址
        self.address_for_dispatcher = address_for_dispatcher
        # 交货方式id,6:物流配送;8:车辆配送,9:客户自提
        self.delivery_type = delivery_type
        # 整单折扣额
        self.discount_amount = discount_amount
        # 整单折扣率%\
        self.discount_rate = discount_rate
        # 销售费用
        self.cost_fee = cost_fee
        # 销售费用明细，没有则传null或不传该字段
        self.cost_fee_entries = cost_fee_entries
        # 销售费用分摊规则；”1”: 按价税合计分摊（默认）； “2”:按数量分摊
        self.allocate_rule = allocate_rule
        # 本次收款
        self.total_ins_amount = total_ins_amount
        # 本次应收账款
        self.total_amount = total_amount
        # 收款账户
        self.payment_entries = payment_entries
        # 商品分录
        self.material_entries = material_entries
        # 附件地址
        self.attachments = attachments

    def validate(self):
        if self.cost_fee_entries:
            for k in self.cost_fee_entries:
                if k:
                    k.validate()
        if self.payment_entries:
            for k in self.payment_entries:
                if k:
                    k.validate()
        if self.material_entries:
            for k in self.material_entries:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_no is not None:
            result['billno'] = self.bill_no
        if self.operation_key is not None:
            result['operationkey'] = self.operation_key
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.supplier is not None:
            result['supplierid_id'] = self.supplier
        if self.emp is not None:
            result['empid_id'] = self.emp
        if self.remark is not None:
            result['remark'] = self.remark
        if self.link_man_for_contact is not None:
            result['contact_linkman'] = self.link_man_for_contact
        if self.phone_for_contact is not None:
            result['contact_phone'] = self.phone_for_contact
        if self.country_for_contact is not None:
            result['contact_country_id'] = self.country_for_contact
        if self.province_for_contact is not None:
            result['contact_province_id'] = self.province_for_contact
        if self.city_for_contact is not None:
            result['contact_city_id'] = self.city_for_contact
        if self.district_for_contact is not None:
            result['contact_district_id'] = self.district_for_contact
        if self.address_for_contact is not None:
            result['contact_address'] = self.address_for_contact
        if self.link_man_for_dispatcher is not None:
            result['contact_linkman'] = self.link_man_for_dispatcher
        if self.phone_for_dispatcher is not None:
            result['contact_phone'] = self.phone_for_dispatcher
        if self.country_for_dispatcher is not None:
            result['contact_country_id'] = self.country_for_dispatcher
        if self.province_for_dispatcher is not None:
            result['contact_province_id'] = self.province_for_dispatcher
        if self.city_for_dispatcher is not None:
            result['contact_city_id'] = self.city_for_dispatcher
        if self.district_for_dispatcher is not None:
            result['contact_district_id'] = self.district_for_dispatcher
        if self.address_for_dispatcher is not None:
            result['contact_address'] = self.address_for_dispatcher
        if self.delivery_type is not None:
            result['delivery_type_id'] = self.delivery_type
        if self.discount_amount is not None:
            result['bill_dis_amount'] = self.discount_amount
        if self.discount_rate is not None:
            result['bill_dis_rate'] = self.discount_rate
        if self.cost_fee is not None:
            result['cost_fee'] = self.cost_fee
        result['cost_fee_entity'] = []
        if self.cost_fee_entries is not None:
            for k in self.cost_fee_entries:
                result['cost_fee_entity'].append(k.to_map() if k else None)
        if self.allocate_rule is not None:
            result['allocate_rule'] = self.allocate_rule
        if self.total_ins_amount is not None:
            result['totalinsamount'] = self.total_ins_amount
        if self.total_amount is not None:
            result['totalamount'] = self.total_amount
        result['payment_entry'] = []
        if self.payment_entries is not None:
            for k in self.payment_entries:
                result['payment_entry'].append(k.to_map() if k else None)
        result['material_entity'] = []
        if self.material_entries is not None:
            for k in self.material_entries:
                result['material_entity'].append(k.to_map() if k else None)
        if self.attachments is not None:
            result['attachments_url'] = self.attachments
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billno') is not None:
            self.bill_no = m.get('billno')
        if m.get('operationkey') is not None:
            self.operation_key = m.get('operationkey')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('supplierid_id') is not None:
            self.supplier = m.get('supplierid_id')
        if m.get('empid_id') is not None:
            self.emp = m.get('empid_id')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('contact_linkman') is not None:
            self.link_man_for_contact = m.get('contact_linkman')
        if m.get('contact_phone') is not None:
            self.phone_for_contact = m.get('contact_phone')
        if m.get('contact_country_id') is not None:
            self.country_for_contact = m.get('contact_country_id')
        if m.get('contact_province_id') is not None:
            self.province_for_contact = m.get('contact_province_id')
        if m.get('contact_city_id') is not None:
            self.city_for_contact = m.get('contact_city_id')
        if m.get('contact_district_id') is not None:
            self.district_for_contact = m.get('contact_district_id')
        if m.get('contact_address') is not None:
            self.address_for_contact = m.get('contact_address')
        if m.get('contact_linkman') is not None:
            self.link_man_for_dispatcher = m.get('contact_linkman')
        if m.get('contact_phone') is not None:
            self.phone_for_dispatcher = m.get('contact_phone')
        if m.get('contact_country_id') is not None:
            self.country_for_dispatcher = m.get('contact_country_id')
        if m.get('contact_province_id') is not None:
            self.province_for_dispatcher = m.get('contact_province_id')
        if m.get('contact_city_id') is not None:
            self.city_for_dispatcher = m.get('contact_city_id')
        if m.get('contact_district_id') is not None:
            self.district_for_dispatcher = m.get('contact_district_id')
        if m.get('contact_address') is not None:
            self.address_for_dispatcher = m.get('contact_address')
        if m.get('delivery_type_id') is not None:
            self.delivery_type = m.get('delivery_type_id')
        if m.get('bill_dis_amount') is not None:
            self.discount_amount = m.get('bill_dis_amount')
        if m.get('bill_dis_rate') is not None:
            self.discount_rate = m.get('bill_dis_rate')
        if m.get('cost_fee') is not None:
            self.cost_fee = m.get('cost_fee')
        self.cost_fee_entries = []
        if m.get('cost_fee_entity') is not None:
            for k in m.get('cost_fee_entity'):
                temp_model = CostFeeEntry()
                self.cost_fee_entries.append(temp_model.from_map(k))
        if m.get('allocate_rule') is not None:
            self.allocate_rule = m.get('allocate_rule')
        if m.get('totalinsamount') is not None:
            self.total_ins_amount = m.get('totalinsamount')
        if m.get('totalamount') is not None:
            self.total_amount = m.get('totalamount')
        self.payment_entries = []
        if m.get('payment_entry') is not None:
            for k in m.get('payment_entry'):
                temp_model = PurchaseOrderPaymentEntry()
                self.payment_entries.append(temp_model.from_map(k))
        self.material_entries = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = PurchaseOrderMaterialEntry()
                self.material_entries.append(temp_model.from_map(k))
        if m.get('attachments_url') is not None:
            self.attachments = m.get('attachments_url')
        return self


class PurchaseOrderDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: PurchaseOrderDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = PurchaseOrderDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class PurchaseOrderSaveRequest(TeaModel):
    def __init__(
        self,
        body: PurchaseOrderDetail = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = PurchaseOrderDetail()
            self.body = temp_model.from_map(m['body'])
        return self


class PurchaseOrderDrawRequestBody(TeaModel):
    def __init__(
        self,
        ids: str = None,
    ):
        self.ids = ids

    def validate(self):
        self.validate_required(self.ids, 'ids')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids is not None:
            result['ids'] = self.ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ids') is not None:
            self.ids = m.get('ids')
        return self


class PurchaseOrderDrawRequest(TeaModel):
    def __init__(
        self,
        body: PurchaseOrderDrawRequestBody = None,
    ):
        self.body = body
        # 采购订单选择源单

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = PurchaseOrderDrawRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PurchaseReturnListRequestBody(TeaModel):
    def __init__(
        self,
        dept: List[str] = None,
        emp: List[str] = None,
        supplier: List[str] = None,
        bill_status: str = None,
        start_bill_date: str = None,
        end_bill_date: str = None,
        start_date: str = None,
        end_date: str = None,
        begin_date: str = None,
        expire_date: str = None,
        start_time: int = None,
        end_time: int = None,
        begin_time: int = None,
        expire_time: int = None,
        select_fields: str = None,
        creator_ids: List[str] = None,
        search: str = None,
        filter_zero: str = None,
        page: int = None,
        pagesize: int = None,
        total_fields: str = None,
    ):
        # 部门ID
        self.dept = dept
        # 职员ID
        self.emp = emp
        # 职员ID
        self.supplier = supplier
        # 单据状态（所有：“”，已审核：“C”，未审核：“Z”）
        self.bill_status = bill_status
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），单据日期
        self.start_bill_date = start_bill_date
        # 结束日期 单据日期
        self.end_bill_date = end_bill_date
        # 开始日期 创建日期
        self.start_date = start_date
        # 结束日期 创建日期
        self.end_date = end_date
        # 开始日期 修改日期
        self.begin_date = begin_date
        # 结束日期 修改日期
        self.expire_date = expire_date
        # 开始时间 创建日期
        self.start_time = start_time
        # 结束时间 创建日期
        self.end_time = end_time
        # 开始时间 修改日期
        self.begin_time = begin_time
        # 结束时间 修改日期
        self.expire_time = expire_time
        self.select_fields = select_fields
        # 制单人，格式：[“制单人id”,”制单人id”]
        self.creator_ids = creator_ids
        self.search = search
        # 过滤字段值为0记录：目前仅支持totalunsettleamount
        self.filter_zero = filter_zero
        self.page = page
        self.pagesize = pagesize
        # 自定义合计字段，多个字段用英文逗号隔开，如：totalamount
        self.total_fields = total_fields

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept is not None:
            result['deptid'] = self.dept
        if self.emp is not None:
            result['empid'] = self.emp
        if self.supplier is not None:
            result['supplierid'] = self.supplier
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.start_bill_date is not None:
            result['startbilldate'] = self.start_bill_date
        if self.end_bill_date is not None:
            result['endbilldate'] = self.end_bill_date
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.begin_date is not None:
            result['begindate'] = self.begin_date
        if self.expire_date is not None:
            result['expiredate'] = self.expire_date
        if self.start_time is not None:
            result['starttime'] = self.start_time
        if self.end_time is not None:
            result['endtime'] = self.end_time
        if self.begin_time is not None:
            result['begintime'] = self.begin_time
        if self.expire_time is not None:
            result['expiretime'] = self.expire_time
        if self.select_fields is not None:
            result['selectfields'] = self.select_fields
        if self.creator_ids is not None:
            result['creatorid'] = self.creator_ids
        if self.search is not None:
            result['search'] = self.search
        if self.filter_zero is not None:
            result['filterzero'] = self.filter_zero
        if self.page is not None:
            result['page'] = self.page
        if self.pagesize is not None:
            result['pagesize'] = self.pagesize
        if self.total_fields is not None:
            result['totalfields'] = self.total_fields
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('deptid') is not None:
            self.dept = m.get('deptid')
        if m.get('empid') is not None:
            self.emp = m.get('empid')
        if m.get('supplierid') is not None:
            self.supplier = m.get('supplierid')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('startbilldate') is not None:
            self.start_bill_date = m.get('startbilldate')
        if m.get('endbilldate') is not None:
            self.end_bill_date = m.get('endbilldate')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('begindate') is not None:
            self.begin_date = m.get('begindate')
        if m.get('expiredate') is not None:
            self.expire_date = m.get('expiredate')
        if m.get('starttime') is not None:
            self.start_time = m.get('starttime')
        if m.get('endtime') is not None:
            self.end_time = m.get('endtime')
        if m.get('begintime') is not None:
            self.begin_time = m.get('begintime')
        if m.get('expiretime') is not None:
            self.expire_time = m.get('expiretime')
        if m.get('selectfields') is not None:
            self.select_fields = m.get('selectfields')
        if m.get('creatorid') is not None:
            self.creator_ids = m.get('creatorid')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('filterzero') is not None:
            self.filter_zero = m.get('filterzero')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.pagesize = m.get('pagesize')
        if m.get('totalfields') is not None:
            self.total_fields = m.get('totalfields')
        return self


class PurchaseReturnListRequest(TeaModel):
    def __init__(
        self,
        body: PurchaseReturnListRequestBody = None,
    ):
        self.body = body
        # 采购退货单列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = PurchaseReturnListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PurchaseReturnDetailRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        number: str = None,
    ):
        self.id = id
        self.number = number

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.number is not None:
            result['number'] = self.number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('number') is not None:
            self.number = m.get('number')
        return self


class PurchaseReturnDetailRequest(TeaModel):
    def __init__(
        self,
        body: PurchaseReturnDetailRequestBody = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = PurchaseReturnDetailRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PurchaseReturnMaterialEntry(TeaModel):
    def __init__(
        self,
        id: str = None,
        material: str = None,
        stock: str = None,
        sp_id: str = None,
        qty: str = None,
        unit: str = None,
        aux_prop: str = None,
        sn_list_id: str = None,
        sn_list: str = None,
        bar_code: str = None,
        batch_no: str = None,
        product_place: str = None,
        product_register_no: str = None,
        product_license: str = None,
        price: str = None,
        cess: str = None,
        comment: str = None,
        src_bill_no: str = None,
        src_bill_type: str = None,
        src_inter_id: str = None,
        src_bill_date: str = None,
        src_seq: str = None,
        src_entryid: str = None,
    ):
        self.id = id
        # 商品
        self.material = material
        # 仓库
        self.stock = stock
        # 仓位，启用了仓位管理则必填
        self.sp_id = sp_id
        # 数量
        self.qty = qty
        # 单位
        self.unit = unit
        # 辅助属性；辅助属性商品必填
        self.aux_prop = aux_prop
        # 序列号流转id；单据新增后会在单据详情中带回这个字段信息，序列号商品修改时必填
        self.sn_list_id = sn_list_id
        # 序列号 格式：001:备注1;002:备注2 （序列号:序列号备注 多个序列号以英文分号字符;分隔）,序列号商品必填
        self.sn_list = sn_list
        # 条形码
        self.bar_code = bar_code
        # 批次号 (批次商品必填)
        self.batch_no = batch_no
        # 产地
        self.product_place = product_place
        # 注册证号
        self.product_register_no = product_register_no
        # 生产许可证号
        self.product_license = product_license
        # 单价
        self.price = price
        # 商品增值税税率；不传后端自取，传入则以传入为准
        self.cess = cess
        # 商品行备注
        self.comment = comment
        # 源单编码
        self.src_bill_no = src_bill_no
        # 源单类型
        self.src_bill_type = src_bill_type
        # 源单内码
        self.src_inter_id = src_inter_id
        # 源单日期
        self.src_bill_date = src_bill_date
        # 源单行号
        self.src_seq = src_seq
        # 源单分录内码
        self.src_entryid = src_entryid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.material is not None:
            result['materialid_id'] = self.material
        if self.stock is not None:
            result['stockid_id'] = self.stock
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.qty is not None:
            result['qty'] = self.qty
        if self.unit is not None:
            result['unit_id'] = self.unit
        if self.aux_prop is not None:
            result['auxpropid_id'] = self.aux_prop
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.sn_list is not None:
            result['sn_list'] = self.sn_list
        if self.bar_code is not None:
            result['barcode'] = self.bar_code
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.product_place is not None:
            result['proplace'] = self.product_place
        if self.product_register_no is not None:
            result['proregno'] = self.product_register_no
        if self.product_license is not None:
            result['prolicense'] = self.product_license
        if self.price is not None:
            result['price'] = self.price
        if self.cess is not None:
            result['cess'] = self.cess
        if self.comment is not None:
            result['comment'] = self.comment
        if self.src_bill_no is not None:
            result['srcbillno'] = self.src_bill_no
        if self.src_bill_type is not None:
            result['srcbilltypeid_id'] = self.src_bill_type
        if self.src_inter_id is not None:
            result['srcinterid'] = self.src_inter_id
        if self.src_bill_date is not None:
            result['src_billdate'] = self.src_bill_date
        if self.src_seq is not None:
            result['srcseq'] = self.src_seq
        if self.src_entryid is not None:
            result['srcentryid'] = self.src_entryid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('materialid_id') is not None:
            self.material = m.get('materialid_id')
        if m.get('stockid_id') is not None:
            self.stock = m.get('stockid_id')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('unit_id') is not None:
            self.unit = m.get('unit_id')
        if m.get('auxpropid_id') is not None:
            self.aux_prop = m.get('auxpropid_id')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('sn_list') is not None:
            self.sn_list = m.get('sn_list')
        if m.get('barcode') is not None:
            self.bar_code = m.get('barcode')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('proplace') is not None:
            self.product_place = m.get('proplace')
        if m.get('proregno') is not None:
            self.product_register_no = m.get('proregno')
        if m.get('prolicense') is not None:
            self.product_license = m.get('prolicense')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('cess') is not None:
            self.cess = m.get('cess')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('srcbillno') is not None:
            self.src_bill_no = m.get('srcbillno')
        if m.get('srcbilltypeid_id') is not None:
            self.src_bill_type = m.get('srcbilltypeid_id')
        if m.get('srcinterid') is not None:
            self.src_inter_id = m.get('srcinterid')
        if m.get('src_billdate') is not None:
            self.src_bill_date = m.get('src_billdate')
        if m.get('srcseq') is not None:
            self.src_seq = m.get('srcseq')
        if m.get('srcentryid') is not None:
            self.src_entryid = m.get('srcentryid')
        return self


class PurchaseReturnDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_date: str = None,
        dept: str = None,
        supplier: str = None,
        emp: str = None,
        remark: str = None,
        currency: str = None,
        all_debt: str = None,
        last_debt: str = None,
        return_reason: str = None,
        contact_info: str = None,
        discount_amount: str = None,
        discount_rate: str = None,
        total_ins_amount: str = None,
        total_amount: str = None,
        total_unsettle_amount: str = None,
        material_entries: List[PurchaseReturnMaterialEntry] = None,
        attachments: List[str] = None,
    ):
        self.id = id
        # 出库日期,格式：2019-01-01
        self.bill_date = bill_date
        # 部门
        self.dept = dept
        # 客户
        self.supplier = supplier
        # 业务员
        self.emp = emp
        # 单据备注
        self.remark = remark
        # 币别
        self.currency = currency
        # 应付余额
        self.all_debt = all_debt
        # 上次欠款
        self.last_debt = last_debt
        # 原因
        self.return_reason = return_reason
        # 联系信息
        self.contact_info = contact_info
        # 整单折扣额
        self.discount_amount = discount_amount
        # 整单折扣率%\
        self.discount_rate = discount_rate
        # 退款合计
        self.total_ins_amount = total_ins_amount
        # 本次应退账款
        self.total_amount = total_amount
        # 本单未退
        self.total_unsettle_amount = total_unsettle_amount
        # 商品分录
        self.material_entries = material_entries
        # 附件地址
        self.attachments = attachments

    def validate(self):
        if self.material_entries:
            for k in self.material_entries:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.dept is not None:
            result['deptid_id'] = self.dept
        if self.supplier is not None:
            result['supplierid_id'] = self.supplier
        if self.emp is not None:
            result['empid_id'] = self.emp
        if self.remark is not None:
            result['remark'] = self.remark
        if self.currency is not None:
            result['currencyid_id'] = self.currency
        if self.all_debt is not None:
            result['alldebt'] = self.all_debt
        if self.last_debt is not None:
            result['lastdebt'] = self.last_debt
        if self.return_reason is not None:
            result['returnreason'] = self.return_reason
        if self.contact_info is not None:
            result['contact_info'] = self.contact_info
        if self.discount_amount is not None:
            result['bill_dis_amount'] = self.discount_amount
        if self.discount_rate is not None:
            result['bill_dis_rate'] = self.discount_rate
        if self.total_ins_amount is not None:
            result['totalinsamount'] = self.total_ins_amount
        if self.total_amount is not None:
            result['totalamount'] = self.total_amount
        if self.total_unsettle_amount is not None:
            result['totalunsettleamount'] = self.total_unsettle_amount
        result['material_entity'] = []
        if self.material_entries is not None:
            for k in self.material_entries:
                result['material_entity'].append(k.to_map() if k else None)
        if self.attachments is not None:
            result['attachments_url'] = self.attachments
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('deptid_id') is not None:
            self.dept = m.get('deptid_id')
        if m.get('supplierid_id') is not None:
            self.supplier = m.get('supplierid_id')
        if m.get('empid_id') is not None:
            self.emp = m.get('empid_id')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('currencyid_id') is not None:
            self.currency = m.get('currencyid_id')
        if m.get('alldebt') is not None:
            self.all_debt = m.get('alldebt')
        if m.get('lastdebt') is not None:
            self.last_debt = m.get('lastdebt')
        if m.get('returnreason') is not None:
            self.return_reason = m.get('returnreason')
        if m.get('contact_info') is not None:
            self.contact_info = m.get('contact_info')
        if m.get('bill_dis_amount') is not None:
            self.discount_amount = m.get('bill_dis_amount')
        if m.get('bill_dis_rate') is not None:
            self.discount_rate = m.get('bill_dis_rate')
        if m.get('totalinsamount') is not None:
            self.total_ins_amount = m.get('totalinsamount')
        if m.get('totalamount') is not None:
            self.total_amount = m.get('totalamount')
        if m.get('totalunsettleamount') is not None:
            self.total_unsettle_amount = m.get('totalunsettleamount')
        self.material_entries = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = PurchaseReturnMaterialEntry()
                self.material_entries.append(temp_model.from_map(k))
        if m.get('attachments_url') is not None:
            self.attachments = m.get('attachments_url')
        return self


class PurchaseReturnDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: PurchaseReturnDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = PurchaseReturnDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class PurchaseReturnSaveRequest(TeaModel):
    def __init__(
        self,
        body: PurchaseReturnDetail = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = PurchaseReturnDetail()
            self.body = temp_model.from_map(m['body'])
        return self


class PurchaseHomePageTodoListRequestBody(TeaModel):
    def __init__(self):
        pass

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        return self


class PurchaseHomePageTodoListRequest(TeaModel):
    def __init__(
        self,
        body: PurchaseHomePageTodoListRequestBody = None,
    ):
        self.body = body
        # 查询销售助手首页采购单据待办数量

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = PurchaseHomePageTodoListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OrderListRequestBody(TeaModel):
    def __init__(
        self,
        depts: List[str] = None,
        emps: List[str] = None,
        bill_status: str = None,
        bill_close_state: str = None,
        start_bill_date: str = None,
        end_bill_date: str = None,
        start_date: str = None,
        end_date: str = None,
        begin_date: str = None,
        expire_date: str = None,
        start_time: int = None,
        end_time: int = None,
        begin_time: int = None,
        expire_time: int = None,
        search: str = None,
        creator_id: List[str] = None,
        bill_source: str = None,
        realio_status: str = None,
        io_status: str = None,
        page: int = None,
        pagesize: int = None,
        select_fields: str = None,
        order_by: str = None,
        top: int = None,
        total_fields: str = None,
        show_materia_ttotal: bool = None,
    ):
        self.depts = depts
        self.emps = emps
        # 单据状态（所有：“”，已审核：“C”，未审核：“Z”）
        self.bill_status = bill_status
        # 单据关闭状态（所有：“”，未关闭：“C”，已关闭：“S”,手动关闭: “H”）
        self.bill_close_state = bill_close_state
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），单据日期
        self.start_bill_date = start_bill_date
        # 结束日期 单据日期
        self.end_bill_date = end_bill_date
        # 开始日期 创建日期
        self.start_date = start_date
        # 结束日期 创建日期
        self.end_date = end_date
        # 开始日期 修改日期
        self.begin_date = begin_date
        # 结束日期 修改日期
        self.expire_date = expire_date
        # 开始时间 创建日期
        self.start_time = start_time
        # 结束时间 创建日期
        self.end_time = end_time
        # 开始时间 修改日期
        self.begin_time = begin_time
        # 结束时间 修改日期
        self.expire_time = expire_time
        self.search = search
        # 制单人，格式：["制单人id","制单人id"]
        self.creator_id = creator_id
        # 单据来源，与单据新增保持一致
        self.bill_source = bill_source
        # 出库状态（所有：“”，全部出库：“C”，部分出库：“Z”，未出库：“A”，待出库（=部分出库+未出库）：“B”）
        self.realio_status = realio_status
        # 执行状态（所有：“”，全部执行：“C”，部分执行：“Z”，未执行：“A”，待执行（=部分执行+未执行）：“B”）
        self.io_status = io_status
        self.page = page
        self.pagesize = pagesize
        # 自定义返回字段（除默认字段外），多个字段用英文逗号隔开，支持的字段见下面解析
        self.select_fields = select_fields
        # 排序说明
        self.order_by = order_by
        self.top = top
        # 自定义合计字段，多个字段用英文逗号隔开，如：totalamount
        self.total_fields = total_fields
        # 是否统计商品种类和数量到单据，默认false
        self.show_materia_ttotal = show_materia_ttotal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.depts is not None:
            result['deptid'] = self.depts
        if self.emps is not None:
            result['empid'] = self.emps
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.bill_close_state is not None:
            result['billclosestate'] = self.bill_close_state
        if self.start_bill_date is not None:
            result['startbilldate'] = self.start_bill_date
        if self.end_bill_date is not None:
            result['endbilldate'] = self.end_bill_date
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.begin_date is not None:
            result['begindate'] = self.begin_date
        if self.expire_date is not None:
            result['expiredate'] = self.expire_date
        if self.start_time is not None:
            result['starttime'] = self.start_time
        if self.end_time is not None:
            result['endtime'] = self.end_time
        if self.begin_time is not None:
            result['begintime'] = self.begin_time
        if self.expire_time is not None:
            result['expiretime'] = self.expire_time
        if self.search is not None:
            result['search'] = self.search
        if self.creator_id is not None:
            result['creatorid'] = self.creator_id
        if self.bill_source is not None:
            result['billsource'] = self.bill_source
        if self.realio_status is not None:
            result['realiostatus'] = self.realio_status
        if self.io_status is not None:
            result['iostatus'] = self.io_status
        if self.page is not None:
            result['page'] = self.page
        if self.pagesize is not None:
            result['pagesize'] = self.pagesize
        if self.select_fields is not None:
            result['selectfields'] = self.select_fields
        if self.order_by is not None:
            result['orderby'] = self.order_by
        if self.top is not None:
            result['top'] = self.top
        if self.total_fields is not None:
            result['totalfields'] = self.total_fields
        if self.show_materia_ttotal is not None:
            result['showmaterialtotal'] = self.show_materia_ttotal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('deptid') is not None:
            self.depts = m.get('deptid')
        if m.get('empid') is not None:
            self.emps = m.get('empid')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('billclosestate') is not None:
            self.bill_close_state = m.get('billclosestate')
        if m.get('startbilldate') is not None:
            self.start_bill_date = m.get('startbilldate')
        if m.get('endbilldate') is not None:
            self.end_bill_date = m.get('endbilldate')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('begindate') is not None:
            self.begin_date = m.get('begindate')
        if m.get('expiredate') is not None:
            self.expire_date = m.get('expiredate')
        if m.get('starttime') is not None:
            self.start_time = m.get('starttime')
        if m.get('endtime') is not None:
            self.end_time = m.get('endtime')
        if m.get('begintime') is not None:
            self.begin_time = m.get('begintime')
        if m.get('expiretime') is not None:
            self.expire_time = m.get('expiretime')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('creatorid') is not None:
            self.creator_id = m.get('creatorid')
        if m.get('billsource') is not None:
            self.bill_source = m.get('billsource')
        if m.get('realiostatus') is not None:
            self.realio_status = m.get('realiostatus')
        if m.get('iostatus') is not None:
            self.io_status = m.get('iostatus')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.pagesize = m.get('pagesize')
        if m.get('selectfields') is not None:
            self.select_fields = m.get('selectfields')
        if m.get('orderby') is not None:
            self.order_by = m.get('orderby')
        if m.get('top') is not None:
            self.top = m.get('top')
        if m.get('totalfields') is not None:
            self.total_fields = m.get('totalfields')
        if m.get('showmaterialtotal') is not None:
            self.show_materia_ttotal = m.get('showmaterialtotal')
        return self


class OrderListRequest(TeaModel):
    def __init__(
        self,
        body: OrderListRequestBody = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = OrderListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OrderDetailRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        number: str = None,
    ):
        self.id = id
        self.number = number

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.number is not None:
            result['number'] = self.number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('number') is not None:
            self.number = m.get('number')
        return self


class OrderDetailRequest(TeaModel):
    def __init__(
        self,
        body: OrderDetailRequestBody = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = OrderDetailRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OrderMaterialEntry(TeaModel):
    def __init__(
        self,
        material: str = None,
        stock: str = None,
        sp_id: str = None,
        qty: str = None,
        unit: str = None,
        price: str = None,
        cess: str = None,
        tax_amount: str = None,
        dis_amount: str = None,
        discount: str = None,
        comment: str = None,
        aux_prop: str = None,
        delivery_date: str = None,
        regain_price: bool = None,
    ):
        # 商品
        self.material = material
        # 仓库
        self.stock = stock
        # 仓位，启用了仓位管理则必填
        self.sp_id = sp_id
        # 数量
        self.qty = qty
        # 单位
        self.unit = unit
        # 单价
        self.price = price
        # 商品增值税税率；不传后端自取，传入则以传入为准
        self.cess = cess
        # 商品税额
        self.tax_amount = tax_amount
        # 折扣额
        self.dis_amount = dis_amount
        # 折扣（折）
        self.discount = discount
        # 商品行备注
        self.comment = comment
        # 辅助属性；辅助属性商品必填
        self.aux_prop = aux_prop
        # 预计交货日期
        self.delivery_date = delivery_date
        # 修改数量是否重新取价；默认为：true
        self.regain_price = regain_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.material is not None:
            result['materialid_id'] = self.material
        if self.stock is not None:
            result['stockid_id'] = self.stock
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.qty is not None:
            result['qty'] = self.qty
        if self.unit is not None:
            result['unit_id'] = self.unit
        if self.price is not None:
            result['price'] = self.price
        if self.cess is not None:
            result['cess'] = self.cess
        if self.tax_amount is not None:
            result['taxamount'] = self.tax_amount
        if self.dis_amount is not None:
            result['disamount'] = self.dis_amount
        if self.discount is not None:
            result['discount'] = self.discount
        if self.comment is not None:
            result['comment'] = self.comment
        if self.aux_prop is not None:
            result['auxpropid_id'] = self.aux_prop
        if self.delivery_date is not None:
            result['deliverydate'] = self.delivery_date
        if self.regain_price is not None:
            result['regain_price'] = self.regain_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('materialid_id') is not None:
            self.material = m.get('materialid_id')
        if m.get('stockid_id') is not None:
            self.stock = m.get('stockid_id')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('unit_id') is not None:
            self.unit = m.get('unit_id')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('cess') is not None:
            self.cess = m.get('cess')
        if m.get('taxamount') is not None:
            self.tax_amount = m.get('taxamount')
        if m.get('disamount') is not None:
            self.dis_amount = m.get('disamount')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('auxpropid_id') is not None:
            self.aux_prop = m.get('auxpropid_id')
        if m.get('deliverydate') is not None:
            self.delivery_date = m.get('deliverydate')
        if m.get('regain_price') is not None:
            self.regain_price = m.get('regain_price')
        return self


class OrderDetail(TeaModel):
    def __init__(
        self,
        bill_source: str = None,
        id: str = None,
        operation_key: str = None,
        bill_date: str = None,
        customer: str = None,
        emp: str = None,
        remark: str = None,
        link_man_for_contact: str = None,
        phone_for_contact: str = None,
        country_for_contact: str = None,
        province_for_contact: str = None,
        city_for_contact: str = None,
        district_for_contact: str = None,
        address_for_contact: str = None,
        link_man_for_dispatcher: str = None,
        phone_for_dispatcher: str = None,
        country_for_dispatcher: str = None,
        province_for_dispatcher: str = None,
        city_for_dispatcher: str = None,
        district_for_dispatcher: str = None,
        address_for_dispatcher: str = None,
        delivery_type: str = None,
        discount_amount: str = None,
        discount_rate: str = None,
        cost_fee: str = None,
        cost_fee_entries: CostFeeEntry = None,
        allocate_rule: str = None,
        total_ins_amount: str = None,
        total_amount: str = None,
        payment_entries: List[PaymentEntry] = None,
        material_entries: List[OrderMaterialEntry] = None,
        attachments: List[AttachmentEntry] = None,
        customer_fee: List[CustomFeeEntity] = None,
        customer_exchange_rate: str = None,
        customer_currency: str = None,
        customer_fee_status: str = None,
        required_invoice: bool = None,
        ignore_warn: bool = None,
    ):
        # 单据来源；
        self.bill_source = bill_source
        self.id = id
        # 操作类型，固定取值：special_save，执行特殊保存时必填
        self.operation_key = operation_key
        # 出库日期,格式：2019-01-01
        self.bill_date = bill_date
        # 客户
        self.customer = customer
        # 业务员
        self.emp = emp
        # 单据备注
        self.remark = remark
        # 联系信息-联系人
        self.link_man_for_contact = link_man_for_contact
        # 联系信息-联系方式
        self.phone_for_contact = phone_for_contact
        # 联系信息-国家ID
        self.country_for_contact = country_for_contact
        # 联系信息-省ID
        self.province_for_contact = province_for_contact
        # 联系信息-市ID
        self.city_for_contact = city_for_contact
        # 联系信息-区ID
        self.district_for_contact = district_for_contact
        # 联系信息-详细地址
        self.address_for_contact = address_for_contact
        # 发货地址-联系人
        self.link_man_for_dispatcher = link_man_for_dispatcher
        # 发货地址-联系方式
        self.phone_for_dispatcher = phone_for_dispatcher
        # 发货地址-国家ID
        self.country_for_dispatcher = country_for_dispatcher
        # 发货地址-省ID
        self.province_for_dispatcher = province_for_dispatcher
        # 发货地址-市ID
        self.city_for_dispatcher = city_for_dispatcher
        # 发货地址-区ID
        self.district_for_dispatcher = district_for_dispatcher
        # 发货地址-详细地址
        self.address_for_dispatcher = address_for_dispatcher
        # 交货方式id,6:物流配送;8:车辆配送,9:客户自提
        self.delivery_type = delivery_type
        # 整单折扣额
        self.discount_amount = discount_amount
        # 整单折扣率%\
        self.discount_rate = discount_rate
        # 销售费用
        self.cost_fee = cost_fee
        # 销售费用明细，没有则传null或不传该字段
        self.cost_fee_entries = cost_fee_entries
        # 销售费用分摊规则；”1”: 按价税合计分摊（默认）； “2”:按数量分摊
        self.allocate_rule = allocate_rule
        # 本次收款
        self.total_ins_amount = total_ins_amount
        # 本次应收账款
        self.total_amount = total_amount
        # 收款账户
        self.payment_entries = payment_entries
        # 商品分录
        self.material_entries = material_entries
        # 附件地址
        self.attachments = attachments
        # 客户承担费用单据体
        self.customer_fee = customer_fee
        # 客户承担费用汇率
        self.customer_exchange_rate = customer_exchange_rate
        # 客户承担费用币别id
        self.customer_currency = customer_currency
        # 客户承担费用参数状态；”B”：计入应收账款，”O”：计入其他收入
        self.customer_fee_status = customer_fee_status
        # 是否需要开票
        self.required_invoice = required_invoice
        # 是否忽略告警信息(如：单价为0)保存订单，true:忽略，默认false
        self.ignore_warn = ignore_warn

    def validate(self):
        if self.cost_fee_entries:
            self.cost_fee_entries.validate()
        if self.payment_entries:
            for k in self.payment_entries:
                if k:
                    k.validate()
        if self.material_entries:
            for k in self.material_entries:
                if k:
                    k.validate()
        if self.attachments:
            for k in self.attachments:
                if k:
                    k.validate()
        if self.customer_fee:
            for k in self.customer_fee:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_source is not None:
            result['billsource'] = self.bill_source
        if self.id is not None:
            result['id'] = self.id
        if self.operation_key is not None:
            result['operationkey'] = self.operation_key
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.customer is not None:
            result['customerid_id'] = self.customer
        if self.emp is not None:
            result['empid_id'] = self.emp
        if self.remark is not None:
            result['remark'] = self.remark
        if self.link_man_for_contact is not None:
            result['contact_linkman'] = self.link_man_for_contact
        if self.phone_for_contact is not None:
            result['contact_phone'] = self.phone_for_contact
        if self.country_for_contact is not None:
            result['contact_country_id'] = self.country_for_contact
        if self.province_for_contact is not None:
            result['contact_province_id'] = self.province_for_contact
        if self.city_for_contact is not None:
            result['contact_city_id'] = self.city_for_contact
        if self.district_for_contact is not None:
            result['contact_district_id'] = self.district_for_contact
        if self.address_for_contact is not None:
            result['contact_address'] = self.address_for_contact
        if self.link_man_for_dispatcher is not None:
            result['dispatcher_linkman'] = self.link_man_for_dispatcher
        if self.phone_for_dispatcher is not None:
            result['dispatcher_phone'] = self.phone_for_dispatcher
        if self.country_for_dispatcher is not None:
            result['dispatcher_country_id'] = self.country_for_dispatcher
        if self.province_for_dispatcher is not None:
            result['dispatcher_province_id'] = self.province_for_dispatcher
        if self.city_for_dispatcher is not None:
            result['dispatcher_city_id'] = self.city_for_dispatcher
        if self.district_for_dispatcher is not None:
            result['dispatcher_district_id'] = self.district_for_dispatcher
        if self.address_for_dispatcher is not None:
            result['dispatcher_address'] = self.address_for_dispatcher
        if self.delivery_type is not None:
            result['delivery_type_id'] = self.delivery_type
        if self.discount_amount is not None:
            result['bill_dis_amount'] = self.discount_amount
        if self.discount_rate is not None:
            result['bill_dis_rate'] = self.discount_rate
        if self.cost_fee is not None:
            result['cost_fee'] = self.cost_fee
        if self.cost_fee_entries is not None:
            result['cost_fee_entity'] = self.cost_fee_entries.to_map()
        if self.allocate_rule is not None:
            result['allocate_rule'] = self.allocate_rule
        if self.total_ins_amount is not None:
            result['totalinsamount'] = self.total_ins_amount
        if self.total_amount is not None:
            result['totalamount'] = self.total_amount
        result['payment_entry'] = []
        if self.payment_entries is not None:
            for k in self.payment_entries:
                result['payment_entry'].append(k.to_map() if k else None)
        result['material_entity'] = []
        if self.material_entries is not None:
            for k in self.material_entries:
                result['material_entity'].append(k.to_map() if k else None)
        result['attachments_url'] = []
        if self.attachments is not None:
            for k in self.attachments:
                result['attachments_url'].append(k.to_map() if k else None)
        result['cus_bear_fee_entry'] = []
        if self.customer_fee is not None:
            for k in self.customer_fee:
                result['cus_bear_fee_entry'].append(k.to_map() if k else None)
        if self.customer_exchange_rate is not None:
            result['cus_exchangerate'] = self.customer_exchange_rate
        if self.customer_currency is not None:
            result['cus_currency_id'] = self.customer_currency
        if self.customer_fee_status is not None:
            result['cus_bear_fee_status'] = self.customer_fee_status
        if self.required_invoice is not None:
            result['requiredinvoice'] = self.required_invoice
        if self.ignore_warn is not None:
            result['ignorewarn'] = self.ignore_warn
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('billsource') is not None:
            self.bill_source = m.get('billsource')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('operationkey') is not None:
            self.operation_key = m.get('operationkey')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('customerid_id') is not None:
            self.customer = m.get('customerid_id')
        if m.get('empid_id') is not None:
            self.emp = m.get('empid_id')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('contact_linkman') is not None:
            self.link_man_for_contact = m.get('contact_linkman')
        if m.get('contact_phone') is not None:
            self.phone_for_contact = m.get('contact_phone')
        if m.get('contact_country_id') is not None:
            self.country_for_contact = m.get('contact_country_id')
        if m.get('contact_province_id') is not None:
            self.province_for_contact = m.get('contact_province_id')
        if m.get('contact_city_id') is not None:
            self.city_for_contact = m.get('contact_city_id')
        if m.get('contact_district_id') is not None:
            self.district_for_contact = m.get('contact_district_id')
        if m.get('contact_address') is not None:
            self.address_for_contact = m.get('contact_address')
        if m.get('dispatcher_linkman') is not None:
            self.link_man_for_dispatcher = m.get('dispatcher_linkman')
        if m.get('dispatcher_phone') is not None:
            self.phone_for_dispatcher = m.get('dispatcher_phone')
        if m.get('dispatcher_country_id') is not None:
            self.country_for_dispatcher = m.get('dispatcher_country_id')
        if m.get('dispatcher_province_id') is not None:
            self.province_for_dispatcher = m.get('dispatcher_province_id')
        if m.get('dispatcher_city_id') is not None:
            self.city_for_dispatcher = m.get('dispatcher_city_id')
        if m.get('dispatcher_district_id') is not None:
            self.district_for_dispatcher = m.get('dispatcher_district_id')
        if m.get('dispatcher_address') is not None:
            self.address_for_dispatcher = m.get('dispatcher_address')
        if m.get('delivery_type_id') is not None:
            self.delivery_type = m.get('delivery_type_id')
        if m.get('bill_dis_amount') is not None:
            self.discount_amount = m.get('bill_dis_amount')
        if m.get('bill_dis_rate') is not None:
            self.discount_rate = m.get('bill_dis_rate')
        if m.get('cost_fee') is not None:
            self.cost_fee = m.get('cost_fee')
        if m.get('cost_fee_entity') is not None:
            temp_model = CostFeeEntry()
            self.cost_fee_entries = temp_model.from_map(m['cost_fee_entity'])
        if m.get('allocate_rule') is not None:
            self.allocate_rule = m.get('allocate_rule')
        if m.get('totalinsamount') is not None:
            self.total_ins_amount = m.get('totalinsamount')
        if m.get('totalamount') is not None:
            self.total_amount = m.get('totalamount')
        self.payment_entries = []
        if m.get('payment_entry') is not None:
            for k in m.get('payment_entry'):
                temp_model = PaymentEntry()
                self.payment_entries.append(temp_model.from_map(k))
        self.material_entries = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = OrderMaterialEntry()
                self.material_entries.append(temp_model.from_map(k))
        self.attachments = []
        if m.get('attachments_url') is not None:
            for k in m.get('attachments_url'):
                temp_model = AttachmentEntry()
                self.attachments.append(temp_model.from_map(k))
        self.customer_fee = []
        if m.get('cus_bear_fee_entry') is not None:
            for k in m.get('cus_bear_fee_entry'):
                temp_model = CustomFeeEntity()
                self.customer_fee.append(temp_model.from_map(k))
        if m.get('cus_exchangerate') is not None:
            self.customer_exchange_rate = m.get('cus_exchangerate')
        if m.get('cus_currency_id') is not None:
            self.customer_currency = m.get('cus_currency_id')
        if m.get('cus_bear_fee_status') is not None:
            self.customer_fee_status = m.get('cus_bear_fee_status')
        if m.get('requiredinvoice') is not None:
            self.required_invoice = m.get('requiredinvoice')
        if m.get('ignorewarn') is not None:
            self.ignore_warn = m.get('ignorewarn')
        return self


class OrderDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: OrderDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = OrderDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class OrderSaveRequest(TeaModel):
    def __init__(
        self,
        body: OrderDetail = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = OrderDetail()
            self.body = temp_model.from_map(m['body'])
        return self


class CustomFeeEntity(TeaModel):
    def __init__(
        self,
        id: str = None,
        name: str = None,
        amount: str = None,
        comment: str = None,
    ):
        self.id = id
        # 收入名称id
        self.name = name
        # 收入金额
        self.amount = amount
        # 客户承担费用备注
        self.comment = comment

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.name is not None:
            result['income_name_id'] = self.name
        if self.amount is not None:
            result['income_amount'] = self.amount
        if self.comment is not None:
            result['income_comment'] = self.comment
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('income_name_id') is not None:
            self.name = m.get('income_name_id')
        if m.get('income_amount') is not None:
            self.amount = m.get('income_amount')
        if m.get('income_comment') is not None:
            self.comment = m.get('income_comment')
        return self


class PaymentEntry(TeaModel):
    def __init__(
        self,
        id: str = None,
        account: str = None,
        type_id: str = None,
        payed_amount: str = None,
        amount_for: str = None,
        comment: str = None,
        seq: str = None,
        transnumber: str = None,
    ):
        self.id = id
        # 收款账户
        self.account = account
        # 收款方式
        self.type_id = type_id
        # 收款金额
        self.payed_amount = payed_amount
        # 收款金额
        self.amount_for = amount_for
        # 备注
        self.comment = comment
        self.seq = seq
        self.transnumber = transnumber

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.account is not None:
            result['settleaccountid_id'] = self.account
        if self.type_id is not None:
            result['paytypeid_id'] = self.type_id
        if self.payed_amount is not None:
            result['paid_amount'] = self.payed_amount
        if self.amount_for is not None:
            result['amountor'] = self.amount_for
        if self.comment is not None:
            result['pay_comment'] = self.comment
        if self.seq is not None:
            result['seq'] = self.seq
        if self.transnumber is not None:
            result['transnumber'] = self.transnumber
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('settleaccountid_id') is not None:
            self.account = m.get('settleaccountid_id')
        if m.get('paytypeid_id') is not None:
            self.type_id = m.get('paytypeid_id')
        if m.get('paid_amount') is not None:
            self.payed_amount = m.get('paid_amount')
        if m.get('amountor') is not None:
            self.amount_for = m.get('amountor')
        if m.get('pay_comment') is not None:
            self.comment = m.get('pay_comment')
        if m.get('seq') is not None:
            self.seq = m.get('seq')
        if m.get('transnumber') is not None:
            self.transnumber = m.get('transnumber')
        return self


class AttachmentEntry(TeaModel):
    def __init__(
        self,
        id: str = None,
        panel: str = None,
        url: str = None,
    ):
        self.id = id
        self.panel = panel
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.panel is not None:
            result['panel'] = self.panel
        if self.url is not None:
            result['url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('panel') is not None:
            self.panel = m.get('panel')
        if m.get('url') is not None:
            self.url = m.get('url')
        return self


class OrderLockDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        stock: str = None,
        sp_id: str = None,
        lock_qty: str = None,
        batch_no: str = None,
    ):
        self.id = id
        # 仓库
        self.stock = stock
        # 仓位 （没有时传0）
        self.sp_id = sp_id
        # 锁库数量
        self.lock_qty = lock_qty
        # 批次 （没有时传空字符）
        self.batch_no = batch_no

    def validate(self):
        self.validate_required(self.id, 'id')
        self.validate_required(self.stock, 'stock')
        self.validate_required(self.sp_id, 'sp_id')
        self.validate_required(self.lock_qty, 'lock_qty')
        self.validate_required(self.batch_no, 'batch_no')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.stock is not None:
            result['stockid_id'] = self.stock
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.lock_qty is not None:
            result['lockqty'] = self.lock_qty
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('stockid_id') is not None:
            self.stock = m.get('stockid_id')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('lockqty') is not None:
            self.lock_qty = m.get('lockqty')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        return self


class OrderLockRequestBody(TeaModel):
    def __init__(
        self,
        bill_id: str = None,
        is_auto: bool = None,
        entries: List[OrderLockDetail] = None,
    ):
        self.bill_id = bill_id
        self.is_auto = is_auto
        # 指定商品行锁库 //当isAuto为false时必填
        self.entries = entries

    def validate(self):
        self.validate_required(self.bill_id, 'bill_id')
        self.validate_required(self.is_auto, 'is_auto')
        if self.entries:
            for k in self.entries:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_id is not None:
            result['billid'] = self.bill_id
        if self.is_auto is not None:
            result['isAuto'] = self.is_auto
        result['material_entity'] = []
        if self.entries is not None:
            for k in self.entries:
                result['material_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('billid') is not None:
            self.bill_id = m.get('billid')
        if m.get('isAuto') is not None:
            self.is_auto = m.get('isAuto')
        self.entries = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = OrderLockDetail()
                self.entries.append(temp_model.from_map(k))
        return self


class OrderLockRequest(TeaModel):
    def __init__(
        self,
        body: OrderLockRequestBody = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = OrderLockRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetOrderStatusRequestBody(TeaModel):
    def __init__(
        self,
        bill_ids: List[str] = None,
    ):
        self.bill_ids = bill_ids

    def validate(self):
        self.validate_required(self.bill_ids, 'bill_ids')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_ids is not None:
            result['billids'] = self.bill_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('billids') is not None:
            self.bill_ids = m.get('billids')
        return self


class GetOrderStatusRequest(TeaModel):
    def __init__(
        self,
        body: GetOrderStatusRequestBody = None,
    ):
        self.body = body
        # 查询销售订单状态

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = GetOrderStatusRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OutboundListRequestBody(TeaModel):
    def __init__(
        self,
        depts: List[str] = None,
        emps: List[str] = None,
        bill_status: str = None,
        settle_status: str = None,
        delivery_status: str = None,
        delivery_type: str = None,
        currency: str = None,
        customerid: str = None,
        start_bill_date: str = None,
        end_bill_date: str = None,
        start_date: str = None,
        end_date: str = None,
        begin_date: str = None,
        expire_date: str = None,
        start_time: int = None,
        end_time: int = None,
        begin_time: int = None,
        expire_time: int = None,
        creator_ids: List[str] = None,
        search: str = None,
        filter_zero: str = None,
        payment_flag: str = None,
        page: int = None,
        pagesize: int = None,
        select_fields: str = None,
        order_by: str = None,
        top: int = None,
        total_fields: str = None,
        show_materia_ttotal: bool = None,
    ):
        self.depts = depts
        self.emps = emps
        # 单据状态（所有：“”，已审核：“C”，未审核：“Z”）
        self.bill_status = bill_status
        # 付款状态（所有：“”，全部收款：“C”，部分收款：“B”，未收款：“A”，待收款（=部分收款+未收款）：“M”）
        self.settle_status = settle_status
        # 配送状态（所有：“”，全部配送：“A”，部分配送：“P”，未配送：“N”，无需配送：“C”,待配送（=部分配送+未配送）：“M”）
        self.delivery_status = delivery_status
        # 交货方式编码（所有：“”，物流发货：“JHFS01”，车辆配送：“JHFS03”，客户自提：“JHFS04”）
        self.delivery_type = delivery_type
        # 币别
        self.currency = currency
        # 客户
        self.customerid = customerid
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），单据日期
        self.start_bill_date = start_bill_date
        # 结束日期 单据日期
        self.end_bill_date = end_bill_date
        # 开始日期 创建日期
        self.start_date = start_date
        # 结束日期 创建日期
        self.end_date = end_date
        # 开始日期 修改日期
        self.begin_date = begin_date
        # 结束日期 修改日期
        self.expire_date = expire_date
        # 开始时间 创建日期
        self.start_time = start_time
        # 结束时间 创建日期
        self.end_time = end_time
        # 开始时间 修改日期
        self.begin_time = begin_time
        # 结束时间 修改日期
        self.expire_time = expire_time
        # 制单人，格式：[“制单人id”,”制单人id”]
        self.creator_ids = creator_ids
        self.search = search
        # 过滤字段值为0记录：目前仅支持totalunsettleamount
        self.filter_zero = filter_zero
        # 是否同单收款（全部：-1，1：是，0：否）
        self.payment_flag = payment_flag
        self.page = page
        self.pagesize = pagesize
        # 自定义返回字段（除默认字段外），多个字段用英文逗号隔开，支持的字段见下面解析
        self.select_fields = select_fields
        # 排序说明
        self.order_by = order_by
        self.top = top
        # 合计值字段，多个字段用英文逗号隔开，支持的字段：total（默认：价税合计）、totalunsettleamount（未收金额）、totalinsamount（收款合计）、totalamount（本次应收账款）
        self.total_fields = total_fields
        # 是否统计商品种类和数量到单据，默认false
        self.show_materia_ttotal = show_materia_ttotal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.depts is not None:
            result['deptid'] = self.depts
        if self.emps is not None:
            result['empid'] = self.emps
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.settle_status is not None:
            result['settlestatus'] = self.settle_status
        if self.delivery_status is not None:
            result['deliverystatus'] = self.delivery_status
        if self.delivery_type is not None:
            result['delivery_type'] = self.delivery_type
        if self.currency is not None:
            result['currencyid'] = self.currency
        if self.customerid is not None:
            result['customerId'] = self.customerid
        if self.start_bill_date is not None:
            result['startbilldate'] = self.start_bill_date
        if self.end_bill_date is not None:
            result['endbilldate'] = self.end_bill_date
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.begin_date is not None:
            result['begindate'] = self.begin_date
        if self.expire_date is not None:
            result['expiredate'] = self.expire_date
        if self.start_time is not None:
            result['starttime'] = self.start_time
        if self.end_time is not None:
            result['endtime'] = self.end_time
        if self.begin_time is not None:
            result['begintime'] = self.begin_time
        if self.expire_time is not None:
            result['expiretime'] = self.expire_time
        if self.creator_ids is not None:
            result['creatorid'] = self.creator_ids
        if self.search is not None:
            result['search'] = self.search
        if self.filter_zero is not None:
            result['filterzero'] = self.filter_zero
        if self.payment_flag is not None:
            result['payment_flag'] = self.payment_flag
        if self.page is not None:
            result['page'] = self.page
        if self.pagesize is not None:
            result['pagesize'] = self.pagesize
        if self.select_fields is not None:
            result['selectfields'] = self.select_fields
        if self.order_by is not None:
            result['orderby'] = self.order_by
        if self.top is not None:
            result['top'] = self.top
        if self.total_fields is not None:
            result['totalfields'] = self.total_fields
        if self.show_materia_ttotal is not None:
            result['showmaterialtotal'] = self.show_materia_ttotal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('deptid') is not None:
            self.depts = m.get('deptid')
        if m.get('empid') is not None:
            self.emps = m.get('empid')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('settlestatus') is not None:
            self.settle_status = m.get('settlestatus')
        if m.get('deliverystatus') is not None:
            self.delivery_status = m.get('deliverystatus')
        if m.get('delivery_type') is not None:
            self.delivery_type = m.get('delivery_type')
        if m.get('currencyid') is not None:
            self.currency = m.get('currencyid')
        if m.get('customerId') is not None:
            self.customerid = m.get('customerId')
        if m.get('startbilldate') is not None:
            self.start_bill_date = m.get('startbilldate')
        if m.get('endbilldate') is not None:
            self.end_bill_date = m.get('endbilldate')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('begindate') is not None:
            self.begin_date = m.get('begindate')
        if m.get('expiredate') is not None:
            self.expire_date = m.get('expiredate')
        if m.get('starttime') is not None:
            self.start_time = m.get('starttime')
        if m.get('endtime') is not None:
            self.end_time = m.get('endtime')
        if m.get('begintime') is not None:
            self.begin_time = m.get('begintime')
        if m.get('expiretime') is not None:
            self.expire_time = m.get('expiretime')
        if m.get('creatorid') is not None:
            self.creator_ids = m.get('creatorid')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('filterzero') is not None:
            self.filter_zero = m.get('filterzero')
        if m.get('payment_flag') is not None:
            self.payment_flag = m.get('payment_flag')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.pagesize = m.get('pagesize')
        if m.get('selectfields') is not None:
            self.select_fields = m.get('selectfields')
        if m.get('orderby') is not None:
            self.order_by = m.get('orderby')
        if m.get('top') is not None:
            self.top = m.get('top')
        if m.get('totalfields') is not None:
            self.total_fields = m.get('totalfields')
        if m.get('showmaterialtotal') is not None:
            self.show_materia_ttotal = m.get('showmaterialtotal')
        return self


class OutboundListRequest(TeaModel):
    def __init__(
        self,
        body: OutboundListRequestBody = None,
    ):
        self.body = body
        # 获取销售出库单列表接口

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = OutboundListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OutboundDetailRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        number: str = None,
    ):
        self.id = id
        self.number = number

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.number is not None:
            result['number'] = self.number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('number') is not None:
            self.number = m.get('number')
        return self


class OutboundDetailRequest(TeaModel):
    def __init__(
        self,
        body: OutboundDetailRequestBody = None,
    ):
        self.body = body
        # 获取销售出库单详情

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = OutboundDetailRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ExpressEntity(TeaModel):
    def __init__(
        self,
        delivery_billno: str = None,
        id: str = None,
        delivery_time: str = None,
        express_remark: str = None,
        seq: str = None,
    ):
        self.delivery_billno = delivery_billno
        self.id = id
        self.delivery_time = delivery_time
        self.express_remark = express_remark
        self.seq = seq

    def validate(self):
        self.validate_required(self.delivery_billno, 'delivery_billno')
        self.validate_required(self.id, 'id')
        self.validate_required(self.delivery_time, 'delivery_time')
        self.validate_required(self.express_remark, 'express_remark')
        self.validate_required(self.seq, 'seq')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.delivery_billno is not None:
            result['delivery_billno'] = self.delivery_billno
        if self.id is not None:
            result['id'] = self.id
        if self.delivery_time is not None:
            result['delivery_time'] = self.delivery_time
        if self.express_remark is not None:
            result['express_remark'] = self.express_remark
        if self.seq is not None:
            result['seq'] = self.seq
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('delivery_billno') is not None:
            self.delivery_billno = m.get('delivery_billno')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('delivery_time') is not None:
            self.delivery_time = m.get('delivery_time')
        if m.get('express_remark') is not None:
            self.express_remark = m.get('express_remark')
        if m.get('seq') is not None:
            self.seq = m.get('seq')
        return self


class OutboundMaterialEntry(TeaModel):
    def __init__(
        self,
        id: str = None,
        baseunit_id: str = None,
        material: str = None,
        stock: str = None,
        sp_id: str = None,
        qty: str = None,
        unit: str = None,
        price: str = None,
        cess: str = None,
        taxamountfor: str = None,
        srcentryid: str = None,
        snlistid: str = None,
        materialid_net_weight: str = None,
        entryinvoicedamount: str = None,
        taxprice: str = None,
        srcorderid: str = None,
        returnbaseqty: str = None,
        outersrcentryid: str = None,
        proregno: str = None,
        unittype: str = None,
        order_baseqty: str = None,
        linkfeefor: str = None,
        auxpropname: str = None,
        invoicedtaxamount: str = None,
        aux_price: str = None,
        inputcoefficient: str = None,
        ref_retail_price: str = None,
        material_set_name: str = None,
        returnqty: str = None,
        batchno: str = None,
        origin_bill_dis_rate: str = None,
        totalnetweight: str = None,
        custbillno: str = None,
        srcseq: str = None,
        src_billdate: str = None,
        feefor: str = None,
        auxcoefficient: str = None,
        invoiceddisamount: str = None,
        inv_baseqty: str = None,
        entrystatus: str = None,
        dividediffamount: str = None,
        disamount: str = None,
        actnontaxprice: str = None,
        auxqty: str = None,
        unit_id: str = None,
        caculatecoefficient: str = None,
        seq: str = None,
        invoicedactnontaxamount: str = None,
        actnontaxamount: str = None,
        entryinvoicestatus: str = None,
        balanceamountfor: str = None,
        baseqty: str = None,
        regain_price: str = None,
        acttaxprice: str = None,
        package_1: str = None,
        auxunittype: str = None,
        package_0: str = None,
        package_3: str = None,
        package_2: str = None,
        invoicedbilldistribution: str = None,
        validdate: str = None,
        returnbillno: str = None,
        settleamountfor: str = None,
        disprice: str = None,
        totalfeefor: str = None,
        entryinvoicedqty: str = None,
        dividediffamountfor: str = None,
        fee: str = None,
        aux_taxprice: str = None,
        set_entry_qty: str = None,
        unsettleamountfor: str = None,
        serialqty: str = None,
        totalfee: str = None,
        gross_weight: str = None,
        barcode: str = None,
        package: str = None,
        returndeffloatqty: str = None,
        allamountfor: str = None,
        inv_qty: str = None,
        proplace: str = None,
        entrysettlestatus: str = None,
        set_entry_id: str = None,
        srcbillno: str = None,
        unit_name: str = None,
        volume: str = None,
        baseunit_name: str = None,
        material_model_export: str = None,
        cursettleamountfor: str = None,
        srcbillno_hyperlink: str = None,
        expectprofit: str = None,
        coefficient: str = None,
        billdisdistribution: str = None,
        settleamount: str = None,
        deffloatqty: str = None,
        linkfee: str = None,
        unitcost: str = None,
        totalvolume: str = None,
        materialid_taxrate: str = None,
        disrate: str = None,
        base_taxprice: str = None,
        srcinterid: str = None,
        cursettleamount: str = None,
        materialid_retailprice: str = None,
        materialid_leadtime: str = None,
        base_price: str = None,
        prolicense: str = None,
        material_set_code: str = None,
        material_category_export: str = None,
        distaxamount: str = None,
        unit_precision: str = None,
        amount: str = None,
        cost: str = None,
        totalgrossweight: str = None,
        predisamount: str = None,
        balanceamount: str = None,
        kfdate: str = None,
        order_qty: str = None,
        spid_name: str = None,
        allamount: str = None,
        billdisbeforeamount: str = None,
        unsettleamount: str = None,
        material_band_export: str = None,
        conversionrate: str = None,
        tax_amount: str = None,
        dis_amount: str = None,
        discount: str = None,
        is_free: str = None,
        comment: str = None,
        aux_prop: str = None,
        batch_no: str = None,
        sn_list_id: str = None,
        sn_list: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_period: str = None,
        kf_type: str = None,
    ):
        self.id = id
        self.baseunit_id = baseunit_id
        # 商品
        self.material = material
        # 仓库
        self.stock = stock
        # 仓位，启用了仓位管理则必填
        self.sp_id = sp_id
        # 数量
        self.qty = qty
        # 单位
        self.unit = unit
        # 单价
        self.price = price
        # 商品增值税税率；不传后端自取，传入则以传入为准
        self.cess = cess
        self.taxamountfor = taxamountfor
        self.srcentryid = srcentryid
        self.snlistid = snlistid
        self.materialid_net_weight = materialid_net_weight
        self.entryinvoicedamount = entryinvoicedamount
        self.taxprice = taxprice
        self.srcorderid = srcorderid
        self.returnbaseqty = returnbaseqty
        self.outersrcentryid = outersrcentryid
        self.proregno = proregno
        self.unittype = unittype
        self.order_baseqty = order_baseqty
        self.linkfeefor = linkfeefor
        self.auxpropname = auxpropname
        self.invoicedtaxamount = invoicedtaxamount
        self.aux_price = aux_price
        self.inputcoefficient = inputcoefficient
        self.ref_retail_price = ref_retail_price
        self.material_set_name = material_set_name
        self.returnqty = returnqty
        self.batchno = batchno
        self.origin_bill_dis_rate = origin_bill_dis_rate
        self.totalnetweight = totalnetweight
        self.custbillno = custbillno
        self.srcseq = srcseq
        self.src_billdate = src_billdate
        self.feefor = feefor
        self.auxcoefficient = auxcoefficient
        self.invoiceddisamount = invoiceddisamount
        self.inv_baseqty = inv_baseqty
        self.entrystatus = entrystatus
        self.dividediffamount = dividediffamount
        self.disamount = disamount
        self.actnontaxprice = actnontaxprice
        self.auxqty = auxqty
        self.unit_id = unit_id
        self.caculatecoefficient = caculatecoefficient
        self.seq = seq
        self.invoicedactnontaxamount = invoicedactnontaxamount
        self.actnontaxamount = actnontaxamount
        self.entryinvoicestatus = entryinvoicestatus
        self.balanceamountfor = balanceamountfor
        self.baseqty = baseqty
        self.regain_price = regain_price
        self.acttaxprice = acttaxprice
        self.package_1 = package_1
        self.auxunittype = auxunittype
        self.package_0 = package_0
        self.package_3 = package_3
        self.package_2 = package_2
        self.invoicedbilldistribution = invoicedbilldistribution
        self.validdate = validdate
        self.returnbillno = returnbillno
        self.is_free = is_free
        self.settleamountfor = settleamountfor
        self.disprice = disprice
        self.totalfeefor = totalfeefor
        self.entryinvoicedqty = entryinvoicedqty
        self.dividediffamountfor = dividediffamountfor
        self.fee = fee
        self.aux_taxprice = aux_taxprice
        self.set_entry_qty = set_entry_qty
        self.unsettleamountfor = unsettleamountfor
        self.sn_list = sn_list
        self.serialqty = serialqty
        self.totalfee = totalfee
        self.gross_weight = gross_weight
        self.barcode = barcode
        self.package = package
        self.returndeffloatqty = returndeffloatqty
        self.allamountfor = allamountfor
        self.inv_qty = inv_qty
        self.proplace = proplace
        self.entrysettlestatus = entrysettlestatus
        self.set_entry_id = set_entry_id
        self.srcbillno = srcbillno
        self.unit_name = unit_name
        self.volume = volume
        self.baseunit_name = baseunit_name
        self.material_model_export = material_model_export
        self.cursettleamountfor = cursettleamountfor
        self.srcbillno_hyperlink = srcbillno_hyperlink
        self.expectprofit = expectprofit
        self.coefficient = coefficient
        self.billdisdistribution = billdisdistribution
        self.settleamount = settleamount
        self.deffloatqty = deffloatqty
        self.linkfee = linkfee
        self.unitcost = unitcost
        self.totalvolume = totalvolume
        self.materialid_taxrate = materialid_taxrate
        self.disrate = disrate
        self.base_taxprice = base_taxprice
        self.srcinterid = srcinterid
        self.cursettleamount = cursettleamount
        self.materialid_retailprice = materialid_retailprice
        self.materialid_leadtime = materialid_leadtime
        self.base_price = base_price
        self.prolicense = prolicense
        self.material_set_code = material_set_code
        self.material_category_export = material_category_export
        self.distaxamount = distaxamount
        self.unit_precision = unit_precision
        self.amount = amount
        self.cost = cost
        self.totalgrossweight = totalgrossweight
        self.predisamount = predisamount
        self.balanceamount = balanceamount
        self.kfdate = kfdate
        self.order_qty = order_qty
        self.spid_name = spid_name
        self.allamount = allamount
        self.billdisbeforeamount = billdisbeforeamount
        self.unsettleamount = unsettleamount
        self.material_band_export = material_band_export
        self.conversionrate = conversionrate
        # 商品税额
        self.tax_amount = tax_amount
        # 折扣额
        self.dis_amount = dis_amount
        # 折扣（折）
        self.discount = discount
        # 是否赠品；true-是，false-否（默认）
        self.is_free = is_free
        # 商品行备注
        self.comment = comment
        # 辅助属性；辅助属性商品必填( 从商品详情中auxentity的id字段取值 )
        self.aux_prop = aux_prop
        # 批次；批次商品必填
        self.batch_no = batch_no
        # 序列号流转id；单据新增后会在单据详情中带回这个字段信息，序列号商品修改时必填
        self.sn_list_id = sn_list_id
        # 序列号 格式：001:备注1;002:备注2 （序列号:序列号备注 多个序列号以英文分号字符;分隔）,序列号商品必填
        self.sn_list = sn_list
        # 生产日期；格式：20190101，保质期商品必填
        self.kf_date = kf_date
        # 到期日；格式：20190101，保质期商品必填
        self.valid_date = valid_date
        # 保质期；保质期商品必填
        self.kf_period = kf_period
        # 保质期单位；保质期商品必填：1-天，2-月，3-年
        self.kf_type = kf_type
        # 修改数量是否重新取价；默认为：true
        self.regain_price = regain_price

    def validate(self):
        self.validate_required(self.caculatecoefficient, 'caculatecoefficient')
        self.validate_required(self.settleamountfor, 'settleamountfor')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.baseunit_id is not None:
            result['baseunit_id'] = self.baseunit_id
        if self.material is not None:
            result['materialid_id'] = self.material
        if self.stock is not None:
            result['stockid_id'] = self.stock
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.qty is not None:
            result['qty'] = self.qty
        if self.unit is not None:
            result['unit_id'] = self.unit
        if self.price is not None:
            result['price'] = self.price
        if self.cess is not None:
            result['cess'] = self.cess
        if self.taxamountfor is not None:
            result['taxamountfor'] = self.taxamountfor
        if self.srcentryid is not None:
            result['srcentryid'] = self.srcentryid
        if self.snlistid is not None:
            result['snlistid'] = self.snlistid
        if self.materialid_net_weight is not None:
            result['materialid_net_weight'] = self.materialid_net_weight
        if self.entryinvoicedamount is not None:
            result['entryinvoicedamount'] = self.entryinvoicedamount
        if self.taxprice is not None:
            result['taxprice'] = self.taxprice
        if self.srcorderid is not None:
            result['srcorderid'] = self.srcorderid
        if self.returnbaseqty is not None:
            result['returnbaseqty'] = self.returnbaseqty
        if self.outersrcentryid is not None:
            result['outersrcentryid'] = self.outersrcentryid
        if self.proregno is not None:
            result['proregno'] = self.proregno
        if self.unittype is not None:
            result['unittype'] = self.unittype
        if self.order_baseqty is not None:
            result['order_baseqty'] = self.order_baseqty
        if self.linkfeefor is not None:
            result['linkfeefor'] = self.linkfeefor
        if self.auxpropname is not None:
            result['auxpropname'] = self.auxpropname
        if self.invoicedtaxamount is not None:
            result['invoicedtaxamount'] = self.invoicedtaxamount
        if self.aux_price is not None:
            result['aux_price'] = self.aux_price
        if self.inputcoefficient is not None:
            result['inputcoefficient'] = self.inputcoefficient
        if self.ref_retail_price is not None:
            result['ref_retail_price'] = self.ref_retail_price
        if self.material_set_name is not None:
            result['material_set_name'] = self.material_set_name
        if self.returnqty is not None:
            result['returnqty'] = self.returnqty
        if self.batchno is not None:
            result['batchno'] = self.batchno
        if self.origin_bill_dis_rate is not None:
            result['origin_bill_dis_rate'] = self.origin_bill_dis_rate
        if self.totalnetweight is not None:
            result['totalnetweight'] = self.totalnetweight
        if self.custbillno is not None:
            result['custbillno'] = self.custbillno
        if self.srcseq is not None:
            result['srcseq'] = self.srcseq
        if self.src_billdate is not None:
            result['src_billdate'] = self.src_billdate
        if self.feefor is not None:
            result['feefor'] = self.feefor
        if self.auxcoefficient is not None:
            result['auxcoefficient'] = self.auxcoefficient
        if self.invoiceddisamount is not None:
            result['invoiceddisamount'] = self.invoiceddisamount
        if self.inv_baseqty is not None:
            result['inv_baseqty'] = self.inv_baseqty
        if self.entrystatus is not None:
            result['entrystatus'] = self.entrystatus
        if self.dividediffamount is not None:
            result['dividediffamount'] = self.dividediffamount
        if self.disamount is not None:
            result['disamount'] = self.disamount
        if self.actnontaxprice is not None:
            result['actnontaxprice'] = self.actnontaxprice
        if self.auxqty is not None:
            result['auxqty'] = self.auxqty
        if self.unit_id is not None:
            result['unit_id'] = self.unit_id
        if self.caculatecoefficient is not None:
            result['caculatecoefficient'] = self.caculatecoefficient
        if self.seq is not None:
            result['seq'] = self.seq
        if self.invoicedactnontaxamount is not None:
            result['invoicedactnontaxamount'] = self.invoicedactnontaxamount
        if self.actnontaxamount is not None:
            result['actnontaxamount'] = self.actnontaxamount
        if self.entryinvoicestatus is not None:
            result['entryinvoicestatus'] = self.entryinvoicestatus
        if self.balanceamountfor is not None:
            result['balanceamountfor'] = self.balanceamountfor
        if self.baseqty is not None:
            result['baseqty'] = self.baseqty
        if self.regain_price is not None:
            result['regain_price'] = self.regain_price
        if self.acttaxprice is not None:
            result['acttaxprice'] = self.acttaxprice
        if self.package_1 is not None:
            result['package1'] = self.package_1
        if self.auxunittype is not None:
            result['auxunittype'] = self.auxunittype
        if self.package_0 is not None:
            result['package0'] = self.package_0
        if self.package_3 is not None:
            result['package3'] = self.package_3
        if self.package_2 is not None:
            result['package2'] = self.package_2
        if self.invoicedbilldistribution is not None:
            result['invoicedbilldistribution'] = self.invoicedbilldistribution
        if self.validdate is not None:
            result['validdate'] = self.validdate
        if self.returnbillno is not None:
            result['returnbillno'] = self.returnbillno
        if self.is_free is not None:
            result['is_free'] = self.is_free
        if self.settleamountfor is not None:
            result['settleamountfor'] = self.settleamountfor
        if self.disprice is not None:
            result['disprice'] = self.disprice
        if self.totalfeefor is not None:
            result['totalfeefor'] = self.totalfeefor
        if self.entryinvoicedqty is not None:
            result['entryinvoicedqty'] = self.entryinvoicedqty
        if self.dividediffamountfor is not None:
            result['dividediffamountfor'] = self.dividediffamountfor
        if self.fee is not None:
            result['fee'] = self.fee
        if self.aux_taxprice is not None:
            result['aux_taxprice'] = self.aux_taxprice
        if self.set_entry_qty is not None:
            result['set_entry_qty'] = self.set_entry_qty
        if self.unsettleamountfor is not None:
            result['unsettleamountfor'] = self.unsettleamountfor
        if self.sn_list is not None:
            result['sn_list'] = self.sn_list
        if self.serialqty is not None:
            result['serialqty'] = self.serialqty
        if self.totalfee is not None:
            result['totalfee'] = self.totalfee
        if self.gross_weight is not None:
            result['gross_weight'] = self.gross_weight
        if self.barcode is not None:
            result['barcode'] = self.barcode
        if self.package is not None:
            result['package'] = self.package
        if self.returndeffloatqty is not None:
            result['returndeffloatqty'] = self.returndeffloatqty
        if self.allamountfor is not None:
            result['allamountfor'] = self.allamountfor
        if self.inv_qty is not None:
            result['inv_qty'] = self.inv_qty
        if self.proplace is not None:
            result['proplace'] = self.proplace
        if self.entrysettlestatus is not None:
            result['entrysettlestatus'] = self.entrysettlestatus
        if self.set_entry_id is not None:
            result['set_entry_id'] = self.set_entry_id
        if self.srcbillno is not None:
            result['srcbillno'] = self.srcbillno
        if self.unit_name is not None:
            result['unit_name'] = self.unit_name
        if self.volume is not None:
            result['volume'] = self.volume
        if self.baseunit_name is not None:
            result['baseunit_name'] = self.baseunit_name
        if self.material_model_export is not None:
            result['material_model_export'] = self.material_model_export
        if self.cursettleamountfor is not None:
            result['cursettleamountfor'] = self.cursettleamountfor
        if self.srcbillno_hyperlink is not None:
            result['srcbillno_hyperlink'] = self.srcbillno_hyperlink
        if self.expectprofit is not None:
            result['expectprofit'] = self.expectprofit
        if self.coefficient is not None:
            result['coefficient'] = self.coefficient
        if self.billdisdistribution is not None:
            result['billdisdistribution'] = self.billdisdistribution
        if self.settleamount is not None:
            result['settleamount'] = self.settleamount
        if self.deffloatqty is not None:
            result['deffloatqty'] = self.deffloatqty
        if self.linkfee is not None:
            result['linkfee'] = self.linkfee
        if self.unitcost is not None:
            result['unitcost'] = self.unitcost
        if self.totalvolume is not None:
            result['totalvolume'] = self.totalvolume
        if self.materialid_taxrate is not None:
            result['materialid_taxrate'] = self.materialid_taxrate
        if self.disrate is not None:
            result['disrate'] = self.disrate
        if self.base_taxprice is not None:
            result['base_taxprice'] = self.base_taxprice
        if self.srcinterid is not None:
            result['srcinterid'] = self.srcinterid
        if self.cursettleamount is not None:
            result['cursettleamount'] = self.cursettleamount
        if self.materialid_retailprice is not None:
            result['materialid_retailprice'] = self.materialid_retailprice
        if self.materialid_leadtime is not None:
            result['materialid_leadtime'] = self.materialid_leadtime
        if self.base_price is not None:
            result['base_price'] = self.base_price
        if self.prolicense is not None:
            result['prolicense'] = self.prolicense
        if self.material_set_code is not None:
            result['material_set_code'] = self.material_set_code
        if self.material_category_export is not None:
            result['material_category_export'] = self.material_category_export
        if self.distaxamount is not None:
            result['distaxamount'] = self.distaxamount
        if self.unit_precision is not None:
            result['unit_precision'] = self.unit_precision
        if self.amount is not None:
            result['amount'] = self.amount
        if self.cost is not None:
            result['cost'] = self.cost
        if self.totalgrossweight is not None:
            result['totalgrossweight'] = self.totalgrossweight
        if self.predisamount is not None:
            result['predisamount'] = self.predisamount
        if self.balanceamount is not None:
            result['balanceamount'] = self.balanceamount
        if self.kfdate is not None:
            result['kfdate'] = self.kfdate
        if self.order_qty is not None:
            result['order_qty'] = self.order_qty
        if self.spid_name is not None:
            result['spid_name'] = self.spid_name
        if self.allamount is not None:
            result['allamount'] = self.allamount
        if self.billdisbeforeamount is not None:
            result['billdisbeforeamount'] = self.billdisbeforeamount
        if self.unsettleamount is not None:
            result['unsettleamount'] = self.unsettleamount
        if self.material_band_export is not None:
            result['material_band_export'] = self.material_band_export
        if self.conversionrate is not None:
            result['conversionrate'] = self.conversionrate
        if self.tax_amount is not None:
            result['taxamount'] = self.tax_amount
        if self.dis_amount is not None:
            result['disamount'] = self.dis_amount
        if self.discount is not None:
            result['discount'] = self.discount
        if self.is_free is not None:
            result['is_free'] = self.is_free
        if self.comment is not None:
            result['comment'] = self.comment
        if self.aux_prop is not None:
            result['auxpropid_id'] = self.aux_prop
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.sn_list is not None:
            result['sn_list'] = self.sn_list
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.regain_price is not None:
            result['regain_price'] = self.regain_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('baseunit_id') is not None:
            self.baseunit_id = m.get('baseunit_id')
        if m.get('materialid_id') is not None:
            self.material = m.get('materialid_id')
        if m.get('stockid_id') is not None:
            self.stock = m.get('stockid_id')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('unit_id') is not None:
            self.unit = m.get('unit_id')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('cess') is not None:
            self.cess = m.get('cess')
        if m.get('taxamountfor') is not None:
            self.taxamountfor = m.get('taxamountfor')
        if m.get('srcentryid') is not None:
            self.srcentryid = m.get('srcentryid')
        if m.get('snlistid') is not None:
            self.snlistid = m.get('snlistid')
        if m.get('materialid_net_weight') is not None:
            self.materialid_net_weight = m.get('materialid_net_weight')
        if m.get('entryinvoicedamount') is not None:
            self.entryinvoicedamount = m.get('entryinvoicedamount')
        if m.get('taxprice') is not None:
            self.taxprice = m.get('taxprice')
        if m.get('srcorderid') is not None:
            self.srcorderid = m.get('srcorderid')
        if m.get('returnbaseqty') is not None:
            self.returnbaseqty = m.get('returnbaseqty')
        if m.get('outersrcentryid') is not None:
            self.outersrcentryid = m.get('outersrcentryid')
        if m.get('proregno') is not None:
            self.proregno = m.get('proregno')
        if m.get('unittype') is not None:
            self.unittype = m.get('unittype')
        if m.get('order_baseqty') is not None:
            self.order_baseqty = m.get('order_baseqty')
        if m.get('linkfeefor') is not None:
            self.linkfeefor = m.get('linkfeefor')
        if m.get('auxpropname') is not None:
            self.auxpropname = m.get('auxpropname')
        if m.get('invoicedtaxamount') is not None:
            self.invoicedtaxamount = m.get('invoicedtaxamount')
        if m.get('aux_price') is not None:
            self.aux_price = m.get('aux_price')
        if m.get('inputcoefficient') is not None:
            self.inputcoefficient = m.get('inputcoefficient')
        if m.get('ref_retail_price') is not None:
            self.ref_retail_price = m.get('ref_retail_price')
        if m.get('material_set_name') is not None:
            self.material_set_name = m.get('material_set_name')
        if m.get('returnqty') is not None:
            self.returnqty = m.get('returnqty')
        if m.get('batchno') is not None:
            self.batchno = m.get('batchno')
        if m.get('origin_bill_dis_rate') is not None:
            self.origin_bill_dis_rate = m.get('origin_bill_dis_rate')
        if m.get('totalnetweight') is not None:
            self.totalnetweight = m.get('totalnetweight')
        if m.get('custbillno') is not None:
            self.custbillno = m.get('custbillno')
        if m.get('srcseq') is not None:
            self.srcseq = m.get('srcseq')
        if m.get('src_billdate') is not None:
            self.src_billdate = m.get('src_billdate')
        if m.get('feefor') is not None:
            self.feefor = m.get('feefor')
        if m.get('auxcoefficient') is not None:
            self.auxcoefficient = m.get('auxcoefficient')
        if m.get('invoiceddisamount') is not None:
            self.invoiceddisamount = m.get('invoiceddisamount')
        if m.get('inv_baseqty') is not None:
            self.inv_baseqty = m.get('inv_baseqty')
        if m.get('entrystatus') is not None:
            self.entrystatus = m.get('entrystatus')
        if m.get('dividediffamount') is not None:
            self.dividediffamount = m.get('dividediffamount')
        if m.get('disamount') is not None:
            self.disamount = m.get('disamount')
        if m.get('actnontaxprice') is not None:
            self.actnontaxprice = m.get('actnontaxprice')
        if m.get('auxqty') is not None:
            self.auxqty = m.get('auxqty')
        if m.get('unit_id') is not None:
            self.unit_id = m.get('unit_id')
        if m.get('caculatecoefficient') is not None:
            self.caculatecoefficient = m.get('caculatecoefficient')
        if m.get('seq') is not None:
            self.seq = m.get('seq')
        if m.get('invoicedactnontaxamount') is not None:
            self.invoicedactnontaxamount = m.get('invoicedactnontaxamount')
        if m.get('actnontaxamount') is not None:
            self.actnontaxamount = m.get('actnontaxamount')
        if m.get('entryinvoicestatus') is not None:
            self.entryinvoicestatus = m.get('entryinvoicestatus')
        if m.get('balanceamountfor') is not None:
            self.balanceamountfor = m.get('balanceamountfor')
        if m.get('baseqty') is not None:
            self.baseqty = m.get('baseqty')
        if m.get('regain_price') is not None:
            self.regain_price = m.get('regain_price')
        if m.get('acttaxprice') is not None:
            self.acttaxprice = m.get('acttaxprice')
        if m.get('package1') is not None:
            self.package_1 = m.get('package1')
        if m.get('auxunittype') is not None:
            self.auxunittype = m.get('auxunittype')
        if m.get('package0') is not None:
            self.package_0 = m.get('package0')
        if m.get('package3') is not None:
            self.package_3 = m.get('package3')
        if m.get('package2') is not None:
            self.package_2 = m.get('package2')
        if m.get('invoicedbilldistribution') is not None:
            self.invoicedbilldistribution = m.get('invoicedbilldistribution')
        if m.get('validdate') is not None:
            self.validdate = m.get('validdate')
        if m.get('returnbillno') is not None:
            self.returnbillno = m.get('returnbillno')
        if m.get('is_free') is not None:
            self.is_free = m.get('is_free')
        if m.get('settleamountfor') is not None:
            self.settleamountfor = m.get('settleamountfor')
        if m.get('disprice') is not None:
            self.disprice = m.get('disprice')
        if m.get('totalfeefor') is not None:
            self.totalfeefor = m.get('totalfeefor')
        if m.get('entryinvoicedqty') is not None:
            self.entryinvoicedqty = m.get('entryinvoicedqty')
        if m.get('dividediffamountfor') is not None:
            self.dividediffamountfor = m.get('dividediffamountfor')
        if m.get('fee') is not None:
            self.fee = m.get('fee')
        if m.get('aux_taxprice') is not None:
            self.aux_taxprice = m.get('aux_taxprice')
        if m.get('set_entry_qty') is not None:
            self.set_entry_qty = m.get('set_entry_qty')
        if m.get('unsettleamountfor') is not None:
            self.unsettleamountfor = m.get('unsettleamountfor')
        if m.get('sn_list') is not None:
            self.sn_list = m.get('sn_list')
        if m.get('serialqty') is not None:
            self.serialqty = m.get('serialqty')
        if m.get('totalfee') is not None:
            self.totalfee = m.get('totalfee')
        if m.get('gross_weight') is not None:
            self.gross_weight = m.get('gross_weight')
        if m.get('barcode') is not None:
            self.barcode = m.get('barcode')
        if m.get('package') is not None:
            self.package = m.get('package')
        if m.get('returndeffloatqty') is not None:
            self.returndeffloatqty = m.get('returndeffloatqty')
        if m.get('allamountfor') is not None:
            self.allamountfor = m.get('allamountfor')
        if m.get('inv_qty') is not None:
            self.inv_qty = m.get('inv_qty')
        if m.get('proplace') is not None:
            self.proplace = m.get('proplace')
        if m.get('entrysettlestatus') is not None:
            self.entrysettlestatus = m.get('entrysettlestatus')
        if m.get('set_entry_id') is not None:
            self.set_entry_id = m.get('set_entry_id')
        if m.get('srcbillno') is not None:
            self.srcbillno = m.get('srcbillno')
        if m.get('unit_name') is not None:
            self.unit_name = m.get('unit_name')
        if m.get('volume') is not None:
            self.volume = m.get('volume')
        if m.get('baseunit_name') is not None:
            self.baseunit_name = m.get('baseunit_name')
        if m.get('material_model_export') is not None:
            self.material_model_export = m.get('material_model_export')
        if m.get('cursettleamountfor') is not None:
            self.cursettleamountfor = m.get('cursettleamountfor')
        if m.get('srcbillno_hyperlink') is not None:
            self.srcbillno_hyperlink = m.get('srcbillno_hyperlink')
        if m.get('expectprofit') is not None:
            self.expectprofit = m.get('expectprofit')
        if m.get('coefficient') is not None:
            self.coefficient = m.get('coefficient')
        if m.get('billdisdistribution') is not None:
            self.billdisdistribution = m.get('billdisdistribution')
        if m.get('settleamount') is not None:
            self.settleamount = m.get('settleamount')
        if m.get('deffloatqty') is not None:
            self.deffloatqty = m.get('deffloatqty')
        if m.get('linkfee') is not None:
            self.linkfee = m.get('linkfee')
        if m.get('unitcost') is not None:
            self.unitcost = m.get('unitcost')
        if m.get('totalvolume') is not None:
            self.totalvolume = m.get('totalvolume')
        if m.get('materialid_taxrate') is not None:
            self.materialid_taxrate = m.get('materialid_taxrate')
        if m.get('disrate') is not None:
            self.disrate = m.get('disrate')
        if m.get('base_taxprice') is not None:
            self.base_taxprice = m.get('base_taxprice')
        if m.get('srcinterid') is not None:
            self.srcinterid = m.get('srcinterid')
        if m.get('cursettleamount') is not None:
            self.cursettleamount = m.get('cursettleamount')
        if m.get('materialid_retailprice') is not None:
            self.materialid_retailprice = m.get('materialid_retailprice')
        if m.get('materialid_leadtime') is not None:
            self.materialid_leadtime = m.get('materialid_leadtime')
        if m.get('base_price') is not None:
            self.base_price = m.get('base_price')
        if m.get('prolicense') is not None:
            self.prolicense = m.get('prolicense')
        if m.get('material_set_code') is not None:
            self.material_set_code = m.get('material_set_code')
        if m.get('material_category_export') is not None:
            self.material_category_export = m.get('material_category_export')
        if m.get('distaxamount') is not None:
            self.distaxamount = m.get('distaxamount')
        if m.get('unit_precision') is not None:
            self.unit_precision = m.get('unit_precision')
        if m.get('amount') is not None:
            self.amount = m.get('amount')
        if m.get('cost') is not None:
            self.cost = m.get('cost')
        if m.get('totalgrossweight') is not None:
            self.totalgrossweight = m.get('totalgrossweight')
        if m.get('predisamount') is not None:
            self.predisamount = m.get('predisamount')
        if m.get('balanceamount') is not None:
            self.balanceamount = m.get('balanceamount')
        if m.get('kfdate') is not None:
            self.kfdate = m.get('kfdate')
        if m.get('order_qty') is not None:
            self.order_qty = m.get('order_qty')
        if m.get('spid_name') is not None:
            self.spid_name = m.get('spid_name')
        if m.get('allamount') is not None:
            self.allamount = m.get('allamount')
        if m.get('billdisbeforeamount') is not None:
            self.billdisbeforeamount = m.get('billdisbeforeamount')
        if m.get('unsettleamount') is not None:
            self.unsettleamount = m.get('unsettleamount')
        if m.get('material_band_export') is not None:
            self.material_band_export = m.get('material_band_export')
        if m.get('conversionrate') is not None:
            self.conversionrate = m.get('conversionrate')
        if m.get('taxamount') is not None:
            self.tax_amount = m.get('taxamount')
        if m.get('disamount') is not None:
            self.dis_amount = m.get('disamount')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('is_free') is not None:
            self.is_free = m.get('is_free')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('auxpropid_id') is not None:
            self.aux_prop = m.get('auxpropid_id')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('sn_list') is not None:
            self.sn_list = m.get('sn_list')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('regain_price') is not None:
            self.regain_price = m.get('regain_price')
        return self


class OutboundDetail(TeaModel):
    def __init__(
        self,
        send_status: str = None,
        express_remark_view: str = None,
        delivery_time_view: str = None,
        currencyid_exctype: str = None,
        accountchecktime: str = None,
        creatorid_masterid: str = None,
        settle_status: str = None,
        bill_source: str = None,
        id: str = None,
        alldebt: str = None,
        subsist_info: str = None,
        lastdebt: str = None,
        transtype: str = None,
        operation_key: str = None,
        bill_date: str = None,
        bill_no: str = None,
        customer: str = None,
        emp: str = None,
        stock: str = None,
        sp_id: str = None,
        remark: str = None,
        link_man_for_dispatcher: str = None,
        phone_for_dispatcher: str = None,
        country_for_dispatcher: str = None,
        province_for_dispatcher: str = None,
        city_for_dispatcher: str = None,
        district_for_dispatcher: str = None,
        address_for_dispatcher: str = None,
        link_man_for_contact: str = None,
        phone_for_contact: str = None,
        country_for_contact: str = None,
        province_for_contact: str = None,
        city_for_contact: str = None,
        district_for_contact: str = None,
        address_for_contact: str = None,
        delivery_type: str = None,
        discount_amount: str = None,
        discount_rate: str = None,
        cost_fee: str = None,
        cost_fee_entries: CostFeeEntry = None,
        allocate_rule: str = None,
        totalinsamountfor: str = None,
        requiredinvoice: bool = None,
        billtypeid_modeltype: str = None,
        outersrcinterid: str = None,
        invoicestatus: str = None,
        edit_pay_amt: str = None,
        totalamountfor: str = None,
        bill_deal_amount: str = None,
        dbcreatetime: str = None,
        payment_flag: bool = None,
        createtime: str = None,
        iostatus: str = None,
        billtypeid_id: str = None,
        voucher_period: str = None,
        modifierid_id: str = None,
        totalsettleamount: str = None,
        sum_whole_amt_bef_dis: str = None,
        voucherid: str = None,
        totalpreamountfor: str = None,
        totalinsfinalamountfor: str = None,
        invoicedamount: str = None,
        deduction_balance: str = None,
        other_creditid: str = None,
        totalunsettleamountfor: str = None,
        audittime: str = None,
        billstatus: str = None,
        dbmodifytime: str = None,
        accountcheck: str = None,
        modifytime: str = None,
        exchangerate: str = None,
        returnstatus: str = None,
        printtimes: str = None,
        bill_dis_rate: str = None,
        creatorid_id: str = None,
        isbatchchangerows: bool = None,
        costvoucherid: str = None,
        totalsettleamountfor: str = None,
        cus_bear_amountfor: str = None,
        currencyid_id: str = None,
        diffamountfor: str = None,
        duedate: str = None,
        cus_exchangerate: str = None,
        express_entity: List[ExpressEntity] = None,
        total_ins_amount: str = None,
        total_amount: str = None,
        diff_amount: str = None,
        total_un_settle_amount: str = None,
        payment_entries: List[PaymentEntry] = None,
        material_entries: List[OutboundMaterialEntry] = None,
        attachment: str = None,
        attachment_entries: List[AttachmentEntry] = None,
        customer_fee: List[CustomFeeEntity] = None,
        customer_exchange_rate: str = None,
        customer_currency: str = None,
        customer_fee_status: str = None,
        cus_currency_id: str = None,
    ):
        self.send_status = send_status
        self.express_remark_view = express_remark_view
        self.delivery_time_view = delivery_time_view
        self.currencyid_exctype = currencyid_exctype
        self.accountchecktime = accountchecktime
        self.creatorid_masterid = creatorid_masterid
        # 付款状态（所有：“”，全部收款：“C”，部分收款：“B”，未收款：“A”，待收款（=部分收款+未收款）：“M”）
        self.settle_status = settle_status
        # 单据来源；
        self.bill_source = bill_source
        self.id = id
        self.alldebt = alldebt
        self.subsist_info = subsist_info
        self.lastdebt = lastdebt
        self.transtype = transtype
        # 操作类型，固定取值：special_save，执行特殊保存是必填
        self.operation_key = operation_key
        # 出库日期,格式：2019-01-01
        self.bill_date = bill_date
        # 单据编码
        self.bill_no = bill_no
        # 客户
        self.customer = customer
        # 业务员
        self.emp = emp
        # 仓库
        self.stock = stock
        # 仓位
        self.sp_id = sp_id
        # 单据备注
        self.remark = remark
        # 发货地址-联系人
        self.link_man_for_dispatcher = link_man_for_dispatcher
        # 发货地址-联系方式
        self.phone_for_dispatcher = phone_for_dispatcher
        # 发货地址-国家ID
        self.country_for_dispatcher = country_for_dispatcher
        # 发货地址-省ID
        self.province_for_dispatcher = province_for_dispatcher
        # 发货地址-市ID
        self.city_for_dispatcher = city_for_dispatcher
        # 发货地址-区ID
        self.district_for_dispatcher = district_for_dispatcher
        # 发货地址-详细地址
        self.address_for_dispatcher = address_for_dispatcher
        # 联系信息-联系人
        self.link_man_for_contact = link_man_for_contact
        # 联系信息-联系方式
        self.phone_for_contact = phone_for_contact
        # 联系信息-国家ID
        self.country_for_contact = country_for_contact
        # 联系信息-省ID
        self.province_for_contact = province_for_contact
        # 联系信息-市ID
        self.city_for_contact = city_for_contact
        # 联系信息-区ID
        self.district_for_contact = district_for_contact
        # 联系信息-详细地址
        self.address_for_contact = address_for_contact
        # 交货方式id,6:物流配送;8:车辆配送,9:客户自提
        self.delivery_type = delivery_type
        # 整单折扣额
        self.discount_amount = discount_amount
        # 整单折扣率%\
        self.discount_rate = discount_rate
        # 销售费用
        self.cost_fee = cost_fee
        # 销售费用明细，没有则传null或不传该字段
        self.cost_fee_entries = cost_fee_entries
        # 销售费用分摊规则；”1”: 按价税合计分摊（默认）； “2”:按数量分摊
        self.allocate_rule = allocate_rule
        self.totalinsamountfor = totalinsamountfor
        self.requiredinvoice = requiredinvoice
        self.billtypeid_modeltype = billtypeid_modeltype
        self.outersrcinterid = outersrcinterid
        self.invoicestatus = invoicestatus
        self.edit_pay_amt = edit_pay_amt
        self.totalamountfor = totalamountfor
        self.bill_deal_amount = bill_deal_amount
        self.dbcreatetime = dbcreatetime
        self.payment_flag = payment_flag
        self.createtime = createtime
        self.iostatus = iostatus
        self.billtypeid_id = billtypeid_id
        self.voucher_period = voucher_period
        self.modifierid_id = modifierid_id
        self.totalsettleamount = totalsettleamount
        self.sum_whole_amt_bef_dis = sum_whole_amt_bef_dis
        self.voucherid = voucherid
        self.totalpreamountfor = totalpreamountfor
        self.totalinsfinalamountfor = totalinsfinalamountfor
        self.invoicedamount = invoicedamount
        self.deduction_balance = deduction_balance
        self.other_creditid = other_creditid
        self.totalunsettleamountfor = totalunsettleamountfor
        self.audittime = audittime
        self.billstatus = billstatus
        self.dbmodifytime = dbmodifytime
        self.accountcheck = accountcheck
        self.modifytime = modifytime
        self.exchangerate = exchangerate
        self.returnstatus = returnstatus
        self.printtimes = printtimes
        self.bill_dis_rate = bill_dis_rate
        self.creatorid_id = creatorid_id
        self.isbatchchangerows = isbatchchangerows
        self.costvoucherid = costvoucherid
        self.totalsettleamountfor = totalsettleamountfor
        self.cus_bear_amountfor = cus_bear_amountfor
        self.currencyid_id = currencyid_id
        self.diffamountfor = diffamountfor
        self.duedate = duedate
        self.cus_exchangerate = cus_exchangerate
        self.express_entity = express_entity
        # 本次收款
        self.total_ins_amount = total_ins_amount
        # 本次应收账款
        self.total_amount = total_amount
        # 抹零金额
        self.diff_amount = diff_amount
        # 本单未收
        self.total_un_settle_amount = total_un_settle_amount
        # 收款账户
        self.payment_entries = payment_entries
        # 商品分录
        self.material_entries = material_entries
        # 抵扣预付款
        self.deduction_balance = deduction_balance
        self.attachment = attachment
        # 上传的附件url
        self.attachment_entries = attachment_entries
        # 客户承担费用单据体
        self.customer_fee = customer_fee
        # 客户承担费用汇率
        self.customer_exchange_rate = customer_exchange_rate
        # 客户承担费用币别id
        self.customer_currency = customer_currency
        # 客户承担费用参数状态；”B”：计入应收账款，”O”：计入其他收入
        self.customer_fee_status = customer_fee_status
        self.cus_currency_id = cus_currency_id

    def validate(self):
        self.validate_required(self.delivery_time_view, 'delivery_time_view')
        if self.cost_fee_entries:
            self.cost_fee_entries.validate()
        if self.express_entity:
            for k in self.express_entity:
                if k:
                    k.validate()
        if self.payment_entries:
            for k in self.payment_entries:
                if k:
                    k.validate()
        if self.material_entries:
            for k in self.material_entries:
                if k:
                    k.validate()
        if self.attachment_entries:
            for k in self.attachment_entries:
                if k:
                    k.validate()
        if self.customer_fee:
            for k in self.customer_fee:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.send_status is not None:
            result['sendstatus'] = self.send_status
        if self.express_remark_view is not None:
            result['express_remark_view'] = self.express_remark_view
        if self.delivery_time_view is not None:
            result['delivery_time_view'] = self.delivery_time_view
        if self.currencyid_exctype is not None:
            result['currencyid_exctype'] = self.currencyid_exctype
        if self.accountchecktime is not None:
            result['accountchecktime'] = self.accountchecktime
        if self.creatorid_masterid is not None:
            result['creatorid_masterid'] = self.creatorid_masterid
        if self.settle_status is not None:
            result['settlestatus'] = self.settle_status
        if self.bill_source is not None:
            result['billsource'] = self.bill_source
        if self.id is not None:
            result['id'] = self.id
        if self.alldebt is not None:
            result['alldebt'] = self.alldebt
        if self.subsist_info is not None:
            result['subsist_info'] = self.subsist_info
        if self.lastdebt is not None:
            result['lastdebt'] = self.lastdebt
        if self.transtype is not None:
            result['transtype'] = self.transtype
        if self.operation_key is not None:
            result['operationkey'] = self.operation_key
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.bill_no is not None:
            result['billno'] = self.bill_no
        if self.customer is not None:
            result['customerid_id'] = self.customer
        if self.emp is not None:
            result['empid_id'] = self.emp
        if self.stock is not None:
            result['billstockid_id'] = self.stock
        if self.sp_id is not None:
            result['billspid_id'] = self.sp_id
        if self.remark is not None:
            result['remark'] = self.remark
        if self.link_man_for_dispatcher is not None:
            result['contact_linkman'] = self.link_man_for_dispatcher
        if self.phone_for_dispatcher is not None:
            result['contact_phone'] = self.phone_for_dispatcher
        if self.country_for_dispatcher is not None:
            result['contact_country_id'] = self.country_for_dispatcher
        if self.province_for_dispatcher is not None:
            result['contact_province_id'] = self.province_for_dispatcher
        if self.city_for_dispatcher is not None:
            result['contact_city_id'] = self.city_for_dispatcher
        if self.district_for_dispatcher is not None:
            result['contact_district_id'] = self.district_for_dispatcher
        if self.address_for_dispatcher is not None:
            result['contact_address'] = self.address_for_dispatcher
        if self.link_man_for_contact is not None:
            result['contact_linkman'] = self.link_man_for_contact
        if self.phone_for_contact is not None:
            result['contact_phone'] = self.phone_for_contact
        if self.country_for_contact is not None:
            result['contact_country_id'] = self.country_for_contact
        if self.province_for_contact is not None:
            result['contact_province_id'] = self.province_for_contact
        if self.city_for_contact is not None:
            result['contact_city_id'] = self.city_for_contact
        if self.district_for_contact is not None:
            result['contact_district_id'] = self.district_for_contact
        if self.address_for_contact is not None:
            result['contact_address'] = self.address_for_contact
        if self.delivery_type is not None:
            result['delivery_type_id'] = self.delivery_type
        if self.discount_amount is not None:
            result['bill_dis_amount'] = self.discount_amount
        if self.discount_rate is not None:
            result['bill_dis_rate'] = self.discount_rate
        if self.cost_fee is not None:
            result['cost_fee'] = self.cost_fee
        if self.cost_fee_entries is not None:
            result['cost_fee_entity'] = self.cost_fee_entries.to_map()
        if self.allocate_rule is not None:
            result['allocate_rule'] = self.allocate_rule
        if self.totalinsamountfor is not None:
            result['totalinsamountfor'] = self.totalinsamountfor
        if self.requiredinvoice is not None:
            result['requiredinvoice'] = self.requiredinvoice
        if self.billtypeid_modeltype is not None:
            result['billtypeid_modeltype'] = self.billtypeid_modeltype
        if self.outersrcinterid is not None:
            result['outersrcinterid'] = self.outersrcinterid
        if self.invoicestatus is not None:
            result['invoicestatus'] = self.invoicestatus
        if self.edit_pay_amt is not None:
            result['edit_pay_amt'] = self.edit_pay_amt
        if self.totalamountfor is not None:
            result['totalamountfor'] = self.totalamountfor
        if self.bill_deal_amount is not None:
            result['bill_deal_amount'] = self.bill_deal_amount
        if self.dbcreatetime is not None:
            result['dbcreatetime'] = self.dbcreatetime
        if self.payment_flag is not None:
            result['payment_flag'] = self.payment_flag
        if self.createtime is not None:
            result['createtime'] = self.createtime
        if self.iostatus is not None:
            result['iostatus'] = self.iostatus
        if self.billtypeid_id is not None:
            result['billtypeid_id'] = self.billtypeid_id
        if self.voucher_period is not None:
            result['voucher_period'] = self.voucher_period
        if self.modifierid_id is not None:
            result['modifierid_id'] = self.modifierid_id
        if self.totalsettleamount is not None:
            result['totalsettleamount'] = self.totalsettleamount
        if self.sum_whole_amt_bef_dis is not None:
            result['sum_whole_amt_bef_dis'] = self.sum_whole_amt_bef_dis
        if self.voucherid is not None:
            result['voucherid'] = self.voucherid
        if self.totalpreamountfor is not None:
            result['totalpreamountfor'] = self.totalpreamountfor
        if self.totalinsfinalamountfor is not None:
            result['totalinsfinalamountfor'] = self.totalinsfinalamountfor
        if self.invoicedamount is not None:
            result['invoicedamount'] = self.invoicedamount
        if self.deduction_balance is not None:
            result['deduction_balance'] = self.deduction_balance
        if self.other_creditid is not None:
            result['other_creditid'] = self.other_creditid
        if self.totalunsettleamountfor is not None:
            result['totalunsettleamountfor'] = self.totalunsettleamountfor
        if self.audittime is not None:
            result['audittime'] = self.audittime
        if self.billstatus is not None:
            result['billstatus'] = self.billstatus
        if self.dbmodifytime is not None:
            result['dbmodifytime'] = self.dbmodifytime
        if self.accountcheck is not None:
            result['accountcheck'] = self.accountcheck
        if self.modifytime is not None:
            result['modifytime'] = self.modifytime
        if self.exchangerate is not None:
            result['exchangerate'] = self.exchangerate
        if self.returnstatus is not None:
            result['returnstatus'] = self.returnstatus
        if self.printtimes is not None:
            result['printtimes'] = self.printtimes
        if self.bill_dis_rate is not None:
            result['bill_dis_rate'] = self.bill_dis_rate
        if self.creatorid_id is not None:
            result['creatorid_id'] = self.creatorid_id
        if self.isbatchchangerows is not None:
            result['isbatchchangerows'] = self.isbatchchangerows
        if self.costvoucherid is not None:
            result['costvoucherid'] = self.costvoucherid
        if self.totalsettleamountfor is not None:
            result['totalsettleamountfor'] = self.totalsettleamountfor
        if self.cus_bear_amountfor is not None:
            result['cus_bear_amountfor'] = self.cus_bear_amountfor
        if self.currencyid_id is not None:
            result['currencyid_id'] = self.currencyid_id
        if self.diffamountfor is not None:
            result['diffamountfor'] = self.diffamountfor
        if self.duedate is not None:
            result['duedate'] = self.duedate
        if self.cus_exchangerate is not None:
            result['cus_exchangerate'] = self.cus_exchangerate
        result['express_entity'] = []
        if self.express_entity is not None:
            for k in self.express_entity:
                result['express_entity'].append(k.to_map() if k else None)
        if self.total_ins_amount is not None:
            result['totalinsamount'] = self.total_ins_amount
        if self.total_amount is not None:
            result['totalamount'] = self.total_amount
        if self.diff_amount is not None:
            result['diffamount'] = self.diff_amount
        if self.total_un_settle_amount is not None:
            result['totalunsettleamount'] = self.total_un_settle_amount
        result['payment_entry'] = []
        if self.payment_entries is not None:
            for k in self.payment_entries:
                result['payment_entry'].append(k.to_map() if k else None)
        result['material_entity'] = []
        if self.material_entries is not None:
            for k in self.material_entries:
                result['material_entity'].append(k.to_map() if k else None)
        if self.deduction_balance is not None:
            result['deduction_balance'] = self.deduction_balance
        if self.attachment is not None:
            result['attachment'] = self.attachment
        result['attachments_url'] = []
        if self.attachment_entries is not None:
            for k in self.attachment_entries:
                result['attachments_url'].append(k.to_map() if k else None)
        result['cus_bear_fee_entry'] = []
        if self.customer_fee is not None:
            for k in self.customer_fee:
                result['cus_bear_fee_entry'].append(k.to_map() if k else None)
        if self.customer_exchange_rate is not None:
            result['cus_exchangerate'] = self.customer_exchange_rate
        if self.customer_currency is not None:
            result['cus_currency_id'] = self.customer_currency
        if self.customer_fee_status is not None:
            result['cus_bear_fee_status'] = self.customer_fee_status
        if self.cus_currency_id is not None:
            result['cus_currency_id'] = self.cus_currency_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('sendstatus') is not None:
            self.send_status = m.get('sendstatus')
        if m.get('express_remark_view') is not None:
            self.express_remark_view = m.get('express_remark_view')
        if m.get('delivery_time_view') is not None:
            self.delivery_time_view = m.get('delivery_time_view')
        if m.get('currencyid_exctype') is not None:
            self.currencyid_exctype = m.get('currencyid_exctype')
        if m.get('accountchecktime') is not None:
            self.accountchecktime = m.get('accountchecktime')
        if m.get('creatorid_masterid') is not None:
            self.creatorid_masterid = m.get('creatorid_masterid')
        if m.get('settlestatus') is not None:
            self.settle_status = m.get('settlestatus')
        if m.get('billsource') is not None:
            self.bill_source = m.get('billsource')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('alldebt') is not None:
            self.alldebt = m.get('alldebt')
        if m.get('subsist_info') is not None:
            self.subsist_info = m.get('subsist_info')
        if m.get('lastdebt') is not None:
            self.lastdebt = m.get('lastdebt')
        if m.get('transtype') is not None:
            self.transtype = m.get('transtype')
        if m.get('operationkey') is not None:
            self.operation_key = m.get('operationkey')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('billno') is not None:
            self.bill_no = m.get('billno')
        if m.get('customerid_id') is not None:
            self.customer = m.get('customerid_id')
        if m.get('empid_id') is not None:
            self.emp = m.get('empid_id')
        if m.get('billstockid_id') is not None:
            self.stock = m.get('billstockid_id')
        if m.get('billspid_id') is not None:
            self.sp_id = m.get('billspid_id')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('contact_linkman') is not None:
            self.link_man_for_dispatcher = m.get('contact_linkman')
        if m.get('contact_phone') is not None:
            self.phone_for_dispatcher = m.get('contact_phone')
        if m.get('contact_country_id') is not None:
            self.country_for_dispatcher = m.get('contact_country_id')
        if m.get('contact_province_id') is not None:
            self.province_for_dispatcher = m.get('contact_province_id')
        if m.get('contact_city_id') is not None:
            self.city_for_dispatcher = m.get('contact_city_id')
        if m.get('contact_district_id') is not None:
            self.district_for_dispatcher = m.get('contact_district_id')
        if m.get('contact_address') is not None:
            self.address_for_dispatcher = m.get('contact_address')
        if m.get('contact_linkman') is not None:
            self.link_man_for_contact = m.get('contact_linkman')
        if m.get('contact_phone') is not None:
            self.phone_for_contact = m.get('contact_phone')
        if m.get('contact_country_id') is not None:
            self.country_for_contact = m.get('contact_country_id')
        if m.get('contact_province_id') is not None:
            self.province_for_contact = m.get('contact_province_id')
        if m.get('contact_city_id') is not None:
            self.city_for_contact = m.get('contact_city_id')
        if m.get('contact_district_id') is not None:
            self.district_for_contact = m.get('contact_district_id')
        if m.get('contact_address') is not None:
            self.address_for_contact = m.get('contact_address')
        if m.get('delivery_type_id') is not None:
            self.delivery_type = m.get('delivery_type_id')
        if m.get('bill_dis_amount') is not None:
            self.discount_amount = m.get('bill_dis_amount')
        if m.get('bill_dis_rate') is not None:
            self.discount_rate = m.get('bill_dis_rate')
        if m.get('cost_fee') is not None:
            self.cost_fee = m.get('cost_fee')
        if m.get('cost_fee_entity') is not None:
            temp_model = CostFeeEntry()
            self.cost_fee_entries = temp_model.from_map(m['cost_fee_entity'])
        if m.get('allocate_rule') is not None:
            self.allocate_rule = m.get('allocate_rule')
        if m.get('totalinsamountfor') is not None:
            self.totalinsamountfor = m.get('totalinsamountfor')
        if m.get('requiredinvoice') is not None:
            self.requiredinvoice = m.get('requiredinvoice')
        if m.get('billtypeid_modeltype') is not None:
            self.billtypeid_modeltype = m.get('billtypeid_modeltype')
        if m.get('outersrcinterid') is not None:
            self.outersrcinterid = m.get('outersrcinterid')
        if m.get('invoicestatus') is not None:
            self.invoicestatus = m.get('invoicestatus')
        if m.get('edit_pay_amt') is not None:
            self.edit_pay_amt = m.get('edit_pay_amt')
        if m.get('totalamountfor') is not None:
            self.totalamountfor = m.get('totalamountfor')
        if m.get('bill_deal_amount') is not None:
            self.bill_deal_amount = m.get('bill_deal_amount')
        if m.get('dbcreatetime') is not None:
            self.dbcreatetime = m.get('dbcreatetime')
        if m.get('payment_flag') is not None:
            self.payment_flag = m.get('payment_flag')
        if m.get('createtime') is not None:
            self.createtime = m.get('createtime')
        if m.get('iostatus') is not None:
            self.iostatus = m.get('iostatus')
        if m.get('billtypeid_id') is not None:
            self.billtypeid_id = m.get('billtypeid_id')
        if m.get('voucher_period') is not None:
            self.voucher_period = m.get('voucher_period')
        if m.get('modifierid_id') is not None:
            self.modifierid_id = m.get('modifierid_id')
        if m.get('totalsettleamount') is not None:
            self.totalsettleamount = m.get('totalsettleamount')
        if m.get('sum_whole_amt_bef_dis') is not None:
            self.sum_whole_amt_bef_dis = m.get('sum_whole_amt_bef_dis')
        if m.get('voucherid') is not None:
            self.voucherid = m.get('voucherid')
        if m.get('totalpreamountfor') is not None:
            self.totalpreamountfor = m.get('totalpreamountfor')
        if m.get('totalinsfinalamountfor') is not None:
            self.totalinsfinalamountfor = m.get('totalinsfinalamountfor')
        if m.get('invoicedamount') is not None:
            self.invoicedamount = m.get('invoicedamount')
        if m.get('deduction_balance') is not None:
            self.deduction_balance = m.get('deduction_balance')
        if m.get('other_creditid') is not None:
            self.other_creditid = m.get('other_creditid')
        if m.get('totalunsettleamountfor') is not None:
            self.totalunsettleamountfor = m.get('totalunsettleamountfor')
        if m.get('audittime') is not None:
            self.audittime = m.get('audittime')
        if m.get('billstatus') is not None:
            self.billstatus = m.get('billstatus')
        if m.get('dbmodifytime') is not None:
            self.dbmodifytime = m.get('dbmodifytime')
        if m.get('accountcheck') is not None:
            self.accountcheck = m.get('accountcheck')
        if m.get('modifytime') is not None:
            self.modifytime = m.get('modifytime')
        if m.get('exchangerate') is not None:
            self.exchangerate = m.get('exchangerate')
        if m.get('returnstatus') is not None:
            self.returnstatus = m.get('returnstatus')
        if m.get('printtimes') is not None:
            self.printtimes = m.get('printtimes')
        if m.get('bill_dis_rate') is not None:
            self.bill_dis_rate = m.get('bill_dis_rate')
        if m.get('creatorid_id') is not None:
            self.creatorid_id = m.get('creatorid_id')
        if m.get('isbatchchangerows') is not None:
            self.isbatchchangerows = m.get('isbatchchangerows')
        if m.get('costvoucherid') is not None:
            self.costvoucherid = m.get('costvoucherid')
        if m.get('totalsettleamountfor') is not None:
            self.totalsettleamountfor = m.get('totalsettleamountfor')
        if m.get('cus_bear_amountfor') is not None:
            self.cus_bear_amountfor = m.get('cus_bear_amountfor')
        if m.get('currencyid_id') is not None:
            self.currencyid_id = m.get('currencyid_id')
        if m.get('diffamountfor') is not None:
            self.diffamountfor = m.get('diffamountfor')
        if m.get('duedate') is not None:
            self.duedate = m.get('duedate')
        if m.get('cus_exchangerate') is not None:
            self.cus_exchangerate = m.get('cus_exchangerate')
        self.express_entity = []
        if m.get('express_entity') is not None:
            for k in m.get('express_entity'):
                temp_model = ExpressEntity()
                self.express_entity.append(temp_model.from_map(k))
        if m.get('totalinsamount') is not None:
            self.total_ins_amount = m.get('totalinsamount')
        if m.get('totalamount') is not None:
            self.total_amount = m.get('totalamount')
        if m.get('diffamount') is not None:
            self.diff_amount = m.get('diffamount')
        if m.get('totalunsettleamount') is not None:
            self.total_un_settle_amount = m.get('totalunsettleamount')
        self.payment_entries = []
        if m.get('payment_entry') is not None:
            for k in m.get('payment_entry'):
                temp_model = PaymentEntry()
                self.payment_entries.append(temp_model.from_map(k))
        self.material_entries = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = OutboundMaterialEntry()
                self.material_entries.append(temp_model.from_map(k))
        if m.get('deduction_balance') is not None:
            self.deduction_balance = m.get('deduction_balance')
        if m.get('attachment') is not None:
            self.attachment = m.get('attachment')
        self.attachment_entries = []
        if m.get('attachments_url') is not None:
            for k in m.get('attachments_url'):
                temp_model = AttachmentEntry()
                self.attachment_entries.append(temp_model.from_map(k))
        self.customer_fee = []
        if m.get('cus_bear_fee_entry') is not None:
            for k in m.get('cus_bear_fee_entry'):
                temp_model = CustomFeeEntity()
                self.customer_fee.append(temp_model.from_map(k))
        if m.get('cus_exchangerate') is not None:
            self.customer_exchange_rate = m.get('cus_exchangerate')
        if m.get('cus_currency_id') is not None:
            self.customer_currency = m.get('cus_currency_id')
        if m.get('cus_bear_fee_status') is not None:
            self.customer_fee_status = m.get('cus_bear_fee_status')
        if m.get('cus_currency_id') is not None:
            self.cus_currency_id = m.get('cus_currency_id')
        return self


class OutboundDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: OutboundDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = OutboundDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class OutboundSaveRequest(TeaModel):
    def __init__(
        self,
        body: OutboundDetail = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = OutboundDetail()
            self.body = temp_model.from_map(m['body'])
        return self


class SalInboundListRequestBody(TeaModel):
    def __init__(
        self,
        dept_id: List[str] = None,
        emp_id: List[str] = None,
        bill_status: str = None,
        settle_status: str = None,
        customerid: str = None,
        start_bill_date: str = None,
        end_bill_date: str = None,
        start_date: str = None,
        end_date: str = None,
        begin_date: str = None,
        expire_date: str = None,
        start_time: int = None,
        end_time: int = None,
        begin_time: int = None,
        expire_time: int = None,
        creator_ids: List[str] = None,
        search: str = None,
        filter_zero: str = None,
        page: int = None,
        pagesize: int = None,
        select_fields: str = None,
        order_by: str = None,
        show_materia_ttotal: bool = None,
    ):
        self.dept_id = dept_id
        self.emp_id = emp_id
        # 单据状态（所有：“”，已审核：“C”，未审核：“Z”）
        self.bill_status = bill_status
        # 付款状态（所有：“”，全部收款：“C”，部分收款：“B”，未收款：“A”，待收款（=部分收款+未收款）：“M”）
        self.settle_status = settle_status
        # 客户
        self.customerid = customerid
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），单据日期
        self.start_bill_date = start_bill_date
        # 结束日期 单据日期
        self.end_bill_date = end_bill_date
        # 开始日期 创建日期
        self.start_date = start_date
        # 结束日期 创建日期
        self.end_date = end_date
        # 开始日期 修改日期
        self.begin_date = begin_date
        # 结束日期 修改日期
        self.expire_date = expire_date
        # 开始时间 创建日期
        self.start_time = start_time
        # 结束时间 创建日期
        self.end_time = end_time
        # 开始时间 修改日期
        self.begin_time = begin_time
        # 结束时间 修改日期
        self.expire_time = expire_time
        # 制单人，格式：[“制单人id”,”制单人id”]
        self.creator_ids = creator_ids
        self.search = search
        # 过滤字段值为0记录：目前仅支持totalunsettleamount
        self.filter_zero = filter_zero
        self.page = page
        self.pagesize = pagesize
        # 自定义返回字段（除默认字段外），多个字段用英文逗号隔开，支持的字段见下面解析
        self.select_fields = select_fields
        # 排序说明
        self.order_by = order_by
        # 是否统计商品种类和数量到单据，默认false
        self.show_materia_ttotal = show_materia_ttotal

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept_id is not None:
            result['deptid'] = self.dept_id
        if self.emp_id is not None:
            result['empid'] = self.emp_id
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.settle_status is not None:
            result['settlestatus'] = self.settle_status
        if self.customerid is not None:
            result['customerId'] = self.customerid
        if self.start_bill_date is not None:
            result['startbilldate'] = self.start_bill_date
        if self.end_bill_date is not None:
            result['endbilldate'] = self.end_bill_date
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.begin_date is not None:
            result['begindate'] = self.begin_date
        if self.expire_date is not None:
            result['expiredate'] = self.expire_date
        if self.start_time is not None:
            result['starttime'] = self.start_time
        if self.end_time is not None:
            result['endtime'] = self.end_time
        if self.begin_time is not None:
            result['begintime'] = self.begin_time
        if self.expire_time is not None:
            result['expiretime'] = self.expire_time
        if self.creator_ids is not None:
            result['creatorid'] = self.creator_ids
        if self.search is not None:
            result['search'] = self.search
        if self.filter_zero is not None:
            result['filterzero'] = self.filter_zero
        if self.page is not None:
            result['page'] = self.page
        if self.pagesize is not None:
            result['pagesize'] = self.pagesize
        if self.select_fields is not None:
            result['selectfields'] = self.select_fields
        if self.order_by is not None:
            result['orderby'] = self.order_by
        if self.show_materia_ttotal is not None:
            result['showmaterialtotal'] = self.show_materia_ttotal
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('deptid') is not None:
            self.dept_id = m.get('deptid')
        if m.get('empid') is not None:
            self.emp_id = m.get('empid')
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('settlestatus') is not None:
            self.settle_status = m.get('settlestatus')
        if m.get('customerId') is not None:
            self.customerid = m.get('customerId')
        if m.get('startbilldate') is not None:
            self.start_bill_date = m.get('startbilldate')
        if m.get('endbilldate') is not None:
            self.end_bill_date = m.get('endbilldate')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('begindate') is not None:
            self.begin_date = m.get('begindate')
        if m.get('expiredate') is not None:
            self.expire_date = m.get('expiredate')
        if m.get('starttime') is not None:
            self.start_time = m.get('starttime')
        if m.get('endtime') is not None:
            self.end_time = m.get('endtime')
        if m.get('begintime') is not None:
            self.begin_time = m.get('begintime')
        if m.get('expiretime') is not None:
            self.expire_time = m.get('expiretime')
        if m.get('creatorid') is not None:
            self.creator_ids = m.get('creatorid')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('filterzero') is not None:
            self.filter_zero = m.get('filterzero')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.pagesize = m.get('pagesize')
        if m.get('selectfields') is not None:
            self.select_fields = m.get('selectfields')
        if m.get('orderby') is not None:
            self.order_by = m.get('orderby')
        if m.get('showmaterialtotal') is not None:
            self.show_materia_ttotal = m.get('showmaterialtotal')
        return self


class SalInboundListRequest(TeaModel):
    def __init__(
        self,
        body: SalInboundListRequestBody = None,
    ):
        self.body = body
        # 获取销售退货单列表接口

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = SalInboundListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SalInboundDetailRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        number: str = None,
    ):
        self.id = id
        self.number = number

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.number is not None:
            result['number'] = self.number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('number') is not None:
            self.number = m.get('number')
        return self


class SalInboundDetailRequest(TeaModel):
    def __init__(
        self,
        body: SalInboundDetailRequestBody = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = SalInboundDetailRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InboundMaterialEntry(TeaModel):
    def __init__(
        self,
        material: str = None,
        stock: str = None,
        sp_id: str = None,
        qty: str = None,
        unit: str = None,
        price: str = None,
        cess: str = None,
        tax_amount: str = None,
        dis_amount: str = None,
        discount: str = None,
        is_free: str = None,
        comment: str = None,
        aux_prop: str = None,
        batch_no: str = None,
        sn_list_id: str = None,
        sn_list: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_period: str = None,
        kf_type: str = None,
        regain_price: str = None,
    ):
        # 商品
        self.material = material
        # 仓库
        self.stock = stock
        # 仓位，启用了仓位管理则必填
        self.sp_id = sp_id
        # 数量
        self.qty = qty
        # 单位
        self.unit = unit
        # 单价
        self.price = price
        # 商品增值税税率；不传后端自取，传入则以传入为准
        self.cess = cess
        # 商品税额
        self.tax_amount = tax_amount
        # 折扣额
        self.dis_amount = dis_amount
        # 折扣（折）
        self.discount = discount
        # 是否赠品；true-是，false-否（默认）
        self.is_free = is_free
        # 商品行备注
        self.comment = comment
        # 辅助属性；辅助属性商品必填( 从商品详情中auxentity的id字段取值 )
        self.aux_prop = aux_prop
        # 批次；批次商品必填
        self.batch_no = batch_no
        # 序列号流转id；单据新增后会在单据详情中带回这个字段信息，序列号商品修改时必填
        self.sn_list_id = sn_list_id
        # 序列号 格式：001:备注1;002:备注2 （序列号:序列号备注 多个序列号以英文分号字符;分隔）,序列号商品必填
        self.sn_list = sn_list
        # 生产日期；格式：20190101，保质期商品必填
        self.kf_date = kf_date
        # 到期日；格式：20190101，保质期商品必填
        self.valid_date = valid_date
        # 保质期；保质期商品必填
        self.kf_period = kf_period
        # 保质期单位；保质期商品必填：1-天，2-月，3-年
        self.kf_type = kf_type
        # 修改数量是否重新取价；默认为：true
        self.regain_price = regain_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.material is not None:
            result['materialid_id'] = self.material
        if self.stock is not None:
            result['stockid_id'] = self.stock
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.qty is not None:
            result['qty'] = self.qty
        if self.unit is not None:
            result['unit_id'] = self.unit
        if self.price is not None:
            result['price'] = self.price
        if self.cess is not None:
            result['cess'] = self.cess
        if self.tax_amount is not None:
            result['taxamount'] = self.tax_amount
        if self.dis_amount is not None:
            result['disamount'] = self.dis_amount
        if self.discount is not None:
            result['discount'] = self.discount
        if self.is_free is not None:
            result['is_free'] = self.is_free
        if self.comment is not None:
            result['comment'] = self.comment
        if self.aux_prop is not None:
            result['auxpropid_id'] = self.aux_prop
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.sn_list is not None:
            result['sn_list'] = self.sn_list
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.regain_price is not None:
            result['regain_price'] = self.regain_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('materialid_id') is not None:
            self.material = m.get('materialid_id')
        if m.get('stockid_id') is not None:
            self.stock = m.get('stockid_id')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('unit_id') is not None:
            self.unit = m.get('unit_id')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('cess') is not None:
            self.cess = m.get('cess')
        if m.get('taxamount') is not None:
            self.tax_amount = m.get('taxamount')
        if m.get('disamount') is not None:
            self.dis_amount = m.get('disamount')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('is_free') is not None:
            self.is_free = m.get('is_free')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('auxpropid_id') is not None:
            self.aux_prop = m.get('auxpropid_id')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('sn_list') is not None:
            self.sn_list = m.get('sn_list')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('regain_price') is not None:
            self.regain_price = m.get('regain_price')
        return self


class SalInboundDetail(TeaModel):
    def __init__(
        self,
        bill_source: str = None,
        id: str = None,
        bill_date: str = None,
        customer: str = None,
        emp: str = None,
        remark: str = None,
        link_man_for_contact: str = None,
        phone_for_contact: str = None,
        country_for_contact: str = None,
        province_for_contact: str = None,
        city_for_contact: str = None,
        district_for_contact: str = None,
        address_for_contact: str = None,
        discount_amount: str = None,
        discount_rate: str = None,
        total_ins_amount: str = None,
        total_amount: str = None,
        diff_amount: str = None,
        payment_entries: List[PaymentEntry] = None,
        material_entries: List[InboundMaterialEntry] = None,
        attachments: List[AttachmentEntry] = None,
    ):
        # 单据来源；
        self.bill_source = bill_source
        self.id = id
        # 出库日期,格式：2019-01-01
        self.bill_date = bill_date
        # 客户
        self.customer = customer
        # 业务员
        self.emp = emp
        # 单据备注
        self.remark = remark
        # 联系信息-联系人
        self.link_man_for_contact = link_man_for_contact
        # 联系信息-联系方式
        self.phone_for_contact = phone_for_contact
        # 联系信息-国家ID
        self.country_for_contact = country_for_contact
        # 联系信息-省ID
        self.province_for_contact = province_for_contact
        # 联系信息-市ID
        self.city_for_contact = city_for_contact
        # 联系信息-区ID
        self.district_for_contact = district_for_contact
        # 联系信息-详细地址
        self.address_for_contact = address_for_contact
        # 整单折扣额
        self.discount_amount = discount_amount
        # 整单折扣率%\
        self.discount_rate = discount_rate
        # 本次收款
        self.total_ins_amount = total_ins_amount
        # 本次应收账款
        self.total_amount = total_amount
        # 抹零金额
        self.diff_amount = diff_amount
        # 收款账户
        self.payment_entries = payment_entries
        # 商品分录
        self.material_entries = material_entries
        # 上传的附件url
        self.attachments = attachments

    def validate(self):
        if self.payment_entries:
            for k in self.payment_entries:
                if k:
                    k.validate()
        if self.material_entries:
            for k in self.material_entries:
                if k:
                    k.validate()
        if self.attachments:
            for k in self.attachments:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_source is not None:
            result['billsource'] = self.bill_source
        if self.id is not None:
            result['id'] = self.id
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.customer is not None:
            result['customerid_id'] = self.customer
        if self.emp is not None:
            result['empid_id'] = self.emp
        if self.remark is not None:
            result['remark'] = self.remark
        if self.link_man_for_contact is not None:
            result['contact_linkman'] = self.link_man_for_contact
        if self.phone_for_contact is not None:
            result['contact_phone'] = self.phone_for_contact
        if self.country_for_contact is not None:
            result['contact_country_id'] = self.country_for_contact
        if self.province_for_contact is not None:
            result['contact_province_id'] = self.province_for_contact
        if self.city_for_contact is not None:
            result['contact_city_id'] = self.city_for_contact
        if self.district_for_contact is not None:
            result['contact_district_id'] = self.district_for_contact
        if self.address_for_contact is not None:
            result['contact_address'] = self.address_for_contact
        if self.discount_amount is not None:
            result['bill_dis_amount'] = self.discount_amount
        if self.discount_rate is not None:
            result['bill_dis_rate'] = self.discount_rate
        if self.total_ins_amount is not None:
            result['totalinsamount'] = self.total_ins_amount
        if self.total_amount is not None:
            result['totalamount'] = self.total_amount
        if self.diff_amount is not None:
            result['diffamount'] = self.diff_amount
        result['payment_entry'] = []
        if self.payment_entries is not None:
            for k in self.payment_entries:
                result['payment_entry'].append(k.to_map() if k else None)
        result['material_entity'] = []
        if self.material_entries is not None:
            for k in self.material_entries:
                result['material_entity'].append(k.to_map() if k else None)
        result['attachments_url'] = []
        if self.attachments is not None:
            for k in self.attachments:
                result['attachments_url'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('billsource') is not None:
            self.bill_source = m.get('billsource')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('customerid_id') is not None:
            self.customer = m.get('customerid_id')
        if m.get('empid_id') is not None:
            self.emp = m.get('empid_id')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('contact_linkman') is not None:
            self.link_man_for_contact = m.get('contact_linkman')
        if m.get('contact_phone') is not None:
            self.phone_for_contact = m.get('contact_phone')
        if m.get('contact_country_id') is not None:
            self.country_for_contact = m.get('contact_country_id')
        if m.get('contact_province_id') is not None:
            self.province_for_contact = m.get('contact_province_id')
        if m.get('contact_city_id') is not None:
            self.city_for_contact = m.get('contact_city_id')
        if m.get('contact_district_id') is not None:
            self.district_for_contact = m.get('contact_district_id')
        if m.get('contact_address') is not None:
            self.address_for_contact = m.get('contact_address')
        if m.get('bill_dis_amount') is not None:
            self.discount_amount = m.get('bill_dis_amount')
        if m.get('bill_dis_rate') is not None:
            self.discount_rate = m.get('bill_dis_rate')
        if m.get('totalinsamount') is not None:
            self.total_ins_amount = m.get('totalinsamount')
        if m.get('totalamount') is not None:
            self.total_amount = m.get('totalamount')
        if m.get('diffamount') is not None:
            self.diff_amount = m.get('diffamount')
        self.payment_entries = []
        if m.get('payment_entry') is not None:
            for k in m.get('payment_entry'):
                temp_model = PaymentEntry()
                self.payment_entries.append(temp_model.from_map(k))
        self.material_entries = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = InboundMaterialEntry()
                self.material_entries.append(temp_model.from_map(k))
        self.attachments = []
        if m.get('attachments_url') is not None:
            for k in m.get('attachments_url'):
                temp_model = AttachmentEntry()
                self.attachments.append(temp_model.from_map(k))
        return self


class SalInboundDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: SalInboundDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = SalInboundDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class SalInboundSaveRequest(TeaModel):
    def __init__(
        self,
        body: SalInboundDetail = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = SalInboundDetail()
            self.body = temp_model.from_map(m['body'])
        return self


class ProductReportListRequestBody(TeaModel):
    def __init__(
        self,
        dept: List[str] = None,
        reportor: List[str] = None,
        customer: List[str] = None,
        brand: str = None,
        vender: str = None,
        start_bill_date: str = None,
        end_bill_date: str = None,
        start_date: str = None,
        end_date: str = None,
        begin_date: str = None,
        expire_date: str = None,
        start_time: int = None,
        end_time: int = None,
        begin_time: int = None,
        expire_time: int = None,
        search: str = None,
        page: int = None,
        pagesize: int = None,
        top: int = None,
        show_attachment: bool = None,
        show_material_total: bool = None,
    ):
        # 部门ID
        self.dept = dept
        # 上报人
        self.reportor = reportor
        # 客户
        self.customer = customer
        # 品牌id
        self.brand = brand
        # 供应商id-商品对应的默认供应商
        self.vender = vender
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），单据日期
        self.start_bill_date = start_bill_date
        # 结束日期 单据日期
        self.end_bill_date = end_bill_date
        # 开始日期 创建日期
        self.start_date = start_date
        # 结束日期 创建日期
        self.end_date = end_date
        # 开始日期 修改日期
        self.begin_date = begin_date
        # 结束日期 修改日期
        self.expire_date = expire_date
        # 开始时间 创建日期
        self.start_time = start_time
        # 结束时间 创建日期
        self.end_time = end_time
        # 开始时间 修改日期
        self.begin_time = begin_time
        # 结束时间 修改日期
        self.expire_time = expire_time
        self.search = search
        self.page = page
        self.pagesize = pagesize
        self.top = top
        # 是否返回附件
        self.show_attachment = show_attachment
        # 是否统计商品种类和数量到单据，默认false
        self.show_material_total = show_material_total

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept is not None:
            result['deptid'] = self.dept
        if self.reportor is not None:
            result['reportor'] = self.reportor
        if self.customer is not None:
            result['customerid'] = self.customer
        if self.brand is not None:
            result['brandid'] = self.brand
        if self.vender is not None:
            result['venderid'] = self.vender
        if self.start_bill_date is not None:
            result['startbilldate'] = self.start_bill_date
        if self.end_bill_date is not None:
            result['endbilldate'] = self.end_bill_date
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.begin_date is not None:
            result['begindate'] = self.begin_date
        if self.expire_date is not None:
            result['expiredate'] = self.expire_date
        if self.start_time is not None:
            result['starttime'] = self.start_time
        if self.end_time is not None:
            result['endtime'] = self.end_time
        if self.begin_time is not None:
            result['begintime'] = self.begin_time
        if self.expire_time is not None:
            result['expiretime'] = self.expire_time
        if self.search is not None:
            result['search'] = self.search
        if self.page is not None:
            result['page'] = self.page
        if self.pagesize is not None:
            result['pagesize'] = self.pagesize
        if self.top is not None:
            result['top'] = self.top
        if self.show_attachment is not None:
            result['showattachment'] = self.show_attachment
        if self.show_material_total is not None:
            result['showmaterialtotal'] = self.show_material_total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('deptid') is not None:
            self.dept = m.get('deptid')
        if m.get('reportor') is not None:
            self.reportor = m.get('reportor')
        if m.get('customerid') is not None:
            self.customer = m.get('customerid')
        if m.get('brandid') is not None:
            self.brand = m.get('brandid')
        if m.get('venderid') is not None:
            self.vender = m.get('venderid')
        if m.get('startbilldate') is not None:
            self.start_bill_date = m.get('startbilldate')
        if m.get('endbilldate') is not None:
            self.end_bill_date = m.get('endbilldate')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('begindate') is not None:
            self.begin_date = m.get('begindate')
        if m.get('expiredate') is not None:
            self.expire_date = m.get('expiredate')
        if m.get('starttime') is not None:
            self.start_time = m.get('starttime')
        if m.get('endtime') is not None:
            self.end_time = m.get('endtime')
        if m.get('begintime') is not None:
            self.begin_time = m.get('begintime')
        if m.get('expiretime') is not None:
            self.expire_time = m.get('expiretime')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.pagesize = m.get('pagesize')
        if m.get('top') is not None:
            self.top = m.get('top')
        if m.get('showattachment') is not None:
            self.show_attachment = m.get('showattachment')
        if m.get('showmaterialtotal') is not None:
            self.show_material_total = m.get('showmaterialtotal')
        return self


class ProductReportListRequest(TeaModel):
    def __init__(
        self,
        body: ProductReportListRequestBody = None,
    ):
        self.body = body
        # 获取本品上报单列表接口

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ProductReportListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ProductReportDetailRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
    ):
        self.id = id

    def validate(self):
        self.validate_required(self.id, 'id')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class ProductReportDetailRequest(TeaModel):
    def __init__(
        self,
        body: ProductReportDetailRequestBody = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ProductReportDetailRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ProductReportMaterialEntry(TeaModel):
    def __init__(
        self,
        id: str = None,
        seq: str = None,
        picture: str = None,
        material: str = None,
        material_number: str = None,
        material_name: str = None,
        batch_no: str = None,
        aux_prop: str = None,
        aux_prop_number: str = None,
        aux_prop_name: str = None,
        base_unit: str = None,
        base_unit_number: str = None,
        base_unit_name: str = None,
        unit_type: str = None,
        unit: str = None,
        unit_number: str = None,
        unit_name: str = None,
        coefficient: str = None,
        conversion_rate: str = None,
        aux_unit: str = None,
        aux_unit_number: str = None,
        aux_unit_name: str = None,
        aux_unit_type: str = None,
        aux_unit_coefficient: str = None,
        axu_qty: str = None,
        model: str = None,
        base_qty: str = None,
        qty: str = None,
        pre_qty: str = None,
        price: str = None,
        display: str = None,
        heap: str = None,
        comment: str = None,
    ):
        self.id = id
        self.seq = seq
        self.picture = picture
        # 商品id
        self.material = material
        # 商品编码
        self.material_number = material_number
        # 商品名称
        self.material_name = material_name
        # 批次；批次商品必填
        self.batch_no = batch_no
        # 辅助属性id
        self.aux_prop = aux_prop
        # 辅助属性编码
        self.aux_prop_number = aux_prop_number
        # 辅助属性名称
        self.aux_prop_name = aux_prop_name
        # 基本单位
        self.base_unit = base_unit
        # 基本单位
        self.base_unit_number = base_unit_number
        # 基本单位
        self.base_unit_name = base_unit_name
        self.unit_type = unit_type
        # 单位
        self.unit = unit
        # 单位
        self.unit_number = unit_number
        # 单位
        self.unit_name = unit_name
        # 换算率
        self.coefficient = coefficient
        # 换算公式
        self.conversion_rate = conversion_rate
        # 辅助单位id
        self.aux_unit = aux_unit
        # 辅助单位编码
        self.aux_unit_number = aux_unit_number
        # 辅助单位名称
        self.aux_unit_name = aux_unit_name
        self.aux_unit_type = aux_unit_type
        # 辅助换算率
        self.aux_unit_coefficient = aux_unit_coefficient
        # 辅助数量
        self.axu_qty = axu_qty
        # 规格型号
        self.model = model
        # 数量
        self.base_qty = base_qty
        # 数量
        self.qty = qty
        # 数量
        self.pre_qty = pre_qty
        # 单价
        self.price = price
        # 陈列
        self.display = display
        # 堆头
        self.heap = heap
        # 商品行备注
        self.comment = comment

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.seq is not None:
            result['seq'] = self.seq
        if self.picture is not None:
            result['picture'] = self.picture
        if self.material is not None:
            result['materialid_id'] = self.material
        if self.material_number is not None:
            result['materialid_number'] = self.material_number
        if self.material_name is not None:
            result['materialid_number'] = self.material_name
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.aux_prop is not None:
            result['auxpropid_id'] = self.aux_prop
        if self.aux_prop_number is not None:
            result['auxpropid_number'] = self.aux_prop_number
        if self.aux_prop_name is not None:
            result['auxpropid_name'] = self.aux_prop_name
        if self.base_unit is not None:
            result['baseunit_id'] = self.base_unit
        if self.base_unit_number is not None:
            result['baseunit_number'] = self.base_unit_number
        if self.base_unit_name is not None:
            result['baseunit_name'] = self.base_unit_name
        if self.unit_type is not None:
            result['unittype'] = self.unit_type
        if self.unit is not None:
            result['unit_id'] = self.unit
        if self.unit_number is not None:
            result['unit_number'] = self.unit_number
        if self.unit_name is not None:
            result['unit_name'] = self.unit_name
        if self.coefficient is not None:
            result['coefficient'] = self.coefficient
        if self.conversion_rate is not None:
            result['conversionrate'] = self.conversion_rate
        if self.aux_unit is not None:
            result['auxunitid_id'] = self.aux_unit
        if self.aux_unit_number is not None:
            result['auxunitid_number'] = self.aux_unit_number
        if self.aux_unit_name is not None:
            result['auxunitid_name'] = self.aux_unit_name
        if self.aux_unit_type is not None:
            result['辅助单位类型'] = self.aux_unit_type
        if self.aux_unit_coefficient is not None:
            result['auxcoefficient'] = self.aux_unit_coefficient
        if self.axu_qty is not None:
            result['auxqty'] = self.axu_qty
        if self.model is not None:
            result['materialid_model'] = self.model
        if self.base_qty is not None:
            result['baseqty'] = self.base_qty
        if self.qty is not None:
            result['qty'] = self.qty
        if self.pre_qty is not None:
            result['preqty'] = self.pre_qty
        if self.price is not None:
            result['price'] = self.price
        if self.display is not None:
            result['display'] = self.display
        if self.heap is not None:
            result['heap'] = self.heap
        if self.comment is not None:
            result['comment'] = self.comment
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('seq') is not None:
            self.seq = m.get('seq')
        if m.get('picture') is not None:
            self.picture = m.get('picture')
        if m.get('materialid_id') is not None:
            self.material = m.get('materialid_id')
        if m.get('materialid_number') is not None:
            self.material_number = m.get('materialid_number')
        if m.get('materialid_number') is not None:
            self.material_name = m.get('materialid_number')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('auxpropid_id') is not None:
            self.aux_prop = m.get('auxpropid_id')
        if m.get('auxpropid_number') is not None:
            self.aux_prop_number = m.get('auxpropid_number')
        if m.get('auxpropid_name') is not None:
            self.aux_prop_name = m.get('auxpropid_name')
        if m.get('baseunit_id') is not None:
            self.base_unit = m.get('baseunit_id')
        if m.get('baseunit_number') is not None:
            self.base_unit_number = m.get('baseunit_number')
        if m.get('baseunit_name') is not None:
            self.base_unit_name = m.get('baseunit_name')
        if m.get('unittype') is not None:
            self.unit_type = m.get('unittype')
        if m.get('unit_id') is not None:
            self.unit = m.get('unit_id')
        if m.get('unit_number') is not None:
            self.unit_number = m.get('unit_number')
        if m.get('unit_name') is not None:
            self.unit_name = m.get('unit_name')
        if m.get('coefficient') is not None:
            self.coefficient = m.get('coefficient')
        if m.get('conversionrate') is not None:
            self.conversion_rate = m.get('conversionrate')
        if m.get('auxunitid_id') is not None:
            self.aux_unit = m.get('auxunitid_id')
        if m.get('auxunitid_number') is not None:
            self.aux_unit_number = m.get('auxunitid_number')
        if m.get('auxunitid_name') is not None:
            self.aux_unit_name = m.get('auxunitid_name')
        if m.get('辅助单位类型') is not None:
            self.aux_unit_type = m.get('辅助单位类型')
        if m.get('auxcoefficient') is not None:
            self.aux_unit_coefficient = m.get('auxcoefficient')
        if m.get('auxqty') is not None:
            self.axu_qty = m.get('auxqty')
        if m.get('materialid_model') is not None:
            self.model = m.get('materialid_model')
        if m.get('baseqty') is not None:
            self.base_qty = m.get('baseqty')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('preqty') is not None:
            self.pre_qty = m.get('preqty')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('display') is not None:
            self.display = m.get('display')
        if m.get('heap') is not None:
            self.heap = m.get('heap')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        return self


class ProductReportDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_date: str = None,
        customer: str = None,
        reportor: str = None,
        dept: str = None,
        remark: str = None,
        attachment_count: int = None,
        attachments: List[AttachmentEntry] = None,
        creator: str = None,
        modifier: str = None,
        create_time: str = None,
        modify_time: str = None,
        material_entries: List[ProductReportMaterialEntry] = None,
    ):
        self.id = id
        # 出库日期,格式：2019-01-01
        self.bill_date = bill_date
        # 客户
        self.customer = customer
        # 上报人id
        self.reportor = reportor
        # 部门id
        self.dept = dept
        # 单据备注
        self.remark = remark
        # 附件数
        self.attachment_count = attachment_count
        # 上传的附件url
        self.attachments = attachments
        # 创建人
        self.creator = creator
        # 修改人
        self.modifier = modifier
        # 创建时间
        self.create_time = create_time
        # 修改时间
        self.modify_time = modify_time
        # 商品分录
        self.material_entries = material_entries

    def validate(self):
        if self.attachments:
            for k in self.attachments:
                if k:
                    k.validate()
        if self.material_entries:
            for k in self.material_entries:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.customer is not None:
            result['customerid_id'] = self.customer
        if self.reportor is not None:
            result['reportor_id'] = self.reportor
        if self.dept is not None:
            result['deptid_id'] = self.dept
        if self.remark is not None:
            result['remark'] = self.remark
        if self.attachment_count is not None:
            result['attachments'] = self.attachment_count
        result['attachments_url'] = []
        if self.attachments is not None:
            for k in self.attachments:
                result['attachments_url'].append(k.to_map() if k else None)
        if self.creator is not None:
            result['creator_id'] = self.creator
        if self.modifier is not None:
            result['modifier_id'] = self.modifier
        if self.create_time is not None:
            result['createtime'] = self.create_time
        if self.modify_time is not None:
            result['modifytime'] = self.modify_time
        result['material_entity'] = []
        if self.material_entries is not None:
            for k in self.material_entries:
                result['material_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('customerid_id') is not None:
            self.customer = m.get('customerid_id')
        if m.get('reportor_id') is not None:
            self.reportor = m.get('reportor_id')
        if m.get('deptid_id') is not None:
            self.dept = m.get('deptid_id')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('attachments') is not None:
            self.attachment_count = m.get('attachments')
        self.attachments = []
        if m.get('attachments_url') is not None:
            for k in m.get('attachments_url'):
                temp_model = AttachmentEntry()
                self.attachments.append(temp_model.from_map(k))
        if m.get('creator_id') is not None:
            self.creator = m.get('creator_id')
        if m.get('modifier_id') is not None:
            self.modifier = m.get('modifier_id')
        if m.get('createtime') is not None:
            self.create_time = m.get('createtime')
        if m.get('modifytime') is not None:
            self.modify_time = m.get('modifytime')
        self.material_entries = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = ProductReportMaterialEntry()
                self.material_entries.append(temp_model.from_map(k))
        return self


class ProductReportDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: ProductReportDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = ProductReportDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class ProductReportSaveRequest(TeaModel):
    def __init__(
        self,
        body: ProductReportDetail = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ProductReportDetail()
            self.body = temp_model.from_map(m['body'])
        return self


class ExchangeListRequestBody(TeaModel):
    def __init__(
        self,
        bill_status: str = None,
        io_status: str = None,
        start_bill_date: str = None,
        end_bill_date: str = None,
        start_date: str = None,
        end_date: str = None,
        begin_date: str = None,
        expire_date: str = None,
        start_time: int = None,
        end_time: int = None,
        begin_time: int = None,
        expire_time: int = None,
        search: str = None,
        page: int = None,
        pagesize: int = None,
    ):
        # 单据状态（所有：“”，已审核：“C”，未审核：“Z”）
        self.bill_status = bill_status
        # 出入库状态（未入库：A，部分入库：Z，全部入库：C，未出库：A1，部分出库：Z1，全部出库：C1）
        self.io_status = io_status
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），单据日期
        self.start_bill_date = start_bill_date
        # 结束日期 单据日期
        self.end_bill_date = end_bill_date
        # 开始日期 创建日期
        self.start_date = start_date
        # 结束日期 创建日期
        self.end_date = end_date
        # 开始日期 修改日期
        self.begin_date = begin_date
        # 结束日期 修改日期
        self.expire_date = expire_date
        # 开始时间 创建日期
        self.start_time = start_time
        # 结束时间 创建日期
        self.end_time = end_time
        # 开始时间 修改日期
        self.begin_time = begin_time
        # 结束时间 修改日期
        self.expire_time = expire_time
        self.search = search
        self.page = page
        self.pagesize = pagesize

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_status is not None:
            result['billstatus'] = self.bill_status
        if self.io_status is not None:
            result['entryiostatus'] = self.io_status
        if self.start_bill_date is not None:
            result['startbilldate'] = self.start_bill_date
        if self.end_bill_date is not None:
            result['endbilldate'] = self.end_bill_date
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.begin_date is not None:
            result['begindate'] = self.begin_date
        if self.expire_date is not None:
            result['expiredate'] = self.expire_date
        if self.start_time is not None:
            result['starttime'] = self.start_time
        if self.end_time is not None:
            result['endtime'] = self.end_time
        if self.begin_time is not None:
            result['begintime'] = self.begin_time
        if self.expire_time is not None:
            result['expiretime'] = self.expire_time
        if self.search is not None:
            result['search'] = self.search
        if self.page is not None:
            result['page'] = self.page
        if self.pagesize is not None:
            result['pagesize'] = self.pagesize
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('billstatus') is not None:
            self.bill_status = m.get('billstatus')
        if m.get('entryiostatus') is not None:
            self.io_status = m.get('entryiostatus')
        if m.get('startbilldate') is not None:
            self.start_bill_date = m.get('startbilldate')
        if m.get('endbilldate') is not None:
            self.end_bill_date = m.get('endbilldate')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('begindate') is not None:
            self.begin_date = m.get('begindate')
        if m.get('expiredate') is not None:
            self.expire_date = m.get('expiredate')
        if m.get('starttime') is not None:
            self.start_time = m.get('starttime')
        if m.get('endtime') is not None:
            self.end_time = m.get('endtime')
        if m.get('begintime') is not None:
            self.begin_time = m.get('begintime')
        if m.get('expiretime') is not None:
            self.expire_time = m.get('expiretime')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.pagesize = m.get('pagesize')
        return self


class ExchangeListRequest(TeaModel):
    def __init__(
        self,
        body: ExchangeListRequestBody = None,
    ):
        self.body = body
        # 获取销售换货单列表接口

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ExchangeListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ExchangeDetailRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        number: str = None,
    ):
        self.id = id
        self.number = number

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.number is not None:
            result['number'] = self.number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('number') is not None:
            self.number = m.get('number')
        return self


class ExchangeDetailRequest(TeaModel):
    def __init__(
        self,
        body: ExchangeDetailRequestBody = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ExchangeDetailRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ExchangeMaterialEntry(TeaModel):
    def __init__(
        self,
        material_type: str = None,
        material: str = None,
        stock: str = None,
        sp_id: str = None,
        qty: str = None,
        unit: str = None,
        price: str = None,
        cess: str = None,
        tax_amount: str = None,
        dis_amount: str = None,
        discount: str = None,
        is_free: str = None,
        comment: str = None,
        aux_prop: str = None,
        batch_no: str = None,
        sn_list_id: str = None,
        sn_list: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_period: str = None,
        kf_type: str = None,
        regain_price: str = None,
    ):
        # 分录类型，换入：in，换出：out
        self.material_type = material_type
        # 商品
        self.material = material
        # 仓库
        self.stock = stock
        # 仓位，启用了仓位管理则必填
        self.sp_id = sp_id
        # 数量
        self.qty = qty
        # 单位
        self.unit = unit
        # 单价
        self.price = price
        # 商品增值税税率；不传后端自取，传入则以传入为准
        self.cess = cess
        # 商品税额
        self.tax_amount = tax_amount
        # 折扣额
        self.dis_amount = dis_amount
        # 折扣（折）
        self.discount = discount
        # 是否赠品；true-是，false-否（默认）
        self.is_free = is_free
        # 商品行备注
        self.comment = comment
        # 辅助属性；辅助属性商品必填( 从商品详情中auxentity的id字段取值 )
        self.aux_prop = aux_prop
        # 批次；批次商品必填
        self.batch_no = batch_no
        # 序列号流转id；单据新增后会在单据详情中带回这个字段信息，序列号商品修改时必填
        self.sn_list_id = sn_list_id
        # 序列号 格式：001:备注1;002:备注2 （序列号:序列号备注 多个序列号以英文分号字符;分隔）,序列号商品必填
        self.sn_list = sn_list
        # 生产日期；格式：20190101，保质期商品必填
        self.kf_date = kf_date
        # 到期日；格式：20190101，保质期商品必填
        self.valid_date = valid_date
        # 保质期；保质期商品必填
        self.kf_period = kf_period
        # 保质期单位；保质期商品必填：1-天，2-月，3-年
        self.kf_type = kf_type
        # 修改数量是否重新取价；默认为：true
        self.regain_price = regain_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.material_type is not None:
            result['materialtype'] = self.material_type
        if self.material is not None:
            result['materialid_id'] = self.material
        if self.stock is not None:
            result['stockid_id'] = self.stock
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.qty is not None:
            result['qty'] = self.qty
        if self.unit is not None:
            result['unit_id'] = self.unit
        if self.price is not None:
            result['price'] = self.price
        if self.cess is not None:
            result['cess'] = self.cess
        if self.tax_amount is not None:
            result['taxamount'] = self.tax_amount
        if self.dis_amount is not None:
            result['disamount'] = self.dis_amount
        if self.discount is not None:
            result['discount'] = self.discount
        if self.is_free is not None:
            result['is_free'] = self.is_free
        if self.comment is not None:
            result['comment'] = self.comment
        if self.aux_prop is not None:
            result['auxpropid_id'] = self.aux_prop
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.sn_list is not None:
            result['sn_list'] = self.sn_list
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.regain_price is not None:
            result['regain_price'] = self.regain_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('materialtype') is not None:
            self.material_type = m.get('materialtype')
        if m.get('materialid_id') is not None:
            self.material = m.get('materialid_id')
        if m.get('stockid_id') is not None:
            self.stock = m.get('stockid_id')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('unit_id') is not None:
            self.unit = m.get('unit_id')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('cess') is not None:
            self.cess = m.get('cess')
        if m.get('taxamount') is not None:
            self.tax_amount = m.get('taxamount')
        if m.get('disamount') is not None:
            self.dis_amount = m.get('disamount')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('is_free') is not None:
            self.is_free = m.get('is_free')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('auxpropid_id') is not None:
            self.aux_prop = m.get('auxpropid_id')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('sn_list') is not None:
            self.sn_list = m.get('sn_list')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('regain_price') is not None:
            self.regain_price = m.get('regain_price')
        return self


class ExchangeDetail(TeaModel):
    def __init__(
        self,
        bill_source: str = None,
        id: str = None,
        bill_date: str = None,
        customer: str = None,
        emp: str = None,
        remark: str = None,
        link_man_for_contact: str = None,
        phone_for_contact: str = None,
        country_for_contact: str = None,
        province_for_contact: str = None,
        city_for_contact: str = None,
        district_for_contact: str = None,
        address_for_contact: str = None,
        discount_amount: str = None,
        discount_rate: str = None,
        total_ins_amount: str = None,
        total_amount: str = None,
        diff_amount: str = None,
        total_un_settle_amount: str = None,
        payment_entries: List[PaymentEntry] = None,
        material_entries: List[ExchangeMaterialEntry] = None,
        attachments: List[AttachmentEntry] = None,
    ):
        # 单据来源；
        self.bill_source = bill_source
        self.id = id
        # 出库日期,格式：2019-01-01
        self.bill_date = bill_date
        # 客户
        self.customer = customer
        # 业务员
        self.emp = emp
        # 单据备注
        self.remark = remark
        # 联系信息-联系人
        self.link_man_for_contact = link_man_for_contact
        # 联系信息-联系方式
        self.phone_for_contact = phone_for_contact
        # 联系信息-国家ID
        self.country_for_contact = country_for_contact
        # 联系信息-省ID
        self.province_for_contact = province_for_contact
        # 联系信息-市ID
        self.city_for_contact = city_for_contact
        # 联系信息-区ID
        self.district_for_contact = district_for_contact
        # 联系信息-详细地址
        self.address_for_contact = address_for_contact
        # 整单折扣额
        self.discount_amount = discount_amount
        # 整单折扣率%\
        self.discount_rate = discount_rate
        # 本次退款
        self.total_ins_amount = total_ins_amount
        # 本次应退账款
        self.total_amount = total_amount
        # 抹零金额
        self.diff_amount = diff_amount
        # 本单未退
        self.total_un_settle_amount = total_un_settle_amount
        # 退款账户
        self.payment_entries = payment_entries
        # 商品分录
        self.material_entries = material_entries
        # 上传的附件url
        self.attachments = attachments

    def validate(self):
        if self.payment_entries:
            for k in self.payment_entries:
                if k:
                    k.validate()
        if self.material_entries:
            for k in self.material_entries:
                if k:
                    k.validate()
        if self.attachments:
            for k in self.attachments:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_source is not None:
            result['billsource'] = self.bill_source
        if self.id is not None:
            result['id'] = self.id
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.customer is not None:
            result['customerid_id'] = self.customer
        if self.emp is not None:
            result['empid_id'] = self.emp
        if self.remark is not None:
            result['remark'] = self.remark
        if self.link_man_for_contact is not None:
            result['contact_linkman'] = self.link_man_for_contact
        if self.phone_for_contact is not None:
            result['contact_phone'] = self.phone_for_contact
        if self.country_for_contact is not None:
            result['contact_country_id'] = self.country_for_contact
        if self.province_for_contact is not None:
            result['contact_province_id'] = self.province_for_contact
        if self.city_for_contact is not None:
            result['contact_city_id'] = self.city_for_contact
        if self.district_for_contact is not None:
            result['contact_district_id'] = self.district_for_contact
        if self.address_for_contact is not None:
            result['contact_address'] = self.address_for_contact
        if self.discount_amount is not None:
            result['bill_dis_amount'] = self.discount_amount
        if self.discount_rate is not None:
            result['bill_dis_rate'] = self.discount_rate
        if self.total_ins_amount is not None:
            result['totalinsamount'] = self.total_ins_amount
        if self.total_amount is not None:
            result['totalamount'] = self.total_amount
        if self.diff_amount is not None:
            result['diffamount'] = self.diff_amount
        if self.total_un_settle_amount is not None:
            result['totalunsettleamount'] = self.total_un_settle_amount
        result['payment_entry'] = []
        if self.payment_entries is not None:
            for k in self.payment_entries:
                result['payment_entry'].append(k.to_map() if k else None)
        result['material_entity'] = []
        if self.material_entries is not None:
            for k in self.material_entries:
                result['material_entity'].append(k.to_map() if k else None)
        result['attachments_url'] = []
        if self.attachments is not None:
            for k in self.attachments:
                result['attachments_url'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('billsource') is not None:
            self.bill_source = m.get('billsource')
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('customerid_id') is not None:
            self.customer = m.get('customerid_id')
        if m.get('empid_id') is not None:
            self.emp = m.get('empid_id')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('contact_linkman') is not None:
            self.link_man_for_contact = m.get('contact_linkman')
        if m.get('contact_phone') is not None:
            self.phone_for_contact = m.get('contact_phone')
        if m.get('contact_country_id') is not None:
            self.country_for_contact = m.get('contact_country_id')
        if m.get('contact_province_id') is not None:
            self.province_for_contact = m.get('contact_province_id')
        if m.get('contact_city_id') is not None:
            self.city_for_contact = m.get('contact_city_id')
        if m.get('contact_district_id') is not None:
            self.district_for_contact = m.get('contact_district_id')
        if m.get('contact_address') is not None:
            self.address_for_contact = m.get('contact_address')
        if m.get('bill_dis_amount') is not None:
            self.discount_amount = m.get('bill_dis_amount')
        if m.get('bill_dis_rate') is not None:
            self.discount_rate = m.get('bill_dis_rate')
        if m.get('totalinsamount') is not None:
            self.total_ins_amount = m.get('totalinsamount')
        if m.get('totalamount') is not None:
            self.total_amount = m.get('totalamount')
        if m.get('diffamount') is not None:
            self.diff_amount = m.get('diffamount')
        if m.get('totalunsettleamount') is not None:
            self.total_un_settle_amount = m.get('totalunsettleamount')
        self.payment_entries = []
        if m.get('payment_entry') is not None:
            for k in m.get('payment_entry'):
                temp_model = PaymentEntry()
                self.payment_entries.append(temp_model.from_map(k))
        self.material_entries = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = ExchangeMaterialEntry()
                self.material_entries.append(temp_model.from_map(k))
        self.attachments = []
        if m.get('attachments_url') is not None:
            for k in m.get('attachments_url'):
                temp_model = AttachmentEntry()
                self.attachments.append(temp_model.from_map(k))
        return self


class ExchangeDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: ExchangeDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = ExchangeDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class ExchangeSaveRequest(TeaModel):
    def __init__(
        self,
        body: ExchangeDetail = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ExchangeDetail()
            self.body = temp_model.from_map(m['body'])
        return self


class ComputingReportListRequestBody(TeaModel):
    def __init__(
        self,
        dept: List[str] = None,
        reportor: List[str] = None,
        customer: List[str] = None,
        brand: str = None,
        start_bill_date: str = None,
        end_bill_date: str = None,
        start_date: str = None,
        end_date: str = None,
        begin_date: str = None,
        expire_date: str = None,
        start_time: int = None,
        end_time: int = None,
        begin_time: int = None,
        expire_time: int = None,
        search: str = None,
        page: int = None,
        pagesize: int = None,
        top: int = None,
        show_attachment: bool = None,
        show_material_total: bool = None,
    ):
        # 部门ID
        self.dept = dept
        # 上报人
        self.reportor = reportor
        # 客户
        self.customer = customer
        # 品牌id
        self.brand = brand
        # 开始日期（格式：“yyyy-MM-dd”，为空表示不过滤），单据日期
        self.start_bill_date = start_bill_date
        # 结束日期 单据日期
        self.end_bill_date = end_bill_date
        # 开始日期 创建日期
        self.start_date = start_date
        # 结束日期 创建日期
        self.end_date = end_date
        # 开始日期 修改日期
        self.begin_date = begin_date
        # 结束日期 修改日期
        self.expire_date = expire_date
        # 开始时间 创建日期
        self.start_time = start_time
        # 结束时间 创建日期
        self.end_time = end_time
        # 开始时间 修改日期
        self.begin_time = begin_time
        # 结束时间 修改日期
        self.expire_time = expire_time
        self.search = search
        self.page = page
        self.pagesize = pagesize
        self.top = top
        # 是否返回附件
        self.show_attachment = show_attachment
        # 是否统计商品种类和数量到单据，默认false
        self.show_material_total = show_material_total

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dept is not None:
            result['deptid'] = self.dept
        if self.reportor is not None:
            result['reportor'] = self.reportor
        if self.customer is not None:
            result['customerid'] = self.customer
        if self.brand is not None:
            result['brandid'] = self.brand
        if self.start_bill_date is not None:
            result['startbilldate'] = self.start_bill_date
        if self.end_bill_date is not None:
            result['endbilldate'] = self.end_bill_date
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        if self.begin_date is not None:
            result['begindate'] = self.begin_date
        if self.expire_date is not None:
            result['expiredate'] = self.expire_date
        if self.start_time is not None:
            result['starttime'] = self.start_time
        if self.end_time is not None:
            result['endtime'] = self.end_time
        if self.begin_time is not None:
            result['begintime'] = self.begin_time
        if self.expire_time is not None:
            result['expiretime'] = self.expire_time
        if self.search is not None:
            result['search'] = self.search
        if self.page is not None:
            result['page'] = self.page
        if self.pagesize is not None:
            result['pagesize'] = self.pagesize
        if self.top is not None:
            result['top'] = self.top
        if self.show_attachment is not None:
            result['showattachment'] = self.show_attachment
        if self.show_material_total is not None:
            result['showmaterialtotal'] = self.show_material_total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('deptid') is not None:
            self.dept = m.get('deptid')
        if m.get('reportor') is not None:
            self.reportor = m.get('reportor')
        if m.get('customerid') is not None:
            self.customer = m.get('customerid')
        if m.get('brandid') is not None:
            self.brand = m.get('brandid')
        if m.get('startbilldate') is not None:
            self.start_bill_date = m.get('startbilldate')
        if m.get('endbilldate') is not None:
            self.end_bill_date = m.get('endbilldate')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        if m.get('begindate') is not None:
            self.begin_date = m.get('begindate')
        if m.get('expiredate') is not None:
            self.expire_date = m.get('expiredate')
        if m.get('starttime') is not None:
            self.start_time = m.get('starttime')
        if m.get('endtime') is not None:
            self.end_time = m.get('endtime')
        if m.get('begintime') is not None:
            self.begin_time = m.get('begintime')
        if m.get('expiretime') is not None:
            self.expire_time = m.get('expiretime')
        if m.get('search') is not None:
            self.search = m.get('search')
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.pagesize = m.get('pagesize')
        if m.get('top') is not None:
            self.top = m.get('top')
        if m.get('showattachment') is not None:
            self.show_attachment = m.get('showattachment')
        if m.get('showmaterialtotal') is not None:
            self.show_material_total = m.get('showmaterialtotal')
        return self


class ComputingReportListRequest(TeaModel):
    def __init__(
        self,
        body: ComputingReportListRequestBody = None,
    ):
        self.body = body
        # 获取本品上报单列表接口

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ComputingReportListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ComputingReportDetailRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
    ):
        self.id = id

    def validate(self):
        self.validate_required(self.id, 'id')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        return self


class ComputingReportDetailRequest(TeaModel):
    def __init__(
        self,
        body: ComputingReportDetailRequestBody = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ComputingReportDetailRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ComputingReportMaterialEntry(TeaModel):
    def __init__(
        self,
        material_type: str = None,
        material: str = None,
        stock: str = None,
        sp_id: str = None,
        qty: str = None,
        unit: str = None,
        price: str = None,
        cess: str = None,
        tax_amount: str = None,
        dis_amount: str = None,
        discount: str = None,
        is_free: str = None,
        comment: str = None,
        aux_prop: str = None,
        batch_no: str = None,
        sn_list_id: str = None,
        sn_list: str = None,
        kf_date: str = None,
        valid_date: str = None,
        kf_period: str = None,
        kf_type: str = None,
        regain_price: str = None,
    ):
        # 分录类型，换入：in，换出：out
        self.material_type = material_type
        # 商品
        self.material = material
        # 仓库
        self.stock = stock
        # 仓位，启用了仓位管理则必填
        self.sp_id = sp_id
        # 数量
        self.qty = qty
        # 单位
        self.unit = unit
        # 单价
        self.price = price
        # 商品增值税税率；不传后端自取，传入则以传入为准
        self.cess = cess
        # 商品税额
        self.tax_amount = tax_amount
        # 折扣额
        self.dis_amount = dis_amount
        # 折扣（折）
        self.discount = discount
        # 是否赠品；true-是，false-否（默认）
        self.is_free = is_free
        # 商品行备注
        self.comment = comment
        # 辅助属性；辅助属性商品必填( 从商品详情中auxentity的id字段取值 )
        self.aux_prop = aux_prop
        # 批次；批次商品必填
        self.batch_no = batch_no
        # 序列号流转id；单据新增后会在单据详情中带回这个字段信息，序列号商品修改时必填
        self.sn_list_id = sn_list_id
        # 序列号 格式：001:备注1;002:备注2 （序列号:序列号备注 多个序列号以英文分号字符;分隔）,序列号商品必填
        self.sn_list = sn_list
        # 生产日期；格式：20190101，保质期商品必填
        self.kf_date = kf_date
        # 到期日；格式：20190101，保质期商品必填
        self.valid_date = valid_date
        # 保质期；保质期商品必填
        self.kf_period = kf_period
        # 保质期单位；保质期商品必填：1-天，2-月，3-年
        self.kf_type = kf_type
        # 修改数量是否重新取价；默认为：true
        self.regain_price = regain_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.material_type is not None:
            result['materialtype'] = self.material_type
        if self.material is not None:
            result['materialid_id'] = self.material
        if self.stock is not None:
            result['stockid_id'] = self.stock
        if self.sp_id is not None:
            result['spid_id'] = self.sp_id
        if self.qty is not None:
            result['qty'] = self.qty
        if self.unit is not None:
            result['unit_id'] = self.unit
        if self.price is not None:
            result['price'] = self.price
        if self.cess is not None:
            result['cess'] = self.cess
        if self.tax_amount is not None:
            result['taxamount'] = self.tax_amount
        if self.dis_amount is not None:
            result['disamount'] = self.dis_amount
        if self.discount is not None:
            result['discount'] = self.discount
        if self.is_free is not None:
            result['is_free'] = self.is_free
        if self.comment is not None:
            result['comment'] = self.comment
        if self.aux_prop is not None:
            result['auxpropid_id'] = self.aux_prop
        if self.batch_no is not None:
            result['batchno'] = self.batch_no
        if self.sn_list_id is not None:
            result['snlistid'] = self.sn_list_id
        if self.sn_list is not None:
            result['sn_list'] = self.sn_list
        if self.kf_date is not None:
            result['kfdate'] = self.kf_date
        if self.valid_date is not None:
            result['validdate'] = self.valid_date
        if self.kf_period is not None:
            result['kfperiod'] = self.kf_period
        if self.kf_type is not None:
            result['kftype'] = self.kf_type
        if self.regain_price is not None:
            result['regain_price'] = self.regain_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('materialtype') is not None:
            self.material_type = m.get('materialtype')
        if m.get('materialid_id') is not None:
            self.material = m.get('materialid_id')
        if m.get('stockid_id') is not None:
            self.stock = m.get('stockid_id')
        if m.get('spid_id') is not None:
            self.sp_id = m.get('spid_id')
        if m.get('qty') is not None:
            self.qty = m.get('qty')
        if m.get('unit_id') is not None:
            self.unit = m.get('unit_id')
        if m.get('price') is not None:
            self.price = m.get('price')
        if m.get('cess') is not None:
            self.cess = m.get('cess')
        if m.get('taxamount') is not None:
            self.tax_amount = m.get('taxamount')
        if m.get('disamount') is not None:
            self.dis_amount = m.get('disamount')
        if m.get('discount') is not None:
            self.discount = m.get('discount')
        if m.get('is_free') is not None:
            self.is_free = m.get('is_free')
        if m.get('comment') is not None:
            self.comment = m.get('comment')
        if m.get('auxpropid_id') is not None:
            self.aux_prop = m.get('auxpropid_id')
        if m.get('batchno') is not None:
            self.batch_no = m.get('batchno')
        if m.get('snlistid') is not None:
            self.sn_list_id = m.get('snlistid')
        if m.get('sn_list') is not None:
            self.sn_list = m.get('sn_list')
        if m.get('kfdate') is not None:
            self.kf_date = m.get('kfdate')
        if m.get('validdate') is not None:
            self.valid_date = m.get('validdate')
        if m.get('kfperiod') is not None:
            self.kf_period = m.get('kfperiod')
        if m.get('kftype') is not None:
            self.kf_type = m.get('kftype')
        if m.get('regain_price') is not None:
            self.regain_price = m.get('regain_price')
        return self


class ComputingReportDetail(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_date: str = None,
        customer: str = None,
        reportor: str = None,
        dept: str = None,
        remark: str = None,
        attachment_count: int = None,
        attachments: List[AttachmentEntry] = None,
        creator: str = None,
        modifier: str = None,
        create_time: str = None,
        modify_time: str = None,
        material_entries: List[ComputingReportMaterialEntry] = None,
    ):
        self.id = id
        # 出库日期,格式：2019-01-01
        self.bill_date = bill_date
        # 客户
        self.customer = customer
        # 上报人id
        self.reportor = reportor
        # 部门id
        self.dept = dept
        # 单据备注
        self.remark = remark
        # 附件数
        self.attachment_count = attachment_count
        # 上传的附件url
        self.attachments = attachments
        # 创建人
        self.creator = creator
        # 修改人
        self.modifier = modifier
        # 创建时间
        self.create_time = create_time
        # 修改时间
        self.modify_time = modify_time
        # 商品分录
        self.material_entries = material_entries

    def validate(self):
        if self.attachments:
            for k in self.attachments:
                if k:
                    k.validate()
        if self.material_entries:
            for k in self.material_entries:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_date is not None:
            result['billdate'] = self.bill_date
        if self.customer is not None:
            result['customerid_id'] = self.customer
        if self.reportor is not None:
            result['reportor_id'] = self.reportor
        if self.dept is not None:
            result['deptid_id'] = self.dept
        if self.remark is not None:
            result['remark'] = self.remark
        if self.attachment_count is not None:
            result['attachments'] = self.attachment_count
        result['attachments_url'] = []
        if self.attachments is not None:
            for k in self.attachments:
                result['attachments_url'].append(k.to_map() if k else None)
        if self.creator is not None:
            result['creator_id'] = self.creator
        if self.modifier is not None:
            result['modifier_id'] = self.modifier
        if self.create_time is not None:
            result['createtime'] = self.create_time
        if self.modify_time is not None:
            result['modifytime'] = self.modify_time
        result['material_entity'] = []
        if self.material_entries is not None:
            for k in self.material_entries:
                result['material_entity'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billdate') is not None:
            self.bill_date = m.get('billdate')
        if m.get('customerid_id') is not None:
            self.customer = m.get('customerid_id')
        if m.get('reportor_id') is not None:
            self.reportor = m.get('reportor_id')
        if m.get('deptid_id') is not None:
            self.dept = m.get('deptid_id')
        if m.get('remark') is not None:
            self.remark = m.get('remark')
        if m.get('attachments') is not None:
            self.attachment_count = m.get('attachments')
        self.attachments = []
        if m.get('attachments_url') is not None:
            for k in m.get('attachments_url'):
                temp_model = AttachmentEntry()
                self.attachments.append(temp_model.from_map(k))
        if m.get('creator_id') is not None:
            self.creator = m.get('creator_id')
        if m.get('modifier_id') is not None:
            self.modifier = m.get('modifier_id')
        if m.get('createtime') is not None:
            self.create_time = m.get('createtime')
        if m.get('modifytime') is not None:
            self.modify_time = m.get('modifytime')
        self.material_entries = []
        if m.get('material_entity') is not None:
            for k in m.get('material_entity'):
                temp_model = ComputingReportMaterialEntry()
                self.material_entries.append(temp_model.from_map(k))
        return self


class ComputingReportDetailResponse(TeaModel):
    def __init__(
        self,
        success: bool = None,
        message: str = None,
        data: ComputingReportDetail = None,
        error_code: str = None,
    ):
        self.success = success
        self.message = message
        self.data = data
        self.error_code = error_code

    def validate(self):
        self.validate_required(self.success, 'success')
        self.validate_required(self.message, 'message')
        self.validate_required(self.data, 'data')
        if self.data:
            self.data.validate()
        self.validate_required(self.error_code, 'error_code')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.success is not None:
            result['success'] = self.success
        if self.message is not None:
            result['message'] = self.message
        if self.data is not None:
            result['data'] = self.data.to_map()
        if self.error_code is not None:
            result['errorCode'] = self.error_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('success') is not None:
            self.success = m.get('success')
        if m.get('message') is not None:
            self.message = m.get('message')
        if m.get('data') is not None:
            temp_model = ComputingReportDetail()
            self.data = temp_model.from_map(m['data'])
        if m.get('errorCode') is not None:
            self.error_code = m.get('errorCode')
        return self


class ComputingReportSaveRequest(TeaModel):
    def __init__(
        self,
        body: ComputingReportDetail = None,
    ):
        self.body = body

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = ComputingReportDetail()
            self.body = temp_model.from_map(m['body'])
        return self


class RankRequestBody(TeaModel):
    def __init__(
        self,
        rank_type: str = None,
        time_type: str = None,
        dept_id: str = None,
        start_date: str = None,
        end_date: str = None,
    ):
        # 排行榜类型，1部门销售金额排行，2业务员销售金额排行，3成交订单数排行
        self.rank_type = rank_type
        # 日期类型，1上月，2本月，3本季，4本年，5自定义时间
        self.time_type = time_type
        # 部门ID
        self.dept_id = dept_id
        # 日期类型为5时必填，格式yyyy-mm-dd
        self.start_date = start_date
        # 日期类型为5时必填，格式yyyy-mm-dd
        self.end_date = end_date

    def validate(self):
        self.validate_required(self.rank_type, 'rank_type')
        self.validate_required(self.time_type, 'time_type')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.rank_type is not None:
            result['ranktype'] = self.rank_type
        if self.time_type is not None:
            result['timetype'] = self.time_type
        if self.dept_id is not None:
            result['deptid'] = self.dept_id
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ranktype') is not None:
            self.rank_type = m.get('ranktype')
        if m.get('timetype') is not None:
            self.time_type = m.get('timetype')
        if m.get('deptid') is not None:
            self.dept_id = m.get('deptid')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        return self


class RankRequest(TeaModel):
    def __init__(
        self,
        body: RankRequestBody = None,
    ):
        self.body = body
        # 排行榜

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = RankRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GoalOrderListRequestBody(TeaModel):
    def __init__(
        self,
        page: int = None,
        pagesize: int = None,
    ):
        self.page = page
        self.pagesize = pagesize

    def validate(self):
        self.validate_required(self.page, 'page')
        self.validate_required(self.pagesize, 'pagesize')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page is not None:
            result['page'] = self.page
        if self.pagesize is not None:
            result['pagesize'] = self.pagesize
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('page') is not None:
            self.page = m.get('page')
        if m.get('pagesize') is not None:
            self.pagesize = m.get('pagesize')
        return self


class GoalOrderListRequest(TeaModel):
    def __init__(
        self,
        body: GoalOrderListRequestBody = None,
    ):
        self.body = body
        # 最新销售订单列表

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = GoalOrderListRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GoalCompletionRateRequestBody(TeaModel):
    def __init__(
        self,
        time_type: str = None,
        dept_id: str = None,
        start_date: str = None,
        end_date: str = None,
    ):
        # 日期类型，1上月，2本月，3本季，4本年，5自定义时间
        self.time_type = time_type
        # 部门ID
        self.dept_id = dept_id
        # 日期类型为5时必填，格式yyyy-mm-dd
        self.start_date = start_date
        # 日期类型为5时必填，格式yyyy-mm-dd
        self.end_date = end_date

    def validate(self):
        self.validate_required(self.time_type, 'time_type')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.time_type is not None:
            result['timetype'] = self.time_type
        if self.dept_id is not None:
            result['deptid'] = self.dept_id
        if self.start_date is not None:
            result['startdate'] = self.start_date
        if self.end_date is not None:
            result['enddate'] = self.end_date
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('timetype') is not None:
            self.time_type = m.get('timetype')
        if m.get('deptid') is not None:
            self.dept_id = m.get('deptid')
        if m.get('startdate') is not None:
            self.start_date = m.get('startdate')
        if m.get('enddate') is not None:
            self.end_date = m.get('enddate')
        return self


class GoalCompletionRateRequest(TeaModel):
    def __init__(
        self,
        body: GoalCompletionRateRequestBody = None,
    ):
        self.body = body
        # 查询部门销售金额和销售目标达成率

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = GoalCompletionRateRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class MaterialSaleRecordRequestBody(TeaModel):
    def __init__(
        self,
        material: str = None,
        bill_type: str = None,
        currency: str = None,
        aux_prop: str = None,
        customer: str = None,
    ):
        # 商品ID
        self.material = material
        # 单据类型
        self.bill_type = bill_type
        # 部门ID
        self.currency = currency
        # 商品辅助属性ID
        self.aux_prop = aux_prop
        # 客户ID，传入则查询指定客户的销售记录
        self.customer = customer

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.material is not None:
            result['materialid'] = self.material
        if self.bill_type is not None:
            result['billtypeid'] = self.bill_type
        if self.currency is not None:
            result['currencyid'] = self.currency
        if self.aux_prop is not None:
            result['auxpropid'] = self.aux_prop
        if self.customer is not None:
            result['customerid'] = self.customer
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('materialid') is not None:
            self.material = m.get('materialid')
        if m.get('billtypeid') is not None:
            self.bill_type = m.get('billtypeid')
        if m.get('currencyid') is not None:
            self.currency = m.get('currencyid')
        if m.get('auxpropid') is not None:
            self.aux_prop = m.get('auxpropid')
        if m.get('customerid') is not None:
            self.customer = m.get('customerid')
        return self


class MaterialSaleRecordRequest(TeaModel):
    def __init__(
        self,
        body: MaterialSaleRecordRequestBody = None,
    ):
        self.body = body
        # 查询商品销售记录

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = MaterialSaleRecordRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeliveryOperateRequestBody(TeaModel):
    def __init__(
        self,
        id: str = None,
        bill_type: str = None,
        operate: str = None,
    ):
        self.id = id
        # 单据类型
        self.bill_type = bill_type
        # 操作类型，配送 dodelivery、取消配送canceldelivery
        self.operate = operate

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['id'] = self.id
        if self.bill_type is not None:
            result['billtypeid'] = self.bill_type
        if self.operate is not None:
            result['operate'] = self.operate
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('id') is not None:
            self.id = m.get('id')
        if m.get('billtypeid') is not None:
            self.bill_type = m.get('billtypeid')
        if m.get('operate') is not None:
            self.operate = m.get('operate')
        return self


class DeliveryOperateRequest(TeaModel):
    def __init__(
        self,
        body: DeliveryOperateRequestBody = None,
    ):
        self.body = body
        # 配送/取消配送操作

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = DeliveryOperateRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CustomerDebitBalanceRequestBody(TeaModel):
    def __init__(
        self,
        customer: str = None,
        currency: str = None,
    ):
        # 客户id
        self.customer = customer
        # 币别id，默认本位币
        self.currency = currency

    def validate(self):
        self.validate_required(self.customer, 'customer')

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.customer is not None:
            result['customerid'] = self.customer
        if self.currency is not None:
            result['currencyid'] = self.currency
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('customerid') is not None:
            self.customer = m.get('customerid')
        if m.get('currencyid') is not None:
            self.currency = m.get('currencyid')
        return self


class CustomerDebitBalanceRequest(TeaModel):
    def __init__(
        self,
        body: CustomerDebitBalanceRequestBody = None,
    ):
        self.body = body
        # 查询客户可抵扣预收款余额

    def validate(self):
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('body') is not None:
            temp_model = CustomerDebitBalanceRequestBody()
            self.body = temp_model.from_map(m['body'])
        return self


